
I2S_WAVE_Player.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ae4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000c6b10  08004c6c  08004c6c  00014c6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080cb77c  080cb77c  000e000c  2**0
                  CONTENTS
  4 .ARM          00000008  080cb77c  080cb77c  000db77c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080cb784  080cb784  000e000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080cb784  080cb784  000db784  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080cb788  080cb788  000db788  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080cb78c  000e0000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003ac  2000000c  080cb798  000e000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003b8  080cb798  000e03b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000e000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e32c  00000000  00000000  000e003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023d6  00000000  00000000  000ee368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b78  00000000  00000000  000f0740  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a80  00000000  00000000  000f12b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000263fe  00000000  00000000  000f1d38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e2de  00000000  00000000  00118136  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e7f91  00000000  00000000  00126414  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0020e3a5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ca0  00000000  00000000  0020e3f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004c54 	.word	0x08004c54

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004c54 	.word	0x08004c54

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80004c6:	4b0c      	ldr	r3, [pc, #48]	; (80004f8 <MX_DMA_Init+0x38>)
 80004c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80004ca:	4a0b      	ldr	r2, [pc, #44]	; (80004f8 <MX_DMA_Init+0x38>)
 80004cc:	f043 0302 	orr.w	r3, r3, #2
 80004d0:	6493      	str	r3, [r2, #72]	; 0x48
 80004d2:	4b09      	ldr	r3, [pc, #36]	; (80004f8 <MX_DMA_Init+0x38>)
 80004d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80004d6:	f003 0302 	and.w	r3, r3, #2
 80004da:	607b      	str	r3, [r7, #4]
 80004dc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 80004de:	2200      	movs	r2, #0
 80004e0:	2100      	movs	r1, #0
 80004e2:	2038      	movs	r0, #56	; 0x38
 80004e4:	f000 fd67 	bl	8000fb6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 80004e8:	2038      	movs	r0, #56	; 0x38
 80004ea:	f000 fd80 	bl	8000fee <HAL_NVIC_EnableIRQ>

}
 80004ee:	bf00      	nop
 80004f0:	3708      	adds	r7, #8
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bd80      	pop	{r7, pc}
 80004f6:	bf00      	nop
 80004f8:	40021000 	.word	0x40021000

080004fc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b08a      	sub	sp, #40	; 0x28
 8000500:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000502:	f107 0314 	add.w	r3, r7, #20
 8000506:	2200      	movs	r2, #0
 8000508:	601a      	str	r2, [r3, #0]
 800050a:	605a      	str	r2, [r3, #4]
 800050c:	609a      	str	r2, [r3, #8]
 800050e:	60da      	str	r2, [r3, #12]
 8000510:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000512:	4b2b      	ldr	r3, [pc, #172]	; (80005c0 <MX_GPIO_Init+0xc4>)
 8000514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000516:	4a2a      	ldr	r2, [pc, #168]	; (80005c0 <MX_GPIO_Init+0xc4>)
 8000518:	f043 0304 	orr.w	r3, r3, #4
 800051c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800051e:	4b28      	ldr	r3, [pc, #160]	; (80005c0 <MX_GPIO_Init+0xc4>)
 8000520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000522:	f003 0304 	and.w	r3, r3, #4
 8000526:	613b      	str	r3, [r7, #16]
 8000528:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800052a:	4b25      	ldr	r3, [pc, #148]	; (80005c0 <MX_GPIO_Init+0xc4>)
 800052c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800052e:	4a24      	ldr	r2, [pc, #144]	; (80005c0 <MX_GPIO_Init+0xc4>)
 8000530:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000534:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000536:	4b22      	ldr	r3, [pc, #136]	; (80005c0 <MX_GPIO_Init+0xc4>)
 8000538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800053a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800053e:	60fb      	str	r3, [r7, #12]
 8000540:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000542:	4b1f      	ldr	r3, [pc, #124]	; (80005c0 <MX_GPIO_Init+0xc4>)
 8000544:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000546:	4a1e      	ldr	r2, [pc, #120]	; (80005c0 <MX_GPIO_Init+0xc4>)
 8000548:	f043 0301 	orr.w	r3, r3, #1
 800054c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800054e:	4b1c      	ldr	r3, [pc, #112]	; (80005c0 <MX_GPIO_Init+0xc4>)
 8000550:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000552:	f003 0301 	and.w	r3, r3, #1
 8000556:	60bb      	str	r3, [r7, #8]
 8000558:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800055a:	4b19      	ldr	r3, [pc, #100]	; (80005c0 <MX_GPIO_Init+0xc4>)
 800055c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800055e:	4a18      	ldr	r2, [pc, #96]	; (80005c0 <MX_GPIO_Init+0xc4>)
 8000560:	f043 0302 	orr.w	r3, r3, #2
 8000564:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000566:	4b16      	ldr	r3, [pc, #88]	; (80005c0 <MX_GPIO_Init+0xc4>)
 8000568:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800056a:	f003 0302 	and.w	r3, r3, #2
 800056e:	607b      	str	r3, [r7, #4]
 8000570:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000572:	2200      	movs	r2, #0
 8000574:	2120      	movs	r1, #32
 8000576:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800057a:	f001 f8f5 	bl	8001768 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800057e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000582:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000584:	4b0f      	ldr	r3, [pc, #60]	; (80005c4 <MX_GPIO_Init+0xc8>)
 8000586:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000588:	2300      	movs	r3, #0
 800058a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800058c:	f107 0314 	add.w	r3, r7, #20
 8000590:	4619      	mov	r1, r3
 8000592:	480d      	ldr	r0, [pc, #52]	; (80005c8 <MX_GPIO_Init+0xcc>)
 8000594:	f000 ff3e 	bl	8001414 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000598:	2320      	movs	r3, #32
 800059a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800059c:	2301      	movs	r3, #1
 800059e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a0:	2300      	movs	r3, #0
 80005a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005a4:	2300      	movs	r3, #0
 80005a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80005a8:	f107 0314 	add.w	r3, r7, #20
 80005ac:	4619      	mov	r1, r3
 80005ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005b2:	f000 ff2f 	bl	8001414 <HAL_GPIO_Init>

}
 80005b6:	bf00      	nop
 80005b8:	3728      	adds	r7, #40	; 0x28
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	40021000 	.word	0x40021000
 80005c4:	10210000 	.word	0x10210000
 80005c8:	48000800 	.word	0x48000800

080005cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d0:	f000 fb9a 	bl	8000d08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d4:	f000 f814 	bl	8000600 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d8:	f7ff ff90 	bl	80004fc <MX_GPIO_Init>
  MX_DMA_Init();
 80005dc:	f7ff ff70 	bl	80004c0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80005e0:	f000 f9f2 	bl	80009c8 <MX_USART2_UART_Init>
  MX_SAI1_Init();
 80005e4:	f000 f8ae 	bl	8000744 <MX_SAI1_Init>
  /* USER CODE BEGIN 2 */
  wave_player_init(&hsai_BlockA1);
 80005e8:	4803      	ldr	r0, [pc, #12]	; (80005f8 <main+0x2c>)
 80005ea:	f000 fa5f 	bl	8000aac <wave_player_init>
  wave_player_start(audio_file);
 80005ee:	4803      	ldr	r0, [pc, #12]	; (80005fc <main+0x30>)
 80005f0:	f000 fa6c 	bl	8000acc <wave_player_start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005f4:	e7fe      	b.n	80005f4 <main+0x28>
 80005f6:	bf00      	nop
 80005f8:	20000074 	.word	0x20000074
 80005fc:	08004cb4 	.word	0x08004cb4

08000600 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b0b8      	sub	sp, #224	; 0xe0
 8000604:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000606:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800060a:	2244      	movs	r2, #68	; 0x44
 800060c:	2100      	movs	r1, #0
 800060e:	4618      	mov	r0, r3
 8000610:	f004 fb18 	bl	8004c44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000614:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000618:	2200      	movs	r2, #0
 800061a:	601a      	str	r2, [r3, #0]
 800061c:	605a      	str	r2, [r3, #4]
 800061e:	609a      	str	r2, [r3, #8]
 8000620:	60da      	str	r2, [r3, #12]
 8000622:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000624:	463b      	mov	r3, r7
 8000626:	2288      	movs	r2, #136	; 0x88
 8000628:	2100      	movs	r1, #0
 800062a:	4618      	mov	r0, r3
 800062c:	f004 fb0a 	bl	8004c44 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000630:	2302      	movs	r3, #2
 8000632:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000636:	f44f 7380 	mov.w	r3, #256	; 0x100
 800063a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800063e:	2310      	movs	r3, #16
 8000640:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000644:	2302      	movs	r3, #2
 8000646:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800064a:	2302      	movs	r3, #2
 800064c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000650:	2301      	movs	r3, #1
 8000652:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000656:	230a      	movs	r3, #10
 8000658:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800065c:	2307      	movs	r3, #7
 800065e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000662:	2302      	movs	r3, #2
 8000664:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000668:	2302      	movs	r3, #2
 800066a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800066e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000672:	4618      	mov	r0, r3
 8000674:	f001 f8f4 	bl	8001860 <HAL_RCC_OscConfig>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800067e:	f000 f85c 	bl	800073a <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000682:	230f      	movs	r3, #15
 8000684:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000688:	2303      	movs	r3, #3
 800068a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800068e:	2300      	movs	r3, #0
 8000690:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000694:	2300      	movs	r3, #0
 8000696:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800069a:	2300      	movs	r3, #0
 800069c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006a0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80006a4:	2104      	movs	r1, #4
 80006a6:	4618      	mov	r0, r3
 80006a8:	f001 fcc0 	bl	800202c <HAL_RCC_ClockConfig>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80006b2:	f000 f842 	bl	800073a <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_SAI1;
 80006b6:	f640 0302 	movw	r3, #2050	; 0x802
 80006ba:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80006bc:	2300      	movs	r3, #0
 80006be:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 80006c0:	2300      	movs	r3, #0
 80006c2:	667b      	str	r3, [r7, #100]	; 0x64
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80006c4:	2302      	movs	r3, #2
 80006c6:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80006c8:	2301      	movs	r3, #1
 80006ca:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 12;
 80006cc:	230c      	movs	r3, #12
 80006ce:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV17;
 80006d0:	2311      	movs	r3, #17
 80006d2:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80006d4:	2302      	movs	r3, #2
 80006d6:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80006d8:	2302      	movs	r3, #2
 80006da:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK;
 80006dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006e0:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006e2:	463b      	mov	r3, r7
 80006e4:	4618      	mov	r0, r3
 80006e6:	f001 fea7 	bl	8002438 <HAL_RCCEx_PeriphCLKConfig>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 80006f0:	f000 f823 	bl	800073a <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006f4:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006f8:	f001 f85c 	bl	80017b4 <HAL_PWREx_ControlVoltageScaling>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <SystemClock_Config+0x106>
  {
    Error_Handler();
 8000702:	f000 f81a 	bl	800073a <Error_Handler>
  }
}
 8000706:	bf00      	nop
 8000708:	37e0      	adds	r7, #224	; 0xe0
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}

0800070e <HAL_SAI_TxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai)
{
 800070e:	b580      	push	{r7, lr}
 8000710:	b082      	sub	sp, #8
 8000712:	af00      	add	r7, sp, #0
 8000714:	6078      	str	r0, [r7, #4]
	wave_player_prepare_half_buffer(SECOND_HALF_OF_BUFFER);
 8000716:	2002      	movs	r0, #2
 8000718:	f000 fa6c 	bl	8000bf4 <wave_player_prepare_half_buffer>
}
 800071c:	bf00      	nop
 800071e:	3708      	adds	r7, #8
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}

08000724 <HAL_SAI_TxHalfCpltCallback>:

void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
	wave_player_prepare_half_buffer(FIRST_HALF_OF_BUFFER);
 800072c:	2001      	movs	r0, #1
 800072e:	f000 fa61 	bl	8000bf4 <wave_player_prepare_half_buffer>
}
 8000732:	bf00      	nop
 8000734:	3708      	adds	r7, #8
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}

0800073a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800073a:	b480      	push	{r7}
 800073c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800073e:	b672      	cpsid	i
}
 8000740:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000742:	e7fe      	b.n	8000742 <Error_Handler+0x8>

08000744 <MX_SAI1_Init>:
SAI_HandleTypeDef hsai_BlockA1;
DMA_HandleTypeDef hdma_sai1_a;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */

  hsai_BlockA1.Instance = SAI1_Block_A;
 8000748:	4b17      	ldr	r3, [pc, #92]	; (80007a8 <MX_SAI1_Init+0x64>)
 800074a:	4a18      	ldr	r2, [pc, #96]	; (80007ac <MX_SAI1_Init+0x68>)
 800074c:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 800074e:	4b16      	ldr	r3, [pc, #88]	; (80007a8 <MX_SAI1_Init+0x64>)
 8000750:	2200      	movs	r2, #0
 8000752:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8000754:	4b14      	ldr	r3, [pc, #80]	; (80007a8 <MX_SAI1_Init+0x64>)
 8000756:	2200      	movs	r2, #0
 8000758:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800075a:	4b13      	ldr	r3, [pc, #76]	; (80007a8 <MX_SAI1_Init+0x64>)
 800075c:	2200      	movs	r2, #0
 800075e:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000760:	4b11      	ldr	r3, [pc, #68]	; (80007a8 <MX_SAI1_Init+0x64>)
 8000762:	2200      	movs	r2, #0
 8000764:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000766:	4b10      	ldr	r3, [pc, #64]	; (80007a8 <MX_SAI1_Init+0x64>)
 8000768:	2200      	movs	r2, #0
 800076a:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_44K;
 800076c:	4b0e      	ldr	r3, [pc, #56]	; (80007a8 <MX_SAI1_Init+0x64>)
 800076e:	f64a 4244 	movw	r2, #44100	; 0xac44
 8000772:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000774:	4b0c      	ldr	r3, [pc, #48]	; (80007a8 <MX_SAI1_Init+0x64>)
 8000776:	2200      	movs	r2, #0
 8000778:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_MONOMODE;
 800077a:	4b0b      	ldr	r3, [pc, #44]	; (80007a8 <MX_SAI1_Init+0x64>)
 800077c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000780:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000782:	4b09      	ldr	r3, [pc, #36]	; (80007a8 <MX_SAI1_Init+0x64>)
 8000784:	2200      	movs	r2, #0
 8000786:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000788:	4b07      	ldr	r3, [pc, #28]	; (80007a8 <MX_SAI1_Init+0x64>)
 800078a:	2200      	movs	r2, #0
 800078c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 800078e:	2302      	movs	r3, #2
 8000790:	2200      	movs	r2, #0
 8000792:	2100      	movs	r1, #0
 8000794:	4804      	ldr	r0, [pc, #16]	; (80007a8 <MX_SAI1_Init+0x64>)
 8000796:	f003 f965 	bl	8003a64 <HAL_SAI_InitProtocol>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <MX_SAI1_Init+0x60>
  {
    Error_Handler();
 80007a0:	f7ff ffcb 	bl	800073a <Error_Handler>

  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 80007a4:	bf00      	nop
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	20000074 	.word	0x20000074
 80007ac:	40015404 	.word	0x40015404

080007b0 <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b088      	sub	sp, #32
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	4a36      	ldr	r2, [pc, #216]	; (8000898 <HAL_SAI_MspInit+0xe8>)
 80007be:	4293      	cmp	r3, r2
 80007c0:	d166      	bne.n	8000890 <HAL_SAI_MspInit+0xe0>
    {
    /* SAI1 clock enable */
    if (SAI1_client == 0)
 80007c2:	4b36      	ldr	r3, [pc, #216]	; (800089c <HAL_SAI_MspInit+0xec>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d10b      	bne.n	80007e2 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 80007ca:	4b35      	ldr	r3, [pc, #212]	; (80008a0 <HAL_SAI_MspInit+0xf0>)
 80007cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007ce:	4a34      	ldr	r2, [pc, #208]	; (80008a0 <HAL_SAI_MspInit+0xf0>)
 80007d0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80007d4:	6613      	str	r3, [r2, #96]	; 0x60
 80007d6:	4b32      	ldr	r3, [pc, #200]	; (80008a0 <HAL_SAI_MspInit+0xf0>)
 80007d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007de:	60bb      	str	r3, [r7, #8]
 80007e0:	68bb      	ldr	r3, [r7, #8]
    }
    SAI1_client ++;
 80007e2:	4b2e      	ldr	r3, [pc, #184]	; (800089c <HAL_SAI_MspInit+0xec>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	3301      	adds	r3, #1
 80007e8:	4a2c      	ldr	r2, [pc, #176]	; (800089c <HAL_SAI_MspInit+0xec>)
 80007ea:	6013      	str	r3, [r2, #0]
    /**SAI1_A_Block_A GPIO Configuration
    PC3     ------> SAI1_SD_A
    PB10     ------> SAI1_SCK_A
    PB9     ------> SAI1_FS_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80007ec:	2308      	movs	r3, #8
 80007ee:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007f0:	2302      	movs	r3, #2
 80007f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f4:	2300      	movs	r3, #0
 80007f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f8:	2300      	movs	r3, #0
 80007fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80007fc:	230d      	movs	r3, #13
 80007fe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000800:	f107 030c 	add.w	r3, r7, #12
 8000804:	4619      	mov	r1, r3
 8000806:	4827      	ldr	r0, [pc, #156]	; (80008a4 <HAL_SAI_MspInit+0xf4>)
 8000808:	f000 fe04 	bl	8001414 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 800080c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000810:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000812:	2302      	movs	r3, #2
 8000814:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000816:	2300      	movs	r3, #0
 8000818:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081a:	2300      	movs	r3, #0
 800081c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 800081e:	230d      	movs	r3, #13
 8000820:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000822:	f107 030c 	add.w	r3, r7, #12
 8000826:	4619      	mov	r1, r3
 8000828:	481f      	ldr	r0, [pc, #124]	; (80008a8 <HAL_SAI_MspInit+0xf8>)
 800082a:	f000 fdf3 	bl	8001414 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai1_a.Instance = DMA2_Channel1;
 800082e:	4b1f      	ldr	r3, [pc, #124]	; (80008ac <HAL_SAI_MspInit+0xfc>)
 8000830:	4a1f      	ldr	r2, [pc, #124]	; (80008b0 <HAL_SAI_MspInit+0x100>)
 8000832:	601a      	str	r2, [r3, #0]
    hdma_sai1_a.Init.Request = DMA_REQUEST_1;
 8000834:	4b1d      	ldr	r3, [pc, #116]	; (80008ac <HAL_SAI_MspInit+0xfc>)
 8000836:	2201      	movs	r2, #1
 8000838:	605a      	str	r2, [r3, #4]
    hdma_sai1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800083a:	4b1c      	ldr	r3, [pc, #112]	; (80008ac <HAL_SAI_MspInit+0xfc>)
 800083c:	2210      	movs	r2, #16
 800083e:	609a      	str	r2, [r3, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8000840:	4b1a      	ldr	r3, [pc, #104]	; (80008ac <HAL_SAI_MspInit+0xfc>)
 8000842:	2200      	movs	r2, #0
 8000844:	60da      	str	r2, [r3, #12]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 8000846:	4b19      	ldr	r3, [pc, #100]	; (80008ac <HAL_SAI_MspInit+0xfc>)
 8000848:	2280      	movs	r2, #128	; 0x80
 800084a:	611a      	str	r2, [r3, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800084c:	4b17      	ldr	r3, [pc, #92]	; (80008ac <HAL_SAI_MspInit+0xfc>)
 800084e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000852:	615a      	str	r2, [r3, #20]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000854:	4b15      	ldr	r3, [pc, #84]	; (80008ac <HAL_SAI_MspInit+0xfc>)
 8000856:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800085a:	619a      	str	r2, [r3, #24]
    hdma_sai1_a.Init.Mode = DMA_NORMAL;
 800085c:	4b13      	ldr	r3, [pc, #76]	; (80008ac <HAL_SAI_MspInit+0xfc>)
 800085e:	2200      	movs	r2, #0
 8000860:	61da      	str	r2, [r3, #28]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_LOW;
 8000862:	4b12      	ldr	r3, [pc, #72]	; (80008ac <HAL_SAI_MspInit+0xfc>)
 8000864:	2200      	movs	r2, #0
 8000866:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 8000868:	4810      	ldr	r0, [pc, #64]	; (80008ac <HAL_SAI_MspInit+0xfc>)
 800086a:	f000 fbdb 	bl	8001024 <HAL_DMA_Init>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <HAL_SAI_MspInit+0xc8>
    {
      Error_Handler();
 8000874:	f7ff ff61 	bl	800073a <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_a);
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	4a0c      	ldr	r2, [pc, #48]	; (80008ac <HAL_SAI_MspInit+0xfc>)
 800087c:	671a      	str	r2, [r3, #112]	; 0x70
 800087e:	4a0b      	ldr	r2, [pc, #44]	; (80008ac <HAL_SAI_MspInit+0xfc>)
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_a);
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	4a09      	ldr	r2, [pc, #36]	; (80008ac <HAL_SAI_MspInit+0xfc>)
 8000888:	66da      	str	r2, [r3, #108]	; 0x6c
 800088a:	4a08      	ldr	r2, [pc, #32]	; (80008ac <HAL_SAI_MspInit+0xfc>)
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	6293      	str	r3, [r2, #40]	; 0x28
    }
}
 8000890:	bf00      	nop
 8000892:	3720      	adds	r7, #32
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	40015404 	.word	0x40015404
 800089c:	20000028 	.word	0x20000028
 80008a0:	40021000 	.word	0x40021000
 80008a4:	48000800 	.word	0x48000800
 80008a8:	48000400 	.word	0x48000400
 80008ac:	2000002c 	.word	0x2000002c
 80008b0:	40020408 	.word	0x40020408

080008b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	b083      	sub	sp, #12
 80008b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ba:	4b0f      	ldr	r3, [pc, #60]	; (80008f8 <HAL_MspInit+0x44>)
 80008bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008be:	4a0e      	ldr	r2, [pc, #56]	; (80008f8 <HAL_MspInit+0x44>)
 80008c0:	f043 0301 	orr.w	r3, r3, #1
 80008c4:	6613      	str	r3, [r2, #96]	; 0x60
 80008c6:	4b0c      	ldr	r3, [pc, #48]	; (80008f8 <HAL_MspInit+0x44>)
 80008c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008ca:	f003 0301 	and.w	r3, r3, #1
 80008ce:	607b      	str	r3, [r7, #4]
 80008d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008d2:	4b09      	ldr	r3, [pc, #36]	; (80008f8 <HAL_MspInit+0x44>)
 80008d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008d6:	4a08      	ldr	r2, [pc, #32]	; (80008f8 <HAL_MspInit+0x44>)
 80008d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008dc:	6593      	str	r3, [r2, #88]	; 0x58
 80008de:	4b06      	ldr	r3, [pc, #24]	; (80008f8 <HAL_MspInit+0x44>)
 80008e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008e6:	603b      	str	r3, [r7, #0]
 80008e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ea:	bf00      	nop
 80008ec:	370c      	adds	r7, #12
 80008ee:	46bd      	mov	sp, r7
 80008f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f4:	4770      	bx	lr
 80008f6:	bf00      	nop
 80008f8:	40021000 	.word	0x40021000

080008fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000900:	e7fe      	b.n	8000900 <NMI_Handler+0x4>

08000902 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000902:	b480      	push	{r7}
 8000904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000906:	e7fe      	b.n	8000906 <HardFault_Handler+0x4>

08000908 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800090c:	e7fe      	b.n	800090c <MemManage_Handler+0x4>

0800090e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800090e:	b480      	push	{r7}
 8000910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000912:	e7fe      	b.n	8000912 <BusFault_Handler+0x4>

08000914 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000918:	e7fe      	b.n	8000918 <UsageFault_Handler+0x4>

0800091a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800091a:	b480      	push	{r7}
 800091c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800091e:	bf00      	nop
 8000920:	46bd      	mov	sp, r7
 8000922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000926:	4770      	bx	lr

08000928 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800092c:	bf00      	nop
 800092e:	46bd      	mov	sp, r7
 8000930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000934:	4770      	bx	lr

08000936 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000936:	b480      	push	{r7}
 8000938:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800093a:	bf00      	nop
 800093c:	46bd      	mov	sp, r7
 800093e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000942:	4770      	bx	lr

08000944 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000948:	f000 fa3a 	bl	8000dc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800094c:	bf00      	nop
 800094e:	bd80      	pop	{r7, pc}

08000950 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 8000954:	4802      	ldr	r0, [pc, #8]	; (8000960 <DMA2_Channel1_IRQHandler+0x10>)
 8000956:	f000 fc7d 	bl	8001254 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 800095a:	bf00      	nop
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	2000002c 	.word	0x2000002c

08000964 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000968:	4b15      	ldr	r3, [pc, #84]	; (80009c0 <SystemInit+0x5c>)
 800096a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800096e:	4a14      	ldr	r2, [pc, #80]	; (80009c0 <SystemInit+0x5c>)
 8000970:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000974:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000978:	4b12      	ldr	r3, [pc, #72]	; (80009c4 <SystemInit+0x60>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4a11      	ldr	r2, [pc, #68]	; (80009c4 <SystemInit+0x60>)
 800097e:	f043 0301 	orr.w	r3, r3, #1
 8000982:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000984:	4b0f      	ldr	r3, [pc, #60]	; (80009c4 <SystemInit+0x60>)
 8000986:	2200      	movs	r2, #0
 8000988:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800098a:	4b0e      	ldr	r3, [pc, #56]	; (80009c4 <SystemInit+0x60>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	4a0d      	ldr	r2, [pc, #52]	; (80009c4 <SystemInit+0x60>)
 8000990:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000994:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000998:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800099a:	4b0a      	ldr	r3, [pc, #40]	; (80009c4 <SystemInit+0x60>)
 800099c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80009a0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80009a2:	4b08      	ldr	r3, [pc, #32]	; (80009c4 <SystemInit+0x60>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	4a07      	ldr	r2, [pc, #28]	; (80009c4 <SystemInit+0x60>)
 80009a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80009ac:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80009ae:	4b05      	ldr	r3, [pc, #20]	; (80009c4 <SystemInit+0x60>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	619a      	str	r2, [r3, #24]
}
 80009b4:	bf00      	nop
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr
 80009be:	bf00      	nop
 80009c0:	e000ed00 	.word	0xe000ed00
 80009c4:	40021000 	.word	0x40021000

080009c8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009cc:	4b14      	ldr	r3, [pc, #80]	; (8000a20 <MX_USART2_UART_Init+0x58>)
 80009ce:	4a15      	ldr	r2, [pc, #84]	; (8000a24 <MX_USART2_UART_Init+0x5c>)
 80009d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009d2:	4b13      	ldr	r3, [pc, #76]	; (8000a20 <MX_USART2_UART_Init+0x58>)
 80009d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009da:	4b11      	ldr	r3, [pc, #68]	; (8000a20 <MX_USART2_UART_Init+0x58>)
 80009dc:	2200      	movs	r2, #0
 80009de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009e0:	4b0f      	ldr	r3, [pc, #60]	; (8000a20 <MX_USART2_UART_Init+0x58>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009e6:	4b0e      	ldr	r3, [pc, #56]	; (8000a20 <MX_USART2_UART_Init+0x58>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009ec:	4b0c      	ldr	r3, [pc, #48]	; (8000a20 <MX_USART2_UART_Init+0x58>)
 80009ee:	220c      	movs	r2, #12
 80009f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009f2:	4b0b      	ldr	r3, [pc, #44]	; (8000a20 <MX_USART2_UART_Init+0x58>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009f8:	4b09      	ldr	r3, [pc, #36]	; (8000a20 <MX_USART2_UART_Init+0x58>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009fe:	4b08      	ldr	r3, [pc, #32]	; (8000a20 <MX_USART2_UART_Init+0x58>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a04:	4b06      	ldr	r3, [pc, #24]	; (8000a20 <MX_USART2_UART_Init+0x58>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a0a:	4805      	ldr	r0, [pc, #20]	; (8000a20 <MX_USART2_UART_Init+0x58>)
 8000a0c:	f003 fcb6 	bl	800437c <HAL_UART_Init>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000a16:	f7ff fe90 	bl	800073a <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a1a:	bf00      	nop
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	200000f8 	.word	0x200000f8
 8000a24:	40004400 	.word	0x40004400

08000a28 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b08a      	sub	sp, #40	; 0x28
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a30:	f107 0314 	add.w	r3, r7, #20
 8000a34:	2200      	movs	r2, #0
 8000a36:	601a      	str	r2, [r3, #0]
 8000a38:	605a      	str	r2, [r3, #4]
 8000a3a:	609a      	str	r2, [r3, #8]
 8000a3c:	60da      	str	r2, [r3, #12]
 8000a3e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4a17      	ldr	r2, [pc, #92]	; (8000aa4 <HAL_UART_MspInit+0x7c>)
 8000a46:	4293      	cmp	r3, r2
 8000a48:	d128      	bne.n	8000a9c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a4a:	4b17      	ldr	r3, [pc, #92]	; (8000aa8 <HAL_UART_MspInit+0x80>)
 8000a4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a4e:	4a16      	ldr	r2, [pc, #88]	; (8000aa8 <HAL_UART_MspInit+0x80>)
 8000a50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a54:	6593      	str	r3, [r2, #88]	; 0x58
 8000a56:	4b14      	ldr	r3, [pc, #80]	; (8000aa8 <HAL_UART_MspInit+0x80>)
 8000a58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a5e:	613b      	str	r3, [r7, #16]
 8000a60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a62:	4b11      	ldr	r3, [pc, #68]	; (8000aa8 <HAL_UART_MspInit+0x80>)
 8000a64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a66:	4a10      	ldr	r2, [pc, #64]	; (8000aa8 <HAL_UART_MspInit+0x80>)
 8000a68:	f043 0301 	orr.w	r3, r3, #1
 8000a6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a6e:	4b0e      	ldr	r3, [pc, #56]	; (8000aa8 <HAL_UART_MspInit+0x80>)
 8000a70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a72:	f003 0301 	and.w	r3, r3, #1
 8000a76:	60fb      	str	r3, [r7, #12]
 8000a78:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a7a:	230c      	movs	r3, #12
 8000a7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a7e:	2302      	movs	r3, #2
 8000a80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a82:	2300      	movs	r3, #0
 8000a84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a86:	2303      	movs	r3, #3
 8000a88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a8a:	2307      	movs	r3, #7
 8000a8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a8e:	f107 0314 	add.w	r3, r7, #20
 8000a92:	4619      	mov	r1, r3
 8000a94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a98:	f000 fcbc 	bl	8001414 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000a9c:	bf00      	nop
 8000a9e:	3728      	adds	r7, #40	; 0x28
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	40004400 	.word	0x40004400
 8000aa8:	40021000 	.word	0x40021000

08000aac <wave_player_init>:

struct wave_player_s wave_player;
extern uint8_t audio_file[];

void wave_player_init(SAI_HandleTypeDef *_hsai)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b083      	sub	sp, #12
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
	wave_player.hsai = _hsai;
 8000ab4:	4a04      	ldr	r2, [pc, #16]	; (8000ac8 <wave_player_init+0x1c>)
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	6013      	str	r3, [r2, #0]
}
 8000aba:	bf00      	nop
 8000abc:	370c      	adds	r7, #12
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop
 8000ac8:	2000017c 	.word	0x2000017c

08000acc <wave_player_start>:

void wave_player_start(uint8_t *file)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b084      	sub	sp, #16
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
	int8_t status;

	status = wave_player_read_header(file);
 8000ad4:	6878      	ldr	r0, [r7, #4]
 8000ad6:	f000 f81f 	bl	8000b18 <wave_player_read_header>
 8000ada:	4603      	mov	r3, r0
 8000adc:	73fb      	strb	r3, [r7, #15]

	if(ERROR == status)
 8000ade:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ae2:	2b01      	cmp	r3, #1
 8000ae4:	d010      	beq.n	8000b08 <wave_player_start+0x3c>
	{
		return;
	}

	wave_player_set_sample_rate(wave_player.file_hdr.wave_file_hdr.sample_rate);
 8000ae6:	4b0a      	ldr	r3, [pc, #40]	; (8000b10 <wave_player_start+0x44>)
 8000ae8:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8000aec:	4618      	mov	r0, r3
 8000aee:	f000 f861 	bl	8000bb4 <wave_player_set_sample_rate>
	wave_player_prepare_first_buffer();
 8000af2:	f000 f875 	bl	8000be0 <wave_player_prepare_first_buffer>

	HAL_SAI_Transmit_DMA(wave_player.hsai, (uint8_t *)wave_player.buffer, AUDIO_BUFFER_SIZE/2);
 8000af6:	4b06      	ldr	r3, [pc, #24]	; (8000b10 <wave_player_start+0x44>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000afe:	4905      	ldr	r1, [pc, #20]	; (8000b14 <wave_player_start+0x48>)
 8000b00:	4618      	mov	r0, r3
 8000b02:	f003 f975 	bl	8003df0 <HAL_SAI_Transmit_DMA>
 8000b06:	e000      	b.n	8000b0a <wave_player_start+0x3e>
		return;
 8000b08:	bf00      	nop
}
 8000b0a:	3710      	adds	r7, #16
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	2000017c 	.word	0x2000017c
 8000b14:	20000184 	.word	0x20000184

08000b18 <wave_player_read_header>:

int8_t wave_player_read_header(uint8_t *file)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b085      	sub	sp, #20
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
	uint32_t i;

	wave_player.data_pointer = file;
 8000b20:	4a20      	ldr	r2, [pc, #128]	; (8000ba4 <wave_player_read_header+0x8c>)
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	6053      	str	r3, [r2, #4]

	for(i = 0; i < WAVE_FILE_HEADER_SIZE; i++)
 8000b26:	2300      	movs	r3, #0
 8000b28:	60fb      	str	r3, [r7, #12]
 8000b2a:	e00e      	b.n	8000b4a <wave_player_read_header+0x32>
	{
		wave_player.file_hdr.bytes[i] = *(wave_player.data_pointer+i);
 8000b2c:	4b1d      	ldr	r3, [pc, #116]	; (8000ba4 <wave_player_read_header+0x8c>)
 8000b2e:	685a      	ldr	r2, [r3, #4]
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	4413      	add	r3, r2
 8000b34:	7819      	ldrb	r1, [r3, #0]
 8000b36:	4a1b      	ldr	r2, [pc, #108]	; (8000ba4 <wave_player_read_header+0x8c>)
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	4413      	add	r3, r2
 8000b3c:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8000b40:	460a      	mov	r2, r1
 8000b42:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < WAVE_FILE_HEADER_SIZE; i++)
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	3301      	adds	r3, #1
 8000b48:	60fb      	str	r3, [r7, #12]
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	2b2b      	cmp	r3, #43	; 0x2b
 8000b4e:	d9ed      	bls.n	8000b2c <wave_player_read_header+0x14>
	}

	if(RIFF_HDR_CONST != wave_player.file_hdr.wave_file_hdr.riff_hdr)
 8000b50:	4b14      	ldr	r3, [pc, #80]	; (8000ba4 <wave_player_read_header+0x8c>)
 8000b52:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8000b56:	4a14      	ldr	r2, [pc, #80]	; (8000ba8 <wave_player_read_header+0x90>)
 8000b58:	4293      	cmp	r3, r2
 8000b5a:	d001      	beq.n	8000b60 <wave_player_read_header+0x48>
	{
		return ERROR;
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	e01b      	b.n	8000b98 <wave_player_read_header+0x80>
	}

	if(WAVE_ID_CONST != wave_player.file_hdr.wave_file_hdr.wave_id)
 8000b60:	4b10      	ldr	r3, [pc, #64]	; (8000ba4 <wave_player_read_header+0x8c>)
 8000b62:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8000b66:	4a11      	ldr	r2, [pc, #68]	; (8000bac <wave_player_read_header+0x94>)
 8000b68:	4293      	cmp	r3, r2
 8000b6a:	d001      	beq.n	8000b70 <wave_player_read_header+0x58>
	{
		return ERROR;
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	e013      	b.n	8000b98 <wave_player_read_header+0x80>
	}

	if(FMT_CONST != wave_player.file_hdr.wave_file_hdr.chunk_marker)
 8000b70:	4b0c      	ldr	r3, [pc, #48]	; (8000ba4 <wave_player_read_header+0x8c>)
 8000b72:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8000b76:	4a0e      	ldr	r2, [pc, #56]	; (8000bb0 <wave_player_read_header+0x98>)
 8000b78:	4293      	cmp	r3, r2
 8000b7a:	d001      	beq.n	8000b80 <wave_player_read_header+0x68>
	{
		return ERROR;
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	e00b      	b.n	8000b98 <wave_player_read_header+0x80>
	}

	if(CHANNEL_MONO != wave_player.file_hdr.wave_file_hdr.channels)
 8000b80:	4b08      	ldr	r3, [pc, #32]	; (8000ba4 <wave_player_read_header+0x8c>)
 8000b82:	f8b3 3222 	ldrh.w	r3, [r3, #546]	; 0x222
 8000b86:	2b01      	cmp	r3, #1
 8000b88:	d001      	beq.n	8000b8e <wave_player_read_header+0x76>
	{
		return ERROR;
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	e004      	b.n	8000b98 <wave_player_read_header+0x80>
	}

	wave_player.byte_counter = WAVE_FILE_HEADER_SIZE;
 8000b8e:	4b05      	ldr	r3, [pc, #20]	; (8000ba4 <wave_player_read_header+0x8c>)
 8000b90:	222c      	movs	r2, #44	; 0x2c
 8000b92:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208

	return SUCCESS;
 8000b96:	2300      	movs	r3, #0
}
 8000b98:	4618      	mov	r0, r3
 8000b9a:	3714      	adds	r7, #20
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba2:	4770      	bx	lr
 8000ba4:	2000017c 	.word	0x2000017c
 8000ba8:	46464952 	.word	0x46464952
 8000bac:	45564157 	.word	0x45564157
 8000bb0:	20746d66 	.word	0x20746d66

08000bb4 <wave_player_set_sample_rate>:

void wave_player_set_sample_rate(uint32_t sample_rate)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
	wave_player.hsai->Init.AudioFrequency = sample_rate;
 8000bbc:	4b07      	ldr	r3, [pc, #28]	; (8000bdc <wave_player_set_sample_rate+0x28>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	687a      	ldr	r2, [r7, #4]
 8000bc2:	61da      	str	r2, [r3, #28]

	HAL_SAI_InitProtocol(wave_player.hsai, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2);
 8000bc4:	4b05      	ldr	r3, [pc, #20]	; (8000bdc <wave_player_set_sample_rate+0x28>)
 8000bc6:	6818      	ldr	r0, [r3, #0]
 8000bc8:	2302      	movs	r3, #2
 8000bca:	2200      	movs	r2, #0
 8000bcc:	2100      	movs	r1, #0
 8000bce:	f002 ff49 	bl	8003a64 <HAL_SAI_InitProtocol>
}
 8000bd2:	bf00      	nop
 8000bd4:	3708      	adds	r7, #8
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	2000017c 	.word	0x2000017c

08000be0 <wave_player_prepare_first_buffer>:

void wave_player_prepare_first_buffer(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
	wave_player_prepare_data(0, AUDIO_BUFFER_SIZE);
 8000be4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000be8:	2000      	movs	r0, #0
 8000bea:	f000 f82b 	bl	8000c44 <wave_player_prepare_data>
}
 8000bee:	bf00      	nop
 8000bf0:	bd80      	pop	{r7, pc}
	...

08000bf4 <wave_player_prepare_half_buffer>:

void wave_player_prepare_half_buffer(uint8_t half_number)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	71fb      	strb	r3, [r7, #7]
	if(FIRST_HALF_OF_BUFFER == half_number)
 8000bfe:	79fb      	ldrb	r3, [r7, #7]
 8000c00:	2b01      	cmp	r3, #1
 8000c02:	d105      	bne.n	8000c10 <wave_player_prepare_half_buffer+0x1c>
	{
		wave_player_prepare_data(0, AUDIO_BUFFER_SIZE/2);
 8000c04:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c08:	2000      	movs	r0, #0
 8000c0a:	f000 f81b 	bl	8000c44 <wave_player_prepare_data>
	else if(SECOND_HALF_OF_BUFFER == half_number)
	{
		HAL_SAI_Transmit_DMA(wave_player.hsai, (uint8_t *)wave_player.buffer, AUDIO_BUFFER_SIZE/2);
		wave_player_prepare_data(AUDIO_BUFFER_SIZE/2, AUDIO_BUFFER_SIZE);
	}
}
 8000c0e:	e010      	b.n	8000c32 <wave_player_prepare_half_buffer+0x3e>
	else if(SECOND_HALF_OF_BUFFER == half_number)
 8000c10:	79fb      	ldrb	r3, [r7, #7]
 8000c12:	2b02      	cmp	r3, #2
 8000c14:	d10d      	bne.n	8000c32 <wave_player_prepare_half_buffer+0x3e>
		HAL_SAI_Transmit_DMA(wave_player.hsai, (uint8_t *)wave_player.buffer, AUDIO_BUFFER_SIZE/2);
 8000c16:	4b09      	ldr	r3, [pc, #36]	; (8000c3c <wave_player_prepare_half_buffer+0x48>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c1e:	4908      	ldr	r1, [pc, #32]	; (8000c40 <wave_player_prepare_half_buffer+0x4c>)
 8000c20:	4618      	mov	r0, r3
 8000c22:	f003 f8e5 	bl	8003df0 <HAL_SAI_Transmit_DMA>
		wave_player_prepare_data(AUDIO_BUFFER_SIZE/2, AUDIO_BUFFER_SIZE);
 8000c26:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c2a:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000c2e:	f000 f809 	bl	8000c44 <wave_player_prepare_data>
}
 8000c32:	bf00      	nop
 8000c34:	3708      	adds	r7, #8
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	2000017c 	.word	0x2000017c
 8000c40:	20000184 	.word	0x20000184

08000c44 <wave_player_prepare_data>:

void wave_player_prepare_data(uint32_t start_address, uint32_t end_address)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b084      	sub	sp, #16
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
 8000c4c:	6039      	str	r1, [r7, #0]
	uint8_t audio_sample;

	for(int i = start_address; i < end_address; i++)
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	60fb      	str	r3, [r7, #12]
 8000c52:	e025      	b.n	8000ca0 <wave_player_prepare_data+0x5c>
	{
		audio_sample = *(wave_player.data_pointer+wave_player.byte_counter);
 8000c54:	4b16      	ldr	r3, [pc, #88]	; (8000cb0 <wave_player_prepare_data+0x6c>)
 8000c56:	685a      	ldr	r2, [r3, #4]
 8000c58:	4b15      	ldr	r3, [pc, #84]	; (8000cb0 <wave_player_prepare_data+0x6c>)
 8000c5a:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8000c5e:	4413      	add	r3, r2
 8000c60:	781b      	ldrb	r3, [r3, #0]
 8000c62:	72fb      	strb	r3, [r7, #11]

		wave_player.buffer[i] = audio_sample;
 8000c64:	4a12      	ldr	r2, [pc, #72]	; (8000cb0 <wave_player_prepare_data+0x6c>)
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	4413      	add	r3, r2
 8000c6a:	3308      	adds	r3, #8
 8000c6c:	7afa      	ldrb	r2, [r7, #11]
 8000c6e:	701a      	strb	r2, [r3, #0]
		wave_player.byte_counter++;
 8000c70:	4b0f      	ldr	r3, [pc, #60]	; (8000cb0 <wave_player_prepare_data+0x6c>)
 8000c72:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8000c76:	3301      	adds	r3, #1
 8000c78:	4a0d      	ldr	r2, [pc, #52]	; (8000cb0 <wave_player_prepare_data+0x6c>)
 8000c7a:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208

		if(wave_player.byte_counter >= wave_player.file_hdr.wave_file_hdr.data_size)
 8000c7e:	4b0c      	ldr	r3, [pc, #48]	; (8000cb0 <wave_player_prepare_data+0x6c>)
 8000c80:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8000c84:	4b0a      	ldr	r3, [pc, #40]	; (8000cb0 <wave_player_prepare_data+0x6c>)
 8000c86:	f8d3 3234 	ldr.w	r3, [r3, #564]	; 0x234
 8000c8a:	429a      	cmp	r2, r3
 8000c8c:	d305      	bcc.n	8000c9a <wave_player_prepare_data+0x56>
		{
			HAL_SAI_DMAPause(wave_player.hsai);
 8000c8e:	4b08      	ldr	r3, [pc, #32]	; (8000cb0 <wave_player_prepare_data+0x6c>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	4618      	mov	r0, r3
 8000c94:	f003 f88a 	bl	8003dac <HAL_SAI_DMAPause>
			return;
 8000c98:	e006      	b.n	8000ca8 <wave_player_prepare_data+0x64>
	for(int i = start_address; i < end_address; i++)
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	3301      	adds	r3, #1
 8000c9e:	60fb      	str	r3, [r7, #12]
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	683a      	ldr	r2, [r7, #0]
 8000ca4:	429a      	cmp	r2, r3
 8000ca6:	d8d5      	bhi.n	8000c54 <wave_player_prepare_data+0x10>
		}
	}
}
 8000ca8:	3710      	adds	r7, #16
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	2000017c 	.word	0x2000017c

08000cb4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000cb4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cec <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000cb8:	f7ff fe54 	bl	8000964 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000cbc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000cbe:	e003      	b.n	8000cc8 <LoopCopyDataInit>

08000cc0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000cc0:	4b0b      	ldr	r3, [pc, #44]	; (8000cf0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000cc2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000cc4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000cc6:	3104      	adds	r1, #4

08000cc8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000cc8:	480a      	ldr	r0, [pc, #40]	; (8000cf4 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000cca:	4b0b      	ldr	r3, [pc, #44]	; (8000cf8 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000ccc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000cce:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000cd0:	d3f6      	bcc.n	8000cc0 <CopyDataInit>
	ldr	r2, =_sbss
 8000cd2:	4a0a      	ldr	r2, [pc, #40]	; (8000cfc <LoopForever+0x12>)
	b	LoopFillZerobss
 8000cd4:	e002      	b.n	8000cdc <LoopFillZerobss>

08000cd6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000cd6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000cd8:	f842 3b04 	str.w	r3, [r2], #4

08000cdc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000cdc:	4b08      	ldr	r3, [pc, #32]	; (8000d00 <LoopForever+0x16>)
	cmp	r2, r3
 8000cde:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000ce0:	d3f9      	bcc.n	8000cd6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ce2:	f003 ff8b 	bl	8004bfc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ce6:	f7ff fc71 	bl	80005cc <main>

08000cea <LoopForever>:

LoopForever:
    b LoopForever
 8000cea:	e7fe      	b.n	8000cea <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000cec:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000cf0:	080cb78c 	.word	0x080cb78c
	ldr	r0, =_sdata
 8000cf4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000cf8:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000cfc:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000d00:	200003b8 	.word	0x200003b8

08000d04 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d04:	e7fe      	b.n	8000d04 <ADC1_2_IRQHandler>
	...

08000d08 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d12:	4b0c      	ldr	r3, [pc, #48]	; (8000d44 <HAL_Init+0x3c>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	4a0b      	ldr	r2, [pc, #44]	; (8000d44 <HAL_Init+0x3c>)
 8000d18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d1c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d1e:	2003      	movs	r0, #3
 8000d20:	f000 f93e 	bl	8000fa0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d24:	2000      	movs	r0, #0
 8000d26:	f000 f80f 	bl	8000d48 <HAL_InitTick>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d002      	beq.n	8000d36 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000d30:	2301      	movs	r3, #1
 8000d32:	71fb      	strb	r3, [r7, #7]
 8000d34:	e001      	b.n	8000d3a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d36:	f7ff fdbd 	bl	80008b4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d3a:	79fb      	ldrb	r3, [r7, #7]
}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	3708      	adds	r7, #8
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	40022000 	.word	0x40022000

08000d48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b084      	sub	sp, #16
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d50:	2300      	movs	r3, #0
 8000d52:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000d54:	4b17      	ldr	r3, [pc, #92]	; (8000db4 <HAL_InitTick+0x6c>)
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d023      	beq.n	8000da4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000d5c:	4b16      	ldr	r3, [pc, #88]	; (8000db8 <HAL_InitTick+0x70>)
 8000d5e:	681a      	ldr	r2, [r3, #0]
 8000d60:	4b14      	ldr	r3, [pc, #80]	; (8000db4 <HAL_InitTick+0x6c>)
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	4619      	mov	r1, r3
 8000d66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d72:	4618      	mov	r0, r3
 8000d74:	f000 f949 	bl	800100a <HAL_SYSTICK_Config>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d10f      	bne.n	8000d9e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	2b0f      	cmp	r3, #15
 8000d82:	d809      	bhi.n	8000d98 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d84:	2200      	movs	r2, #0
 8000d86:	6879      	ldr	r1, [r7, #4]
 8000d88:	f04f 30ff 	mov.w	r0, #4294967295
 8000d8c:	f000 f913 	bl	8000fb6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d90:	4a0a      	ldr	r2, [pc, #40]	; (8000dbc <HAL_InitTick+0x74>)
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	6013      	str	r3, [r2, #0]
 8000d96:	e007      	b.n	8000da8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000d98:	2301      	movs	r3, #1
 8000d9a:	73fb      	strb	r3, [r7, #15]
 8000d9c:	e004      	b.n	8000da8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	73fb      	strb	r3, [r7, #15]
 8000da2:	e001      	b.n	8000da8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000da4:	2301      	movs	r3, #1
 8000da6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000da8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	3710      	adds	r7, #16
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	20000008 	.word	0x20000008
 8000db8:	20000000 	.word	0x20000000
 8000dbc:	20000004 	.word	0x20000004

08000dc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000dc4:	4b06      	ldr	r3, [pc, #24]	; (8000de0 <HAL_IncTick+0x20>)
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	461a      	mov	r2, r3
 8000dca:	4b06      	ldr	r3, [pc, #24]	; (8000de4 <HAL_IncTick+0x24>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4413      	add	r3, r2
 8000dd0:	4a04      	ldr	r2, [pc, #16]	; (8000de4 <HAL_IncTick+0x24>)
 8000dd2:	6013      	str	r3, [r2, #0]
}
 8000dd4:	bf00      	nop
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop
 8000de0:	20000008 	.word	0x20000008
 8000de4:	200003b4 	.word	0x200003b4

08000de8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  return uwTick;
 8000dec:	4b03      	ldr	r3, [pc, #12]	; (8000dfc <HAL_GetTick+0x14>)
 8000dee:	681b      	ldr	r3, [r3, #0]
}
 8000df0:	4618      	mov	r0, r3
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	200003b4 	.word	0x200003b4

08000e00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b085      	sub	sp, #20
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	f003 0307 	and.w	r3, r3, #7
 8000e0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e10:	4b0c      	ldr	r3, [pc, #48]	; (8000e44 <__NVIC_SetPriorityGrouping+0x44>)
 8000e12:	68db      	ldr	r3, [r3, #12]
 8000e14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e16:	68ba      	ldr	r2, [r7, #8]
 8000e18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e24:	68bb      	ldr	r3, [r7, #8]
 8000e26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e32:	4a04      	ldr	r2, [pc, #16]	; (8000e44 <__NVIC_SetPriorityGrouping+0x44>)
 8000e34:	68bb      	ldr	r3, [r7, #8]
 8000e36:	60d3      	str	r3, [r2, #12]
}
 8000e38:	bf00      	nop
 8000e3a:	3714      	adds	r7, #20
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr
 8000e44:	e000ed00 	.word	0xe000ed00

08000e48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e4c:	4b04      	ldr	r3, [pc, #16]	; (8000e60 <__NVIC_GetPriorityGrouping+0x18>)
 8000e4e:	68db      	ldr	r3, [r3, #12]
 8000e50:	0a1b      	lsrs	r3, r3, #8
 8000e52:	f003 0307 	and.w	r3, r3, #7
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr
 8000e60:	e000ed00 	.word	0xe000ed00

08000e64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b083      	sub	sp, #12
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	db0b      	blt.n	8000e8e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e76:	79fb      	ldrb	r3, [r7, #7]
 8000e78:	f003 021f 	and.w	r2, r3, #31
 8000e7c:	4907      	ldr	r1, [pc, #28]	; (8000e9c <__NVIC_EnableIRQ+0x38>)
 8000e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e82:	095b      	lsrs	r3, r3, #5
 8000e84:	2001      	movs	r0, #1
 8000e86:	fa00 f202 	lsl.w	r2, r0, r2
 8000e8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e8e:	bf00      	nop
 8000e90:	370c      	adds	r7, #12
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	e000e100 	.word	0xe000e100

08000ea0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b083      	sub	sp, #12
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	6039      	str	r1, [r7, #0]
 8000eaa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	db0a      	blt.n	8000eca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	b2da      	uxtb	r2, r3
 8000eb8:	490c      	ldr	r1, [pc, #48]	; (8000eec <__NVIC_SetPriority+0x4c>)
 8000eba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ebe:	0112      	lsls	r2, r2, #4
 8000ec0:	b2d2      	uxtb	r2, r2
 8000ec2:	440b      	add	r3, r1
 8000ec4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ec8:	e00a      	b.n	8000ee0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	b2da      	uxtb	r2, r3
 8000ece:	4908      	ldr	r1, [pc, #32]	; (8000ef0 <__NVIC_SetPriority+0x50>)
 8000ed0:	79fb      	ldrb	r3, [r7, #7]
 8000ed2:	f003 030f 	and.w	r3, r3, #15
 8000ed6:	3b04      	subs	r3, #4
 8000ed8:	0112      	lsls	r2, r2, #4
 8000eda:	b2d2      	uxtb	r2, r2
 8000edc:	440b      	add	r3, r1
 8000ede:	761a      	strb	r2, [r3, #24]
}
 8000ee0:	bf00      	nop
 8000ee2:	370c      	adds	r7, #12
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr
 8000eec:	e000e100 	.word	0xe000e100
 8000ef0:	e000ed00 	.word	0xe000ed00

08000ef4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b089      	sub	sp, #36	; 0x24
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	60f8      	str	r0, [r7, #12]
 8000efc:	60b9      	str	r1, [r7, #8]
 8000efe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	f003 0307 	and.w	r3, r3, #7
 8000f06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f08:	69fb      	ldr	r3, [r7, #28]
 8000f0a:	f1c3 0307 	rsb	r3, r3, #7
 8000f0e:	2b04      	cmp	r3, #4
 8000f10:	bf28      	it	cs
 8000f12:	2304      	movcs	r3, #4
 8000f14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	3304      	adds	r3, #4
 8000f1a:	2b06      	cmp	r3, #6
 8000f1c:	d902      	bls.n	8000f24 <NVIC_EncodePriority+0x30>
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	3b03      	subs	r3, #3
 8000f22:	e000      	b.n	8000f26 <NVIC_EncodePriority+0x32>
 8000f24:	2300      	movs	r3, #0
 8000f26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f28:	f04f 32ff 	mov.w	r2, #4294967295
 8000f2c:	69bb      	ldr	r3, [r7, #24]
 8000f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f32:	43da      	mvns	r2, r3
 8000f34:	68bb      	ldr	r3, [r7, #8]
 8000f36:	401a      	ands	r2, r3
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f3c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	fa01 f303 	lsl.w	r3, r1, r3
 8000f46:	43d9      	mvns	r1, r3
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f4c:	4313      	orrs	r3, r2
         );
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	3724      	adds	r7, #36	; 0x24
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr
	...

08000f5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	3b01      	subs	r3, #1
 8000f68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f6c:	d301      	bcc.n	8000f72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f6e:	2301      	movs	r3, #1
 8000f70:	e00f      	b.n	8000f92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f72:	4a0a      	ldr	r2, [pc, #40]	; (8000f9c <SysTick_Config+0x40>)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	3b01      	subs	r3, #1
 8000f78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f7a:	210f      	movs	r1, #15
 8000f7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f80:	f7ff ff8e 	bl	8000ea0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f84:	4b05      	ldr	r3, [pc, #20]	; (8000f9c <SysTick_Config+0x40>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f8a:	4b04      	ldr	r3, [pc, #16]	; (8000f9c <SysTick_Config+0x40>)
 8000f8c:	2207      	movs	r2, #7
 8000f8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f90:	2300      	movs	r3, #0
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	3708      	adds	r7, #8
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	e000e010 	.word	0xe000e010

08000fa0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fa8:	6878      	ldr	r0, [r7, #4]
 8000faa:	f7ff ff29 	bl	8000e00 <__NVIC_SetPriorityGrouping>
}
 8000fae:	bf00      	nop
 8000fb0:	3708      	adds	r7, #8
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}

08000fb6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fb6:	b580      	push	{r7, lr}
 8000fb8:	b086      	sub	sp, #24
 8000fba:	af00      	add	r7, sp, #0
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	60b9      	str	r1, [r7, #8]
 8000fc0:	607a      	str	r2, [r7, #4]
 8000fc2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000fc8:	f7ff ff3e 	bl	8000e48 <__NVIC_GetPriorityGrouping>
 8000fcc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fce:	687a      	ldr	r2, [r7, #4]
 8000fd0:	68b9      	ldr	r1, [r7, #8]
 8000fd2:	6978      	ldr	r0, [r7, #20]
 8000fd4:	f7ff ff8e 	bl	8000ef4 <NVIC_EncodePriority>
 8000fd8:	4602      	mov	r2, r0
 8000fda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fde:	4611      	mov	r1, r2
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f7ff ff5d 	bl	8000ea0 <__NVIC_SetPriority>
}
 8000fe6:	bf00      	nop
 8000fe8:	3718      	adds	r7, #24
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}

08000fee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fee:	b580      	push	{r7, lr}
 8000ff0:	b082      	sub	sp, #8
 8000ff2:	af00      	add	r7, sp, #0
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ff8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f7ff ff31 	bl	8000e64 <__NVIC_EnableIRQ>
}
 8001002:	bf00      	nop
 8001004:	3708      	adds	r7, #8
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}

0800100a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800100a:	b580      	push	{r7, lr}
 800100c:	b082      	sub	sp, #8
 800100e:	af00      	add	r7, sp, #0
 8001010:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001012:	6878      	ldr	r0, [r7, #4]
 8001014:	f7ff ffa2 	bl	8000f5c <SysTick_Config>
 8001018:	4603      	mov	r3, r0
}
 800101a:	4618      	mov	r0, r3
 800101c:	3708      	adds	r7, #8
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
	...

08001024 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001024:	b480      	push	{r7}
 8001026:	b085      	sub	sp, #20
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d101      	bne.n	8001036 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001032:	2301      	movs	r3, #1
 8001034:	e098      	b.n	8001168 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	461a      	mov	r2, r3
 800103c:	4b4d      	ldr	r3, [pc, #308]	; (8001174 <HAL_DMA_Init+0x150>)
 800103e:	429a      	cmp	r2, r3
 8001040:	d80f      	bhi.n	8001062 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	461a      	mov	r2, r3
 8001048:	4b4b      	ldr	r3, [pc, #300]	; (8001178 <HAL_DMA_Init+0x154>)
 800104a:	4413      	add	r3, r2
 800104c:	4a4b      	ldr	r2, [pc, #300]	; (800117c <HAL_DMA_Init+0x158>)
 800104e:	fba2 2303 	umull	r2, r3, r2, r3
 8001052:	091b      	lsrs	r3, r3, #4
 8001054:	009a      	lsls	r2, r3, #2
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	4a48      	ldr	r2, [pc, #288]	; (8001180 <HAL_DMA_Init+0x15c>)
 800105e:	641a      	str	r2, [r3, #64]	; 0x40
 8001060:	e00e      	b.n	8001080 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	461a      	mov	r2, r3
 8001068:	4b46      	ldr	r3, [pc, #280]	; (8001184 <HAL_DMA_Init+0x160>)
 800106a:	4413      	add	r3, r2
 800106c:	4a43      	ldr	r2, [pc, #268]	; (800117c <HAL_DMA_Init+0x158>)
 800106e:	fba2 2303 	umull	r2, r3, r2, r3
 8001072:	091b      	lsrs	r3, r3, #4
 8001074:	009a      	lsls	r2, r3, #2
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	4a42      	ldr	r2, [pc, #264]	; (8001188 <HAL_DMA_Init+0x164>)
 800107e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2202      	movs	r2, #2
 8001084:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001096:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800109a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80010a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	691b      	ldr	r3, [r3, #16]
 80010aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	699b      	ldr	r3, [r3, #24]
 80010b6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010bc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6a1b      	ldr	r3, [r3, #32]
 80010c2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80010c4:	68fa      	ldr	r2, [r7, #12]
 80010c6:	4313      	orrs	r3, r2
 80010c8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	68fa      	ldr	r2, [r7, #12]
 80010d0:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	689b      	ldr	r3, [r3, #8]
 80010d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80010da:	d039      	beq.n	8001150 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e0:	4a27      	ldr	r2, [pc, #156]	; (8001180 <HAL_DMA_Init+0x15c>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d11a      	bne.n	800111c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80010e6:	4b29      	ldr	r3, [pc, #164]	; (800118c <HAL_DMA_Init+0x168>)
 80010e8:	681a      	ldr	r2, [r3, #0]
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ee:	f003 031c 	and.w	r3, r3, #28
 80010f2:	210f      	movs	r1, #15
 80010f4:	fa01 f303 	lsl.w	r3, r1, r3
 80010f8:	43db      	mvns	r3, r3
 80010fa:	4924      	ldr	r1, [pc, #144]	; (800118c <HAL_DMA_Init+0x168>)
 80010fc:	4013      	ands	r3, r2
 80010fe:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001100:	4b22      	ldr	r3, [pc, #136]	; (800118c <HAL_DMA_Init+0x168>)
 8001102:	681a      	ldr	r2, [r3, #0]
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	6859      	ldr	r1, [r3, #4]
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800110c:	f003 031c 	and.w	r3, r3, #28
 8001110:	fa01 f303 	lsl.w	r3, r1, r3
 8001114:	491d      	ldr	r1, [pc, #116]	; (800118c <HAL_DMA_Init+0x168>)
 8001116:	4313      	orrs	r3, r2
 8001118:	600b      	str	r3, [r1, #0]
 800111a:	e019      	b.n	8001150 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800111c:	4b1c      	ldr	r3, [pc, #112]	; (8001190 <HAL_DMA_Init+0x16c>)
 800111e:	681a      	ldr	r2, [r3, #0]
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001124:	f003 031c 	and.w	r3, r3, #28
 8001128:	210f      	movs	r1, #15
 800112a:	fa01 f303 	lsl.w	r3, r1, r3
 800112e:	43db      	mvns	r3, r3
 8001130:	4917      	ldr	r1, [pc, #92]	; (8001190 <HAL_DMA_Init+0x16c>)
 8001132:	4013      	ands	r3, r2
 8001134:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001136:	4b16      	ldr	r3, [pc, #88]	; (8001190 <HAL_DMA_Init+0x16c>)
 8001138:	681a      	ldr	r2, [r3, #0]
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6859      	ldr	r1, [r3, #4]
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001142:	f003 031c 	and.w	r3, r3, #28
 8001146:	fa01 f303 	lsl.w	r3, r1, r3
 800114a:	4911      	ldr	r1, [pc, #68]	; (8001190 <HAL_DMA_Init+0x16c>)
 800114c:	4313      	orrs	r3, r2
 800114e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2200      	movs	r2, #0
 8001154:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2201      	movs	r2, #1
 800115a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2200      	movs	r2, #0
 8001162:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001166:	2300      	movs	r3, #0
}
 8001168:	4618      	mov	r0, r3
 800116a:	3714      	adds	r7, #20
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr
 8001174:	40020407 	.word	0x40020407
 8001178:	bffdfff8 	.word	0xbffdfff8
 800117c:	cccccccd 	.word	0xcccccccd
 8001180:	40020000 	.word	0x40020000
 8001184:	bffdfbf8 	.word	0xbffdfbf8
 8001188:	40020400 	.word	0x40020400
 800118c:	400200a8 	.word	0x400200a8
 8001190:	400204a8 	.word	0x400204a8

08001194 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b086      	sub	sp, #24
 8001198:	af00      	add	r7, sp, #0
 800119a:	60f8      	str	r0, [r7, #12]
 800119c:	60b9      	str	r1, [r7, #8]
 800119e:	607a      	str	r2, [r7, #4]
 80011a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80011a2:	2300      	movs	r3, #0
 80011a4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80011ac:	2b01      	cmp	r3, #1
 80011ae:	d101      	bne.n	80011b4 <HAL_DMA_Start_IT+0x20>
 80011b0:	2302      	movs	r3, #2
 80011b2:	e04b      	b.n	800124c <HAL_DMA_Start_IT+0xb8>
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	2201      	movs	r2, #1
 80011b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80011c2:	b2db      	uxtb	r3, r3
 80011c4:	2b01      	cmp	r3, #1
 80011c6:	d13a      	bne.n	800123e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	2202      	movs	r2, #2
 80011cc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	2200      	movs	r2, #0
 80011d4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	681a      	ldr	r2, [r3, #0]
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f022 0201 	bic.w	r2, r2, #1
 80011e4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	687a      	ldr	r2, [r7, #4]
 80011ea:	68b9      	ldr	r1, [r7, #8]
 80011ec:	68f8      	ldr	r0, [r7, #12]
 80011ee:	f000 f8e0 	bl	80013b2 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d008      	beq.n	800120c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	681a      	ldr	r2, [r3, #0]
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f042 020e 	orr.w	r2, r2, #14
 8001208:	601a      	str	r2, [r3, #0]
 800120a:	e00f      	b.n	800122c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	681a      	ldr	r2, [r3, #0]
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f022 0204 	bic.w	r2, r2, #4
 800121a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	681a      	ldr	r2, [r3, #0]
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f042 020a 	orr.w	r2, r2, #10
 800122a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	681a      	ldr	r2, [r3, #0]
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f042 0201 	orr.w	r2, r2, #1
 800123a:	601a      	str	r2, [r3, #0]
 800123c:	e005      	b.n	800124a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	2200      	movs	r2, #0
 8001242:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001246:	2302      	movs	r3, #2
 8001248:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800124a:	7dfb      	ldrb	r3, [r7, #23]
}
 800124c:	4618      	mov	r0, r3
 800124e:	3718      	adds	r7, #24
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}

08001254 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b084      	sub	sp, #16
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001270:	f003 031c 	and.w	r3, r3, #28
 8001274:	2204      	movs	r2, #4
 8001276:	409a      	lsls	r2, r3
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	4013      	ands	r3, r2
 800127c:	2b00      	cmp	r3, #0
 800127e:	d026      	beq.n	80012ce <HAL_DMA_IRQHandler+0x7a>
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	f003 0304 	and.w	r3, r3, #4
 8001286:	2b00      	cmp	r3, #0
 8001288:	d021      	beq.n	80012ce <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f003 0320 	and.w	r3, r3, #32
 8001294:	2b00      	cmp	r3, #0
 8001296:	d107      	bne.n	80012a8 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	681a      	ldr	r2, [r3, #0]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f022 0204 	bic.w	r2, r2, #4
 80012a6:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ac:	f003 021c 	and.w	r2, r3, #28
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b4:	2104      	movs	r1, #4
 80012b6:	fa01 f202 	lsl.w	r2, r1, r2
 80012ba:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d071      	beq.n	80013a8 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c8:	6878      	ldr	r0, [r7, #4]
 80012ca:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80012cc:	e06c      	b.n	80013a8 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012d2:	f003 031c 	and.w	r3, r3, #28
 80012d6:	2202      	movs	r2, #2
 80012d8:	409a      	lsls	r2, r3
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	4013      	ands	r3, r2
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d02e      	beq.n	8001340 <HAL_DMA_IRQHandler+0xec>
 80012e2:	68bb      	ldr	r3, [r7, #8]
 80012e4:	f003 0302 	and.w	r3, r3, #2
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d029      	beq.n	8001340 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f003 0320 	and.w	r3, r3, #32
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d10b      	bne.n	8001312 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f022 020a 	bic.w	r2, r2, #10
 8001308:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2201      	movs	r2, #1
 800130e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001316:	f003 021c 	and.w	r2, r3, #28
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131e:	2102      	movs	r1, #2
 8001320:	fa01 f202 	lsl.w	r2, r1, r2
 8001324:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2200      	movs	r2, #0
 800132a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001332:	2b00      	cmp	r3, #0
 8001334:	d038      	beq.n	80013a8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800133a:	6878      	ldr	r0, [r7, #4]
 800133c:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800133e:	e033      	b.n	80013a8 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001344:	f003 031c 	and.w	r3, r3, #28
 8001348:	2208      	movs	r2, #8
 800134a:	409a      	lsls	r2, r3
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	4013      	ands	r3, r2
 8001350:	2b00      	cmp	r3, #0
 8001352:	d02a      	beq.n	80013aa <HAL_DMA_IRQHandler+0x156>
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	f003 0308 	and.w	r3, r3, #8
 800135a:	2b00      	cmp	r3, #0
 800135c:	d025      	beq.n	80013aa <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f022 020e 	bic.w	r2, r2, #14
 800136c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001372:	f003 021c 	and.w	r2, r3, #28
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137a:	2101      	movs	r1, #1
 800137c:	fa01 f202 	lsl.w	r2, r1, r2
 8001380:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2201      	movs	r2, #1
 8001386:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2201      	movs	r2, #1
 800138c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2200      	movs	r2, #0
 8001394:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800139c:	2b00      	cmp	r3, #0
 800139e:	d004      	beq.n	80013aa <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013a4:	6878      	ldr	r0, [r7, #4]
 80013a6:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80013a8:	bf00      	nop
 80013aa:	bf00      	nop
}
 80013ac:	3710      	adds	r7, #16
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}

080013b2 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80013b2:	b480      	push	{r7}
 80013b4:	b085      	sub	sp, #20
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	60f8      	str	r0, [r7, #12]
 80013ba:	60b9      	str	r1, [r7, #8]
 80013bc:	607a      	str	r2, [r7, #4]
 80013be:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013c4:	f003 021c 	and.w	r2, r3, #28
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013cc:	2101      	movs	r1, #1
 80013ce:	fa01 f202 	lsl.w	r2, r1, r2
 80013d2:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	683a      	ldr	r2, [r7, #0]
 80013da:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	689b      	ldr	r3, [r3, #8]
 80013e0:	2b10      	cmp	r3, #16
 80013e2:	d108      	bne.n	80013f6 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	687a      	ldr	r2, [r7, #4]
 80013ea:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	68ba      	ldr	r2, [r7, #8]
 80013f2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80013f4:	e007      	b.n	8001406 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	68ba      	ldr	r2, [r7, #8]
 80013fc:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	687a      	ldr	r2, [r7, #4]
 8001404:	60da      	str	r2, [r3, #12]
}
 8001406:	bf00      	nop
 8001408:	3714      	adds	r7, #20
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
	...

08001414 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001414:	b480      	push	{r7}
 8001416:	b087      	sub	sp, #28
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
 800141c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800141e:	2300      	movs	r3, #0
 8001420:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001422:	e17f      	b.n	8001724 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	2101      	movs	r1, #1
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	fa01 f303 	lsl.w	r3, r1, r3
 8001430:	4013      	ands	r3, r2
 8001432:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	2b00      	cmp	r3, #0
 8001438:	f000 8171 	beq.w	800171e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	2b01      	cmp	r3, #1
 8001442:	d00b      	beq.n	800145c <HAL_GPIO_Init+0x48>
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	2b02      	cmp	r3, #2
 800144a:	d007      	beq.n	800145c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001450:	2b11      	cmp	r3, #17
 8001452:	d003      	beq.n	800145c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	2b12      	cmp	r3, #18
 800145a:	d130      	bne.n	80014be <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	689b      	ldr	r3, [r3, #8]
 8001460:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	005b      	lsls	r3, r3, #1
 8001466:	2203      	movs	r2, #3
 8001468:	fa02 f303 	lsl.w	r3, r2, r3
 800146c:	43db      	mvns	r3, r3
 800146e:	693a      	ldr	r2, [r7, #16]
 8001470:	4013      	ands	r3, r2
 8001472:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	68da      	ldr	r2, [r3, #12]
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	005b      	lsls	r3, r3, #1
 800147c:	fa02 f303 	lsl.w	r3, r2, r3
 8001480:	693a      	ldr	r2, [r7, #16]
 8001482:	4313      	orrs	r3, r2
 8001484:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	693a      	ldr	r2, [r7, #16]
 800148a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001492:	2201      	movs	r2, #1
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	fa02 f303 	lsl.w	r3, r2, r3
 800149a:	43db      	mvns	r3, r3
 800149c:	693a      	ldr	r2, [r7, #16]
 800149e:	4013      	ands	r3, r2
 80014a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	091b      	lsrs	r3, r3, #4
 80014a8:	f003 0201 	and.w	r2, r3, #1
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	fa02 f303 	lsl.w	r3, r2, r3
 80014b2:	693a      	ldr	r2, [r7, #16]
 80014b4:	4313      	orrs	r3, r2
 80014b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	693a      	ldr	r2, [r7, #16]
 80014bc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	f003 0303 	and.w	r3, r3, #3
 80014c6:	2b03      	cmp	r3, #3
 80014c8:	d118      	bne.n	80014fc <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014ce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80014d0:	2201      	movs	r2, #1
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	fa02 f303 	lsl.w	r3, r2, r3
 80014d8:	43db      	mvns	r3, r3
 80014da:	693a      	ldr	r2, [r7, #16]
 80014dc:	4013      	ands	r3, r2
 80014de:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	08db      	lsrs	r3, r3, #3
 80014e6:	f003 0201 	and.w	r2, r3, #1
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	fa02 f303 	lsl.w	r3, r2, r3
 80014f0:	693a      	ldr	r2, [r7, #16]
 80014f2:	4313      	orrs	r3, r2
 80014f4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	693a      	ldr	r2, [r7, #16]
 80014fa:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	68db      	ldr	r3, [r3, #12]
 8001500:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	005b      	lsls	r3, r3, #1
 8001506:	2203      	movs	r2, #3
 8001508:	fa02 f303 	lsl.w	r3, r2, r3
 800150c:	43db      	mvns	r3, r3
 800150e:	693a      	ldr	r2, [r7, #16]
 8001510:	4013      	ands	r3, r2
 8001512:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	689a      	ldr	r2, [r3, #8]
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	005b      	lsls	r3, r3, #1
 800151c:	fa02 f303 	lsl.w	r3, r2, r3
 8001520:	693a      	ldr	r2, [r7, #16]
 8001522:	4313      	orrs	r3, r2
 8001524:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	693a      	ldr	r2, [r7, #16]
 800152a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	2b02      	cmp	r3, #2
 8001532:	d003      	beq.n	800153c <HAL_GPIO_Init+0x128>
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	2b12      	cmp	r3, #18
 800153a:	d123      	bne.n	8001584 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	08da      	lsrs	r2, r3, #3
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	3208      	adds	r2, #8
 8001544:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001548:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	f003 0307 	and.w	r3, r3, #7
 8001550:	009b      	lsls	r3, r3, #2
 8001552:	220f      	movs	r2, #15
 8001554:	fa02 f303 	lsl.w	r3, r2, r3
 8001558:	43db      	mvns	r3, r3
 800155a:	693a      	ldr	r2, [r7, #16]
 800155c:	4013      	ands	r3, r2
 800155e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	691a      	ldr	r2, [r3, #16]
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	f003 0307 	and.w	r3, r3, #7
 800156a:	009b      	lsls	r3, r3, #2
 800156c:	fa02 f303 	lsl.w	r3, r2, r3
 8001570:	693a      	ldr	r2, [r7, #16]
 8001572:	4313      	orrs	r3, r2
 8001574:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	08da      	lsrs	r2, r3, #3
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	3208      	adds	r2, #8
 800157e:	6939      	ldr	r1, [r7, #16]
 8001580:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	005b      	lsls	r3, r3, #1
 800158e:	2203      	movs	r2, #3
 8001590:	fa02 f303 	lsl.w	r3, r2, r3
 8001594:	43db      	mvns	r3, r3
 8001596:	693a      	ldr	r2, [r7, #16]
 8001598:	4013      	ands	r3, r2
 800159a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	f003 0203 	and.w	r2, r3, #3
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	005b      	lsls	r3, r3, #1
 80015a8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ac:	693a      	ldr	r2, [r7, #16]
 80015ae:	4313      	orrs	r3, r2
 80015b0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	693a      	ldr	r2, [r7, #16]
 80015b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	f000 80ac 	beq.w	800171e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015c6:	4b5f      	ldr	r3, [pc, #380]	; (8001744 <HAL_GPIO_Init+0x330>)
 80015c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015ca:	4a5e      	ldr	r2, [pc, #376]	; (8001744 <HAL_GPIO_Init+0x330>)
 80015cc:	f043 0301 	orr.w	r3, r3, #1
 80015d0:	6613      	str	r3, [r2, #96]	; 0x60
 80015d2:	4b5c      	ldr	r3, [pc, #368]	; (8001744 <HAL_GPIO_Init+0x330>)
 80015d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015d6:	f003 0301 	and.w	r3, r3, #1
 80015da:	60bb      	str	r3, [r7, #8]
 80015dc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80015de:	4a5a      	ldr	r2, [pc, #360]	; (8001748 <HAL_GPIO_Init+0x334>)
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	089b      	lsrs	r3, r3, #2
 80015e4:	3302      	adds	r3, #2
 80015e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015ea:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	f003 0303 	and.w	r3, r3, #3
 80015f2:	009b      	lsls	r3, r3, #2
 80015f4:	220f      	movs	r2, #15
 80015f6:	fa02 f303 	lsl.w	r3, r2, r3
 80015fa:	43db      	mvns	r3, r3
 80015fc:	693a      	ldr	r2, [r7, #16]
 80015fe:	4013      	ands	r3, r2
 8001600:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001608:	d025      	beq.n	8001656 <HAL_GPIO_Init+0x242>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	4a4f      	ldr	r2, [pc, #316]	; (800174c <HAL_GPIO_Init+0x338>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d01f      	beq.n	8001652 <HAL_GPIO_Init+0x23e>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	4a4e      	ldr	r2, [pc, #312]	; (8001750 <HAL_GPIO_Init+0x33c>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d019      	beq.n	800164e <HAL_GPIO_Init+0x23a>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	4a4d      	ldr	r2, [pc, #308]	; (8001754 <HAL_GPIO_Init+0x340>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d013      	beq.n	800164a <HAL_GPIO_Init+0x236>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	4a4c      	ldr	r2, [pc, #304]	; (8001758 <HAL_GPIO_Init+0x344>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d00d      	beq.n	8001646 <HAL_GPIO_Init+0x232>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	4a4b      	ldr	r2, [pc, #300]	; (800175c <HAL_GPIO_Init+0x348>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d007      	beq.n	8001642 <HAL_GPIO_Init+0x22e>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	4a4a      	ldr	r2, [pc, #296]	; (8001760 <HAL_GPIO_Init+0x34c>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d101      	bne.n	800163e <HAL_GPIO_Init+0x22a>
 800163a:	2306      	movs	r3, #6
 800163c:	e00c      	b.n	8001658 <HAL_GPIO_Init+0x244>
 800163e:	2307      	movs	r3, #7
 8001640:	e00a      	b.n	8001658 <HAL_GPIO_Init+0x244>
 8001642:	2305      	movs	r3, #5
 8001644:	e008      	b.n	8001658 <HAL_GPIO_Init+0x244>
 8001646:	2304      	movs	r3, #4
 8001648:	e006      	b.n	8001658 <HAL_GPIO_Init+0x244>
 800164a:	2303      	movs	r3, #3
 800164c:	e004      	b.n	8001658 <HAL_GPIO_Init+0x244>
 800164e:	2302      	movs	r3, #2
 8001650:	e002      	b.n	8001658 <HAL_GPIO_Init+0x244>
 8001652:	2301      	movs	r3, #1
 8001654:	e000      	b.n	8001658 <HAL_GPIO_Init+0x244>
 8001656:	2300      	movs	r3, #0
 8001658:	697a      	ldr	r2, [r7, #20]
 800165a:	f002 0203 	and.w	r2, r2, #3
 800165e:	0092      	lsls	r2, r2, #2
 8001660:	4093      	lsls	r3, r2
 8001662:	693a      	ldr	r2, [r7, #16]
 8001664:	4313      	orrs	r3, r2
 8001666:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001668:	4937      	ldr	r1, [pc, #220]	; (8001748 <HAL_GPIO_Init+0x334>)
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	089b      	lsrs	r3, r3, #2
 800166e:	3302      	adds	r3, #2
 8001670:	693a      	ldr	r2, [r7, #16]
 8001672:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001676:	4b3b      	ldr	r3, [pc, #236]	; (8001764 <HAL_GPIO_Init+0x350>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	43db      	mvns	r3, r3
 8001680:	693a      	ldr	r2, [r7, #16]
 8001682:	4013      	ands	r3, r2
 8001684:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800168e:	2b00      	cmp	r3, #0
 8001690:	d003      	beq.n	800169a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001692:	693a      	ldr	r2, [r7, #16]
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	4313      	orrs	r3, r2
 8001698:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800169a:	4a32      	ldr	r2, [pc, #200]	; (8001764 <HAL_GPIO_Init+0x350>)
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80016a0:	4b30      	ldr	r3, [pc, #192]	; (8001764 <HAL_GPIO_Init+0x350>)
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	43db      	mvns	r3, r3
 80016aa:	693a      	ldr	r2, [r7, #16]
 80016ac:	4013      	ands	r3, r2
 80016ae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d003      	beq.n	80016c4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80016bc:	693a      	ldr	r2, [r7, #16]
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	4313      	orrs	r3, r2
 80016c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80016c4:	4a27      	ldr	r2, [pc, #156]	; (8001764 <HAL_GPIO_Init+0x350>)
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80016ca:	4b26      	ldr	r3, [pc, #152]	; (8001764 <HAL_GPIO_Init+0x350>)
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	43db      	mvns	r3, r3
 80016d4:	693a      	ldr	r2, [r7, #16]
 80016d6:	4013      	ands	r3, r2
 80016d8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d003      	beq.n	80016ee <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80016e6:	693a      	ldr	r2, [r7, #16]
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	4313      	orrs	r3, r2
 80016ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80016ee:	4a1d      	ldr	r2, [pc, #116]	; (8001764 <HAL_GPIO_Init+0x350>)
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80016f4:	4b1b      	ldr	r3, [pc, #108]	; (8001764 <HAL_GPIO_Init+0x350>)
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	43db      	mvns	r3, r3
 80016fe:	693a      	ldr	r2, [r7, #16]
 8001700:	4013      	ands	r3, r2
 8001702:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800170c:	2b00      	cmp	r3, #0
 800170e:	d003      	beq.n	8001718 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001710:	693a      	ldr	r2, [r7, #16]
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	4313      	orrs	r3, r2
 8001716:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001718:	4a12      	ldr	r2, [pc, #72]	; (8001764 <HAL_GPIO_Init+0x350>)
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	3301      	adds	r3, #1
 8001722:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	fa22 f303 	lsr.w	r3, r2, r3
 800172e:	2b00      	cmp	r3, #0
 8001730:	f47f ae78 	bne.w	8001424 <HAL_GPIO_Init+0x10>
  }
}
 8001734:	bf00      	nop
 8001736:	bf00      	nop
 8001738:	371c      	adds	r7, #28
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop
 8001744:	40021000 	.word	0x40021000
 8001748:	40010000 	.word	0x40010000
 800174c:	48000400 	.word	0x48000400
 8001750:	48000800 	.word	0x48000800
 8001754:	48000c00 	.word	0x48000c00
 8001758:	48001000 	.word	0x48001000
 800175c:	48001400 	.word	0x48001400
 8001760:	48001800 	.word	0x48001800
 8001764:	40010400 	.word	0x40010400

08001768 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001768:	b480      	push	{r7}
 800176a:	b083      	sub	sp, #12
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	460b      	mov	r3, r1
 8001772:	807b      	strh	r3, [r7, #2]
 8001774:	4613      	mov	r3, r2
 8001776:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001778:	787b      	ldrb	r3, [r7, #1]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d003      	beq.n	8001786 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800177e:	887a      	ldrh	r2, [r7, #2]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001784:	e002      	b.n	800178c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001786:	887a      	ldrh	r2, [r7, #2]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800178c:	bf00      	nop
 800178e:	370c      	adds	r7, #12
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr

08001798 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800179c:	4b04      	ldr	r3, [pc, #16]	; (80017b0 <HAL_PWREx_GetVoltageRange+0x18>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop
 80017b0:	40007000 	.word	0x40007000

080017b4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b085      	sub	sp, #20
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80017c2:	d130      	bne.n	8001826 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80017c4:	4b23      	ldr	r3, [pc, #140]	; (8001854 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80017cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80017d0:	d038      	beq.n	8001844 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80017d2:	4b20      	ldr	r3, [pc, #128]	; (8001854 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80017da:	4a1e      	ldr	r2, [pc, #120]	; (8001854 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017dc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017e0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80017e2:	4b1d      	ldr	r3, [pc, #116]	; (8001858 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	2232      	movs	r2, #50	; 0x32
 80017e8:	fb02 f303 	mul.w	r3, r2, r3
 80017ec:	4a1b      	ldr	r2, [pc, #108]	; (800185c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80017ee:	fba2 2303 	umull	r2, r3, r2, r3
 80017f2:	0c9b      	lsrs	r3, r3, #18
 80017f4:	3301      	adds	r3, #1
 80017f6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80017f8:	e002      	b.n	8001800 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	3b01      	subs	r3, #1
 80017fe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001800:	4b14      	ldr	r3, [pc, #80]	; (8001854 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001802:	695b      	ldr	r3, [r3, #20]
 8001804:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001808:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800180c:	d102      	bne.n	8001814 <HAL_PWREx_ControlVoltageScaling+0x60>
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d1f2      	bne.n	80017fa <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001814:	4b0f      	ldr	r3, [pc, #60]	; (8001854 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001816:	695b      	ldr	r3, [r3, #20]
 8001818:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800181c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001820:	d110      	bne.n	8001844 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001822:	2303      	movs	r3, #3
 8001824:	e00f      	b.n	8001846 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001826:	4b0b      	ldr	r3, [pc, #44]	; (8001854 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800182e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001832:	d007      	beq.n	8001844 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001834:	4b07      	ldr	r3, [pc, #28]	; (8001854 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800183c:	4a05      	ldr	r2, [pc, #20]	; (8001854 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800183e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001842:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001844:	2300      	movs	r3, #0
}
 8001846:	4618      	mov	r0, r3
 8001848:	3714      	adds	r7, #20
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
 8001854:	40007000 	.word	0x40007000
 8001858:	20000000 	.word	0x20000000
 800185c:	431bde83 	.word	0x431bde83

08001860 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b088      	sub	sp, #32
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d101      	bne.n	8001872 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	e3d4      	b.n	800201c <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001872:	4ba1      	ldr	r3, [pc, #644]	; (8001af8 <HAL_RCC_OscConfig+0x298>)
 8001874:	689b      	ldr	r3, [r3, #8]
 8001876:	f003 030c 	and.w	r3, r3, #12
 800187a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800187c:	4b9e      	ldr	r3, [pc, #632]	; (8001af8 <HAL_RCC_OscConfig+0x298>)
 800187e:	68db      	ldr	r3, [r3, #12]
 8001880:	f003 0303 	and.w	r3, r3, #3
 8001884:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f003 0310 	and.w	r3, r3, #16
 800188e:	2b00      	cmp	r3, #0
 8001890:	f000 80e4 	beq.w	8001a5c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001894:	69bb      	ldr	r3, [r7, #24]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d007      	beq.n	80018aa <HAL_RCC_OscConfig+0x4a>
 800189a:	69bb      	ldr	r3, [r7, #24]
 800189c:	2b0c      	cmp	r3, #12
 800189e:	f040 808b 	bne.w	80019b8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	2b01      	cmp	r3, #1
 80018a6:	f040 8087 	bne.w	80019b8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80018aa:	4b93      	ldr	r3, [pc, #588]	; (8001af8 <HAL_RCC_OscConfig+0x298>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 0302 	and.w	r3, r3, #2
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d005      	beq.n	80018c2 <HAL_RCC_OscConfig+0x62>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	699b      	ldr	r3, [r3, #24]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d101      	bne.n	80018c2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80018be:	2301      	movs	r3, #1
 80018c0:	e3ac      	b.n	800201c <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6a1a      	ldr	r2, [r3, #32]
 80018c6:	4b8c      	ldr	r3, [pc, #560]	; (8001af8 <HAL_RCC_OscConfig+0x298>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f003 0308 	and.w	r3, r3, #8
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d004      	beq.n	80018dc <HAL_RCC_OscConfig+0x7c>
 80018d2:	4b89      	ldr	r3, [pc, #548]	; (8001af8 <HAL_RCC_OscConfig+0x298>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80018da:	e005      	b.n	80018e8 <HAL_RCC_OscConfig+0x88>
 80018dc:	4b86      	ldr	r3, [pc, #536]	; (8001af8 <HAL_RCC_OscConfig+0x298>)
 80018de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018e2:	091b      	lsrs	r3, r3, #4
 80018e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d223      	bcs.n	8001934 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6a1b      	ldr	r3, [r3, #32]
 80018f0:	4618      	mov	r0, r3
 80018f2:	f000 fd41 	bl	8002378 <RCC_SetFlashLatencyFromMSIRange>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d001      	beq.n	8001900 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80018fc:	2301      	movs	r3, #1
 80018fe:	e38d      	b.n	800201c <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001900:	4b7d      	ldr	r3, [pc, #500]	; (8001af8 <HAL_RCC_OscConfig+0x298>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a7c      	ldr	r2, [pc, #496]	; (8001af8 <HAL_RCC_OscConfig+0x298>)
 8001906:	f043 0308 	orr.w	r3, r3, #8
 800190a:	6013      	str	r3, [r2, #0]
 800190c:	4b7a      	ldr	r3, [pc, #488]	; (8001af8 <HAL_RCC_OscConfig+0x298>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6a1b      	ldr	r3, [r3, #32]
 8001918:	4977      	ldr	r1, [pc, #476]	; (8001af8 <HAL_RCC_OscConfig+0x298>)
 800191a:	4313      	orrs	r3, r2
 800191c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800191e:	4b76      	ldr	r3, [pc, #472]	; (8001af8 <HAL_RCC_OscConfig+0x298>)
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	69db      	ldr	r3, [r3, #28]
 800192a:	021b      	lsls	r3, r3, #8
 800192c:	4972      	ldr	r1, [pc, #456]	; (8001af8 <HAL_RCC_OscConfig+0x298>)
 800192e:	4313      	orrs	r3, r2
 8001930:	604b      	str	r3, [r1, #4]
 8001932:	e025      	b.n	8001980 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001934:	4b70      	ldr	r3, [pc, #448]	; (8001af8 <HAL_RCC_OscConfig+0x298>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a6f      	ldr	r2, [pc, #444]	; (8001af8 <HAL_RCC_OscConfig+0x298>)
 800193a:	f043 0308 	orr.w	r3, r3, #8
 800193e:	6013      	str	r3, [r2, #0]
 8001940:	4b6d      	ldr	r3, [pc, #436]	; (8001af8 <HAL_RCC_OscConfig+0x298>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6a1b      	ldr	r3, [r3, #32]
 800194c:	496a      	ldr	r1, [pc, #424]	; (8001af8 <HAL_RCC_OscConfig+0x298>)
 800194e:	4313      	orrs	r3, r2
 8001950:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001952:	4b69      	ldr	r3, [pc, #420]	; (8001af8 <HAL_RCC_OscConfig+0x298>)
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	69db      	ldr	r3, [r3, #28]
 800195e:	021b      	lsls	r3, r3, #8
 8001960:	4965      	ldr	r1, [pc, #404]	; (8001af8 <HAL_RCC_OscConfig+0x298>)
 8001962:	4313      	orrs	r3, r2
 8001964:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001966:	69bb      	ldr	r3, [r7, #24]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d109      	bne.n	8001980 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6a1b      	ldr	r3, [r3, #32]
 8001970:	4618      	mov	r0, r3
 8001972:	f000 fd01 	bl	8002378 <RCC_SetFlashLatencyFromMSIRange>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d001      	beq.n	8001980 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800197c:	2301      	movs	r3, #1
 800197e:	e34d      	b.n	800201c <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001980:	f000 fc36 	bl	80021f0 <HAL_RCC_GetSysClockFreq>
 8001984:	4602      	mov	r2, r0
 8001986:	4b5c      	ldr	r3, [pc, #368]	; (8001af8 <HAL_RCC_OscConfig+0x298>)
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	091b      	lsrs	r3, r3, #4
 800198c:	f003 030f 	and.w	r3, r3, #15
 8001990:	495a      	ldr	r1, [pc, #360]	; (8001afc <HAL_RCC_OscConfig+0x29c>)
 8001992:	5ccb      	ldrb	r3, [r1, r3]
 8001994:	f003 031f 	and.w	r3, r3, #31
 8001998:	fa22 f303 	lsr.w	r3, r2, r3
 800199c:	4a58      	ldr	r2, [pc, #352]	; (8001b00 <HAL_RCC_OscConfig+0x2a0>)
 800199e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80019a0:	4b58      	ldr	r3, [pc, #352]	; (8001b04 <HAL_RCC_OscConfig+0x2a4>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4618      	mov	r0, r3
 80019a6:	f7ff f9cf 	bl	8000d48 <HAL_InitTick>
 80019aa:	4603      	mov	r3, r0
 80019ac:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80019ae:	7bfb      	ldrb	r3, [r7, #15]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d052      	beq.n	8001a5a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80019b4:	7bfb      	ldrb	r3, [r7, #15]
 80019b6:	e331      	b.n	800201c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	699b      	ldr	r3, [r3, #24]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d032      	beq.n	8001a26 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80019c0:	4b4d      	ldr	r3, [pc, #308]	; (8001af8 <HAL_RCC_OscConfig+0x298>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a4c      	ldr	r2, [pc, #304]	; (8001af8 <HAL_RCC_OscConfig+0x298>)
 80019c6:	f043 0301 	orr.w	r3, r3, #1
 80019ca:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80019cc:	f7ff fa0c 	bl	8000de8 <HAL_GetTick>
 80019d0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80019d2:	e008      	b.n	80019e6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80019d4:	f7ff fa08 	bl	8000de8 <HAL_GetTick>
 80019d8:	4602      	mov	r2, r0
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	2b02      	cmp	r3, #2
 80019e0:	d901      	bls.n	80019e6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80019e2:	2303      	movs	r3, #3
 80019e4:	e31a      	b.n	800201c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80019e6:	4b44      	ldr	r3, [pc, #272]	; (8001af8 <HAL_RCC_OscConfig+0x298>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 0302 	and.w	r3, r3, #2
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d0f0      	beq.n	80019d4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019f2:	4b41      	ldr	r3, [pc, #260]	; (8001af8 <HAL_RCC_OscConfig+0x298>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a40      	ldr	r2, [pc, #256]	; (8001af8 <HAL_RCC_OscConfig+0x298>)
 80019f8:	f043 0308 	orr.w	r3, r3, #8
 80019fc:	6013      	str	r3, [r2, #0]
 80019fe:	4b3e      	ldr	r3, [pc, #248]	; (8001af8 <HAL_RCC_OscConfig+0x298>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6a1b      	ldr	r3, [r3, #32]
 8001a0a:	493b      	ldr	r1, [pc, #236]	; (8001af8 <HAL_RCC_OscConfig+0x298>)
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a10:	4b39      	ldr	r3, [pc, #228]	; (8001af8 <HAL_RCC_OscConfig+0x298>)
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	69db      	ldr	r3, [r3, #28]
 8001a1c:	021b      	lsls	r3, r3, #8
 8001a1e:	4936      	ldr	r1, [pc, #216]	; (8001af8 <HAL_RCC_OscConfig+0x298>)
 8001a20:	4313      	orrs	r3, r2
 8001a22:	604b      	str	r3, [r1, #4]
 8001a24:	e01a      	b.n	8001a5c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001a26:	4b34      	ldr	r3, [pc, #208]	; (8001af8 <HAL_RCC_OscConfig+0x298>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4a33      	ldr	r2, [pc, #204]	; (8001af8 <HAL_RCC_OscConfig+0x298>)
 8001a2c:	f023 0301 	bic.w	r3, r3, #1
 8001a30:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001a32:	f7ff f9d9 	bl	8000de8 <HAL_GetTick>
 8001a36:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001a38:	e008      	b.n	8001a4c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a3a:	f7ff f9d5 	bl	8000de8 <HAL_GetTick>
 8001a3e:	4602      	mov	r2, r0
 8001a40:	693b      	ldr	r3, [r7, #16]
 8001a42:	1ad3      	subs	r3, r2, r3
 8001a44:	2b02      	cmp	r3, #2
 8001a46:	d901      	bls.n	8001a4c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001a48:	2303      	movs	r3, #3
 8001a4a:	e2e7      	b.n	800201c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001a4c:	4b2a      	ldr	r3, [pc, #168]	; (8001af8 <HAL_RCC_OscConfig+0x298>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f003 0302 	and.w	r3, r3, #2
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d1f0      	bne.n	8001a3a <HAL_RCC_OscConfig+0x1da>
 8001a58:	e000      	b.n	8001a5c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001a5a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f003 0301 	and.w	r3, r3, #1
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d074      	beq.n	8001b52 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001a68:	69bb      	ldr	r3, [r7, #24]
 8001a6a:	2b08      	cmp	r3, #8
 8001a6c:	d005      	beq.n	8001a7a <HAL_RCC_OscConfig+0x21a>
 8001a6e:	69bb      	ldr	r3, [r7, #24]
 8001a70:	2b0c      	cmp	r3, #12
 8001a72:	d10e      	bne.n	8001a92 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	2b03      	cmp	r3, #3
 8001a78:	d10b      	bne.n	8001a92 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a7a:	4b1f      	ldr	r3, [pc, #124]	; (8001af8 <HAL_RCC_OscConfig+0x298>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d064      	beq.n	8001b50 <HAL_RCC_OscConfig+0x2f0>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d160      	bne.n	8001b50 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e2c4      	b.n	800201c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a9a:	d106      	bne.n	8001aaa <HAL_RCC_OscConfig+0x24a>
 8001a9c:	4b16      	ldr	r3, [pc, #88]	; (8001af8 <HAL_RCC_OscConfig+0x298>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a15      	ldr	r2, [pc, #84]	; (8001af8 <HAL_RCC_OscConfig+0x298>)
 8001aa2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001aa6:	6013      	str	r3, [r2, #0]
 8001aa8:	e01d      	b.n	8001ae6 <HAL_RCC_OscConfig+0x286>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ab2:	d10c      	bne.n	8001ace <HAL_RCC_OscConfig+0x26e>
 8001ab4:	4b10      	ldr	r3, [pc, #64]	; (8001af8 <HAL_RCC_OscConfig+0x298>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a0f      	ldr	r2, [pc, #60]	; (8001af8 <HAL_RCC_OscConfig+0x298>)
 8001aba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001abe:	6013      	str	r3, [r2, #0]
 8001ac0:	4b0d      	ldr	r3, [pc, #52]	; (8001af8 <HAL_RCC_OscConfig+0x298>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a0c      	ldr	r2, [pc, #48]	; (8001af8 <HAL_RCC_OscConfig+0x298>)
 8001ac6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001aca:	6013      	str	r3, [r2, #0]
 8001acc:	e00b      	b.n	8001ae6 <HAL_RCC_OscConfig+0x286>
 8001ace:	4b0a      	ldr	r3, [pc, #40]	; (8001af8 <HAL_RCC_OscConfig+0x298>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a09      	ldr	r2, [pc, #36]	; (8001af8 <HAL_RCC_OscConfig+0x298>)
 8001ad4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ad8:	6013      	str	r3, [r2, #0]
 8001ada:	4b07      	ldr	r3, [pc, #28]	; (8001af8 <HAL_RCC_OscConfig+0x298>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a06      	ldr	r2, [pc, #24]	; (8001af8 <HAL_RCC_OscConfig+0x298>)
 8001ae0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ae4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d01c      	beq.n	8001b28 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aee:	f7ff f97b 	bl	8000de8 <HAL_GetTick>
 8001af2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001af4:	e011      	b.n	8001b1a <HAL_RCC_OscConfig+0x2ba>
 8001af6:	bf00      	nop
 8001af8:	40021000 	.word	0x40021000
 8001afc:	08004c6c 	.word	0x08004c6c
 8001b00:	20000000 	.word	0x20000000
 8001b04:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b08:	f7ff f96e 	bl	8000de8 <HAL_GetTick>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	2b64      	cmp	r3, #100	; 0x64
 8001b14:	d901      	bls.n	8001b1a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001b16:	2303      	movs	r3, #3
 8001b18:	e280      	b.n	800201c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b1a:	4baf      	ldr	r3, [pc, #700]	; (8001dd8 <HAL_RCC_OscConfig+0x578>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d0f0      	beq.n	8001b08 <HAL_RCC_OscConfig+0x2a8>
 8001b26:	e014      	b.n	8001b52 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b28:	f7ff f95e 	bl	8000de8 <HAL_GetTick>
 8001b2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b2e:	e008      	b.n	8001b42 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b30:	f7ff f95a 	bl	8000de8 <HAL_GetTick>
 8001b34:	4602      	mov	r2, r0
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	1ad3      	subs	r3, r2, r3
 8001b3a:	2b64      	cmp	r3, #100	; 0x64
 8001b3c:	d901      	bls.n	8001b42 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001b3e:	2303      	movs	r3, #3
 8001b40:	e26c      	b.n	800201c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b42:	4ba5      	ldr	r3, [pc, #660]	; (8001dd8 <HAL_RCC_OscConfig+0x578>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d1f0      	bne.n	8001b30 <HAL_RCC_OscConfig+0x2d0>
 8001b4e:	e000      	b.n	8001b52 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f003 0302 	and.w	r3, r3, #2
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d060      	beq.n	8001c20 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001b5e:	69bb      	ldr	r3, [r7, #24]
 8001b60:	2b04      	cmp	r3, #4
 8001b62:	d005      	beq.n	8001b70 <HAL_RCC_OscConfig+0x310>
 8001b64:	69bb      	ldr	r3, [r7, #24]
 8001b66:	2b0c      	cmp	r3, #12
 8001b68:	d119      	bne.n	8001b9e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	2b02      	cmp	r3, #2
 8001b6e:	d116      	bne.n	8001b9e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b70:	4b99      	ldr	r3, [pc, #612]	; (8001dd8 <HAL_RCC_OscConfig+0x578>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d005      	beq.n	8001b88 <HAL_RCC_OscConfig+0x328>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	68db      	ldr	r3, [r3, #12]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d101      	bne.n	8001b88 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
 8001b86:	e249      	b.n	800201c <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b88:	4b93      	ldr	r3, [pc, #588]	; (8001dd8 <HAL_RCC_OscConfig+0x578>)
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	691b      	ldr	r3, [r3, #16]
 8001b94:	061b      	lsls	r3, r3, #24
 8001b96:	4990      	ldr	r1, [pc, #576]	; (8001dd8 <HAL_RCC_OscConfig+0x578>)
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b9c:	e040      	b.n	8001c20 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	68db      	ldr	r3, [r3, #12]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d023      	beq.n	8001bee <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ba6:	4b8c      	ldr	r3, [pc, #560]	; (8001dd8 <HAL_RCC_OscConfig+0x578>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a8b      	ldr	r2, [pc, #556]	; (8001dd8 <HAL_RCC_OscConfig+0x578>)
 8001bac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bb0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bb2:	f7ff f919 	bl	8000de8 <HAL_GetTick>
 8001bb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bb8:	e008      	b.n	8001bcc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bba:	f7ff f915 	bl	8000de8 <HAL_GetTick>
 8001bbe:	4602      	mov	r2, r0
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	1ad3      	subs	r3, r2, r3
 8001bc4:	2b02      	cmp	r3, #2
 8001bc6:	d901      	bls.n	8001bcc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001bc8:	2303      	movs	r3, #3
 8001bca:	e227      	b.n	800201c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bcc:	4b82      	ldr	r3, [pc, #520]	; (8001dd8 <HAL_RCC_OscConfig+0x578>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d0f0      	beq.n	8001bba <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bd8:	4b7f      	ldr	r3, [pc, #508]	; (8001dd8 <HAL_RCC_OscConfig+0x578>)
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	691b      	ldr	r3, [r3, #16]
 8001be4:	061b      	lsls	r3, r3, #24
 8001be6:	497c      	ldr	r1, [pc, #496]	; (8001dd8 <HAL_RCC_OscConfig+0x578>)
 8001be8:	4313      	orrs	r3, r2
 8001bea:	604b      	str	r3, [r1, #4]
 8001bec:	e018      	b.n	8001c20 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bee:	4b7a      	ldr	r3, [pc, #488]	; (8001dd8 <HAL_RCC_OscConfig+0x578>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a79      	ldr	r2, [pc, #484]	; (8001dd8 <HAL_RCC_OscConfig+0x578>)
 8001bf4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001bf8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bfa:	f7ff f8f5 	bl	8000de8 <HAL_GetTick>
 8001bfe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c00:	e008      	b.n	8001c14 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c02:	f7ff f8f1 	bl	8000de8 <HAL_GetTick>
 8001c06:	4602      	mov	r2, r0
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	1ad3      	subs	r3, r2, r3
 8001c0c:	2b02      	cmp	r3, #2
 8001c0e:	d901      	bls.n	8001c14 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001c10:	2303      	movs	r3, #3
 8001c12:	e203      	b.n	800201c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c14:	4b70      	ldr	r3, [pc, #448]	; (8001dd8 <HAL_RCC_OscConfig+0x578>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d1f0      	bne.n	8001c02 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f003 0308 	and.w	r3, r3, #8
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d03c      	beq.n	8001ca6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	695b      	ldr	r3, [r3, #20]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d01c      	beq.n	8001c6e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c34:	4b68      	ldr	r3, [pc, #416]	; (8001dd8 <HAL_RCC_OscConfig+0x578>)
 8001c36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c3a:	4a67      	ldr	r2, [pc, #412]	; (8001dd8 <HAL_RCC_OscConfig+0x578>)
 8001c3c:	f043 0301 	orr.w	r3, r3, #1
 8001c40:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c44:	f7ff f8d0 	bl	8000de8 <HAL_GetTick>
 8001c48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c4a:	e008      	b.n	8001c5e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c4c:	f7ff f8cc 	bl	8000de8 <HAL_GetTick>
 8001c50:	4602      	mov	r2, r0
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	1ad3      	subs	r3, r2, r3
 8001c56:	2b02      	cmp	r3, #2
 8001c58:	d901      	bls.n	8001c5e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	e1de      	b.n	800201c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c5e:	4b5e      	ldr	r3, [pc, #376]	; (8001dd8 <HAL_RCC_OscConfig+0x578>)
 8001c60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c64:	f003 0302 	and.w	r3, r3, #2
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d0ef      	beq.n	8001c4c <HAL_RCC_OscConfig+0x3ec>
 8001c6c:	e01b      	b.n	8001ca6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c6e:	4b5a      	ldr	r3, [pc, #360]	; (8001dd8 <HAL_RCC_OscConfig+0x578>)
 8001c70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c74:	4a58      	ldr	r2, [pc, #352]	; (8001dd8 <HAL_RCC_OscConfig+0x578>)
 8001c76:	f023 0301 	bic.w	r3, r3, #1
 8001c7a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c7e:	f7ff f8b3 	bl	8000de8 <HAL_GetTick>
 8001c82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c84:	e008      	b.n	8001c98 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c86:	f7ff f8af 	bl	8000de8 <HAL_GetTick>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	1ad3      	subs	r3, r2, r3
 8001c90:	2b02      	cmp	r3, #2
 8001c92:	d901      	bls.n	8001c98 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001c94:	2303      	movs	r3, #3
 8001c96:	e1c1      	b.n	800201c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c98:	4b4f      	ldr	r3, [pc, #316]	; (8001dd8 <HAL_RCC_OscConfig+0x578>)
 8001c9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c9e:	f003 0302 	and.w	r3, r3, #2
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d1ef      	bne.n	8001c86 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f003 0304 	and.w	r3, r3, #4
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	f000 80a6 	beq.w	8001e00 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001cb8:	4b47      	ldr	r3, [pc, #284]	; (8001dd8 <HAL_RCC_OscConfig+0x578>)
 8001cba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d10d      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cc4:	4b44      	ldr	r3, [pc, #272]	; (8001dd8 <HAL_RCC_OscConfig+0x578>)
 8001cc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cc8:	4a43      	ldr	r2, [pc, #268]	; (8001dd8 <HAL_RCC_OscConfig+0x578>)
 8001cca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cce:	6593      	str	r3, [r2, #88]	; 0x58
 8001cd0:	4b41      	ldr	r3, [pc, #260]	; (8001dd8 <HAL_RCC_OscConfig+0x578>)
 8001cd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cd8:	60bb      	str	r3, [r7, #8]
 8001cda:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ce0:	4b3e      	ldr	r3, [pc, #248]	; (8001ddc <HAL_RCC_OscConfig+0x57c>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d118      	bne.n	8001d1e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001cec:	4b3b      	ldr	r3, [pc, #236]	; (8001ddc <HAL_RCC_OscConfig+0x57c>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a3a      	ldr	r2, [pc, #232]	; (8001ddc <HAL_RCC_OscConfig+0x57c>)
 8001cf2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cf6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cf8:	f7ff f876 	bl	8000de8 <HAL_GetTick>
 8001cfc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cfe:	e008      	b.n	8001d12 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d00:	f7ff f872 	bl	8000de8 <HAL_GetTick>
 8001d04:	4602      	mov	r2, r0
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	2b02      	cmp	r3, #2
 8001d0c:	d901      	bls.n	8001d12 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001d0e:	2303      	movs	r3, #3
 8001d10:	e184      	b.n	800201c <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d12:	4b32      	ldr	r3, [pc, #200]	; (8001ddc <HAL_RCC_OscConfig+0x57c>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d0f0      	beq.n	8001d00 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d108      	bne.n	8001d38 <HAL_RCC_OscConfig+0x4d8>
 8001d26:	4b2c      	ldr	r3, [pc, #176]	; (8001dd8 <HAL_RCC_OscConfig+0x578>)
 8001d28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d2c:	4a2a      	ldr	r2, [pc, #168]	; (8001dd8 <HAL_RCC_OscConfig+0x578>)
 8001d2e:	f043 0301 	orr.w	r3, r3, #1
 8001d32:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d36:	e024      	b.n	8001d82 <HAL_RCC_OscConfig+0x522>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	2b05      	cmp	r3, #5
 8001d3e:	d110      	bne.n	8001d62 <HAL_RCC_OscConfig+0x502>
 8001d40:	4b25      	ldr	r3, [pc, #148]	; (8001dd8 <HAL_RCC_OscConfig+0x578>)
 8001d42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d46:	4a24      	ldr	r2, [pc, #144]	; (8001dd8 <HAL_RCC_OscConfig+0x578>)
 8001d48:	f043 0304 	orr.w	r3, r3, #4
 8001d4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d50:	4b21      	ldr	r3, [pc, #132]	; (8001dd8 <HAL_RCC_OscConfig+0x578>)
 8001d52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d56:	4a20      	ldr	r2, [pc, #128]	; (8001dd8 <HAL_RCC_OscConfig+0x578>)
 8001d58:	f043 0301 	orr.w	r3, r3, #1
 8001d5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d60:	e00f      	b.n	8001d82 <HAL_RCC_OscConfig+0x522>
 8001d62:	4b1d      	ldr	r3, [pc, #116]	; (8001dd8 <HAL_RCC_OscConfig+0x578>)
 8001d64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d68:	4a1b      	ldr	r2, [pc, #108]	; (8001dd8 <HAL_RCC_OscConfig+0x578>)
 8001d6a:	f023 0301 	bic.w	r3, r3, #1
 8001d6e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d72:	4b19      	ldr	r3, [pc, #100]	; (8001dd8 <HAL_RCC_OscConfig+0x578>)
 8001d74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d78:	4a17      	ldr	r2, [pc, #92]	; (8001dd8 <HAL_RCC_OscConfig+0x578>)
 8001d7a:	f023 0304 	bic.w	r3, r3, #4
 8001d7e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d016      	beq.n	8001db8 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d8a:	f7ff f82d 	bl	8000de8 <HAL_GetTick>
 8001d8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d90:	e00a      	b.n	8001da8 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d92:	f7ff f829 	bl	8000de8 <HAL_GetTick>
 8001d96:	4602      	mov	r2, r0
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	1ad3      	subs	r3, r2, r3
 8001d9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d901      	bls.n	8001da8 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001da4:	2303      	movs	r3, #3
 8001da6:	e139      	b.n	800201c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001da8:	4b0b      	ldr	r3, [pc, #44]	; (8001dd8 <HAL_RCC_OscConfig+0x578>)
 8001daa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dae:	f003 0302 	and.w	r3, r3, #2
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d0ed      	beq.n	8001d92 <HAL_RCC_OscConfig+0x532>
 8001db6:	e01a      	b.n	8001dee <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001db8:	f7ff f816 	bl	8000de8 <HAL_GetTick>
 8001dbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001dbe:	e00f      	b.n	8001de0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dc0:	f7ff f812 	bl	8000de8 <HAL_GetTick>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d906      	bls.n	8001de0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	e122      	b.n	800201c <HAL_RCC_OscConfig+0x7bc>
 8001dd6:	bf00      	nop
 8001dd8:	40021000 	.word	0x40021000
 8001ddc:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001de0:	4b90      	ldr	r3, [pc, #576]	; (8002024 <HAL_RCC_OscConfig+0x7c4>)
 8001de2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001de6:	f003 0302 	and.w	r3, r3, #2
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d1e8      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001dee:	7ffb      	ldrb	r3, [r7, #31]
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	d105      	bne.n	8001e00 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001df4:	4b8b      	ldr	r3, [pc, #556]	; (8002024 <HAL_RCC_OscConfig+0x7c4>)
 8001df6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001df8:	4a8a      	ldr	r2, [pc, #552]	; (8002024 <HAL_RCC_OscConfig+0x7c4>)
 8001dfa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001dfe:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	f000 8108 	beq.w	800201a <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e0e:	2b02      	cmp	r3, #2
 8001e10:	f040 80d0 	bne.w	8001fb4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001e14:	4b83      	ldr	r3, [pc, #524]	; (8002024 <HAL_RCC_OscConfig+0x7c4>)
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	f003 0203 	and.w	r2, r3, #3
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d130      	bne.n	8001e8a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e32:	3b01      	subs	r3, #1
 8001e34:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e36:	429a      	cmp	r2, r3
 8001e38:	d127      	bne.n	8001e8a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e44:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e46:	429a      	cmp	r2, r3
 8001e48:	d11f      	bne.n	8001e8a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e50:	687a      	ldr	r2, [r7, #4]
 8001e52:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001e54:	2a07      	cmp	r2, #7
 8001e56:	bf14      	ite	ne
 8001e58:	2201      	movne	r2, #1
 8001e5a:	2200      	moveq	r2, #0
 8001e5c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d113      	bne.n	8001e8a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e6c:	085b      	lsrs	r3, r3, #1
 8001e6e:	3b01      	subs	r3, #1
 8001e70:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001e72:	429a      	cmp	r2, r3
 8001e74:	d109      	bne.n	8001e8a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e80:	085b      	lsrs	r3, r3, #1
 8001e82:	3b01      	subs	r3, #1
 8001e84:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e86:	429a      	cmp	r2, r3
 8001e88:	d06e      	beq.n	8001f68 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e8a:	69bb      	ldr	r3, [r7, #24]
 8001e8c:	2b0c      	cmp	r3, #12
 8001e8e:	d069      	beq.n	8001f64 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001e90:	4b64      	ldr	r3, [pc, #400]	; (8002024 <HAL_RCC_OscConfig+0x7c4>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d105      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001e9c:	4b61      	ldr	r3, [pc, #388]	; (8002024 <HAL_RCC_OscConfig+0x7c4>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d001      	beq.n	8001eac <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	e0b7      	b.n	800201c <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001eac:	4b5d      	ldr	r3, [pc, #372]	; (8002024 <HAL_RCC_OscConfig+0x7c4>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a5c      	ldr	r2, [pc, #368]	; (8002024 <HAL_RCC_OscConfig+0x7c4>)
 8001eb2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001eb6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001eb8:	f7fe ff96 	bl	8000de8 <HAL_GetTick>
 8001ebc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ebe:	e008      	b.n	8001ed2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ec0:	f7fe ff92 	bl	8000de8 <HAL_GetTick>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	2b02      	cmp	r3, #2
 8001ecc:	d901      	bls.n	8001ed2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	e0a4      	b.n	800201c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ed2:	4b54      	ldr	r3, [pc, #336]	; (8002024 <HAL_RCC_OscConfig+0x7c4>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d1f0      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ede:	4b51      	ldr	r3, [pc, #324]	; (8002024 <HAL_RCC_OscConfig+0x7c4>)
 8001ee0:	68da      	ldr	r2, [r3, #12]
 8001ee2:	4b51      	ldr	r3, [pc, #324]	; (8002028 <HAL_RCC_OscConfig+0x7c8>)
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	687a      	ldr	r2, [r7, #4]
 8001ee8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001eea:	687a      	ldr	r2, [r7, #4]
 8001eec:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001eee:	3a01      	subs	r2, #1
 8001ef0:	0112      	lsls	r2, r2, #4
 8001ef2:	4311      	orrs	r1, r2
 8001ef4:	687a      	ldr	r2, [r7, #4]
 8001ef6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001ef8:	0212      	lsls	r2, r2, #8
 8001efa:	4311      	orrs	r1, r2
 8001efc:	687a      	ldr	r2, [r7, #4]
 8001efe:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001f00:	0852      	lsrs	r2, r2, #1
 8001f02:	3a01      	subs	r2, #1
 8001f04:	0552      	lsls	r2, r2, #21
 8001f06:	4311      	orrs	r1, r2
 8001f08:	687a      	ldr	r2, [r7, #4]
 8001f0a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001f0c:	0852      	lsrs	r2, r2, #1
 8001f0e:	3a01      	subs	r2, #1
 8001f10:	0652      	lsls	r2, r2, #25
 8001f12:	4311      	orrs	r1, r2
 8001f14:	687a      	ldr	r2, [r7, #4]
 8001f16:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001f18:	0912      	lsrs	r2, r2, #4
 8001f1a:	0452      	lsls	r2, r2, #17
 8001f1c:	430a      	orrs	r2, r1
 8001f1e:	4941      	ldr	r1, [pc, #260]	; (8002024 <HAL_RCC_OscConfig+0x7c4>)
 8001f20:	4313      	orrs	r3, r2
 8001f22:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001f24:	4b3f      	ldr	r3, [pc, #252]	; (8002024 <HAL_RCC_OscConfig+0x7c4>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a3e      	ldr	r2, [pc, #248]	; (8002024 <HAL_RCC_OscConfig+0x7c4>)
 8001f2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f2e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001f30:	4b3c      	ldr	r3, [pc, #240]	; (8002024 <HAL_RCC_OscConfig+0x7c4>)
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	4a3b      	ldr	r2, [pc, #236]	; (8002024 <HAL_RCC_OscConfig+0x7c4>)
 8001f36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f3a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001f3c:	f7fe ff54 	bl	8000de8 <HAL_GetTick>
 8001f40:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f42:	e008      	b.n	8001f56 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f44:	f7fe ff50 	bl	8000de8 <HAL_GetTick>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	2b02      	cmp	r3, #2
 8001f50:	d901      	bls.n	8001f56 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001f52:	2303      	movs	r3, #3
 8001f54:	e062      	b.n	800201c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f56:	4b33      	ldr	r3, [pc, #204]	; (8002024 <HAL_RCC_OscConfig+0x7c4>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d0f0      	beq.n	8001f44 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f62:	e05a      	b.n	800201a <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001f64:	2301      	movs	r3, #1
 8001f66:	e059      	b.n	800201c <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f68:	4b2e      	ldr	r3, [pc, #184]	; (8002024 <HAL_RCC_OscConfig+0x7c4>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d152      	bne.n	800201a <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001f74:	4b2b      	ldr	r3, [pc, #172]	; (8002024 <HAL_RCC_OscConfig+0x7c4>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a2a      	ldr	r2, [pc, #168]	; (8002024 <HAL_RCC_OscConfig+0x7c4>)
 8001f7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f7e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001f80:	4b28      	ldr	r3, [pc, #160]	; (8002024 <HAL_RCC_OscConfig+0x7c4>)
 8001f82:	68db      	ldr	r3, [r3, #12]
 8001f84:	4a27      	ldr	r2, [pc, #156]	; (8002024 <HAL_RCC_OscConfig+0x7c4>)
 8001f86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f8a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001f8c:	f7fe ff2c 	bl	8000de8 <HAL_GetTick>
 8001f90:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f92:	e008      	b.n	8001fa6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f94:	f7fe ff28 	bl	8000de8 <HAL_GetTick>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	2b02      	cmp	r3, #2
 8001fa0:	d901      	bls.n	8001fa6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	e03a      	b.n	800201c <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fa6:	4b1f      	ldr	r3, [pc, #124]	; (8002024 <HAL_RCC_OscConfig+0x7c4>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d0f0      	beq.n	8001f94 <HAL_RCC_OscConfig+0x734>
 8001fb2:	e032      	b.n	800201a <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001fb4:	69bb      	ldr	r3, [r7, #24]
 8001fb6:	2b0c      	cmp	r3, #12
 8001fb8:	d02d      	beq.n	8002016 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fba:	4b1a      	ldr	r3, [pc, #104]	; (8002024 <HAL_RCC_OscConfig+0x7c4>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a19      	ldr	r2, [pc, #100]	; (8002024 <HAL_RCC_OscConfig+0x7c4>)
 8001fc0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001fc4:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001fc6:	4b17      	ldr	r3, [pc, #92]	; (8002024 <HAL_RCC_OscConfig+0x7c4>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d105      	bne.n	8001fde <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001fd2:	4b14      	ldr	r3, [pc, #80]	; (8002024 <HAL_RCC_OscConfig+0x7c4>)
 8001fd4:	68db      	ldr	r3, [r3, #12]
 8001fd6:	4a13      	ldr	r2, [pc, #76]	; (8002024 <HAL_RCC_OscConfig+0x7c4>)
 8001fd8:	f023 0303 	bic.w	r3, r3, #3
 8001fdc:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001fde:	4b11      	ldr	r3, [pc, #68]	; (8002024 <HAL_RCC_OscConfig+0x7c4>)
 8001fe0:	68db      	ldr	r3, [r3, #12]
 8001fe2:	4a10      	ldr	r2, [pc, #64]	; (8002024 <HAL_RCC_OscConfig+0x7c4>)
 8001fe4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001fe8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fec:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fee:	f7fe fefb 	bl	8000de8 <HAL_GetTick>
 8001ff2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ff4:	e008      	b.n	8002008 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ff6:	f7fe fef7 	bl	8000de8 <HAL_GetTick>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	1ad3      	subs	r3, r2, r3
 8002000:	2b02      	cmp	r3, #2
 8002002:	d901      	bls.n	8002008 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002004:	2303      	movs	r3, #3
 8002006:	e009      	b.n	800201c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002008:	4b06      	ldr	r3, [pc, #24]	; (8002024 <HAL_RCC_OscConfig+0x7c4>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002010:	2b00      	cmp	r3, #0
 8002012:	d1f0      	bne.n	8001ff6 <HAL_RCC_OscConfig+0x796>
 8002014:	e001      	b.n	800201a <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e000      	b.n	800201c <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 800201a:	2300      	movs	r3, #0
}
 800201c:	4618      	mov	r0, r3
 800201e:	3720      	adds	r7, #32
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}
 8002024:	40021000 	.word	0x40021000
 8002028:	f99d808c 	.word	0xf99d808c

0800202c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b084      	sub	sp, #16
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
 8002034:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d101      	bne.n	8002040 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800203c:	2301      	movs	r3, #1
 800203e:	e0c8      	b.n	80021d2 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002040:	4b66      	ldr	r3, [pc, #408]	; (80021dc <HAL_RCC_ClockConfig+0x1b0>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f003 0307 	and.w	r3, r3, #7
 8002048:	683a      	ldr	r2, [r7, #0]
 800204a:	429a      	cmp	r2, r3
 800204c:	d910      	bls.n	8002070 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800204e:	4b63      	ldr	r3, [pc, #396]	; (80021dc <HAL_RCC_ClockConfig+0x1b0>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f023 0207 	bic.w	r2, r3, #7
 8002056:	4961      	ldr	r1, [pc, #388]	; (80021dc <HAL_RCC_ClockConfig+0x1b0>)
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	4313      	orrs	r3, r2
 800205c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800205e:	4b5f      	ldr	r3, [pc, #380]	; (80021dc <HAL_RCC_ClockConfig+0x1b0>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 0307 	and.w	r3, r3, #7
 8002066:	683a      	ldr	r2, [r7, #0]
 8002068:	429a      	cmp	r2, r3
 800206a:	d001      	beq.n	8002070 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	e0b0      	b.n	80021d2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 0301 	and.w	r3, r3, #1
 8002078:	2b00      	cmp	r3, #0
 800207a:	d04c      	beq.n	8002116 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	2b03      	cmp	r3, #3
 8002082:	d107      	bne.n	8002094 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002084:	4b56      	ldr	r3, [pc, #344]	; (80021e0 <HAL_RCC_ClockConfig+0x1b4>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800208c:	2b00      	cmp	r3, #0
 800208e:	d121      	bne.n	80020d4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	e09e      	b.n	80021d2 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	2b02      	cmp	r3, #2
 800209a:	d107      	bne.n	80020ac <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800209c:	4b50      	ldr	r3, [pc, #320]	; (80021e0 <HAL_RCC_ClockConfig+0x1b4>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d115      	bne.n	80020d4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80020a8:	2301      	movs	r3, #1
 80020aa:	e092      	b.n	80021d2 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d107      	bne.n	80020c4 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80020b4:	4b4a      	ldr	r3, [pc, #296]	; (80021e0 <HAL_RCC_ClockConfig+0x1b4>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f003 0302 	and.w	r3, r3, #2
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d109      	bne.n	80020d4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	e086      	b.n	80021d2 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020c4:	4b46      	ldr	r3, [pc, #280]	; (80021e0 <HAL_RCC_ClockConfig+0x1b4>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d101      	bne.n	80020d4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80020d0:	2301      	movs	r3, #1
 80020d2:	e07e      	b.n	80021d2 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80020d4:	4b42      	ldr	r3, [pc, #264]	; (80021e0 <HAL_RCC_ClockConfig+0x1b4>)
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	f023 0203 	bic.w	r2, r3, #3
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	493f      	ldr	r1, [pc, #252]	; (80021e0 <HAL_RCC_ClockConfig+0x1b4>)
 80020e2:	4313      	orrs	r3, r2
 80020e4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80020e6:	f7fe fe7f 	bl	8000de8 <HAL_GetTick>
 80020ea:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020ec:	e00a      	b.n	8002104 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020ee:	f7fe fe7b 	bl	8000de8 <HAL_GetTick>
 80020f2:	4602      	mov	r2, r0
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	1ad3      	subs	r3, r2, r3
 80020f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d901      	bls.n	8002104 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002100:	2303      	movs	r3, #3
 8002102:	e066      	b.n	80021d2 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002104:	4b36      	ldr	r3, [pc, #216]	; (80021e0 <HAL_RCC_ClockConfig+0x1b4>)
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	f003 020c 	and.w	r2, r3, #12
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	429a      	cmp	r2, r3
 8002114:	d1eb      	bne.n	80020ee <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 0302 	and.w	r3, r3, #2
 800211e:	2b00      	cmp	r3, #0
 8002120:	d008      	beq.n	8002134 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002122:	4b2f      	ldr	r3, [pc, #188]	; (80021e0 <HAL_RCC_ClockConfig+0x1b4>)
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	492c      	ldr	r1, [pc, #176]	; (80021e0 <HAL_RCC_ClockConfig+0x1b4>)
 8002130:	4313      	orrs	r3, r2
 8002132:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002134:	4b29      	ldr	r3, [pc, #164]	; (80021dc <HAL_RCC_ClockConfig+0x1b0>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f003 0307 	and.w	r3, r3, #7
 800213c:	683a      	ldr	r2, [r7, #0]
 800213e:	429a      	cmp	r2, r3
 8002140:	d210      	bcs.n	8002164 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002142:	4b26      	ldr	r3, [pc, #152]	; (80021dc <HAL_RCC_ClockConfig+0x1b0>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f023 0207 	bic.w	r2, r3, #7
 800214a:	4924      	ldr	r1, [pc, #144]	; (80021dc <HAL_RCC_ClockConfig+0x1b0>)
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	4313      	orrs	r3, r2
 8002150:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002152:	4b22      	ldr	r3, [pc, #136]	; (80021dc <HAL_RCC_ClockConfig+0x1b0>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f003 0307 	and.w	r3, r3, #7
 800215a:	683a      	ldr	r2, [r7, #0]
 800215c:	429a      	cmp	r2, r3
 800215e:	d001      	beq.n	8002164 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002160:	2301      	movs	r3, #1
 8002162:	e036      	b.n	80021d2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 0304 	and.w	r3, r3, #4
 800216c:	2b00      	cmp	r3, #0
 800216e:	d008      	beq.n	8002182 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002170:	4b1b      	ldr	r3, [pc, #108]	; (80021e0 <HAL_RCC_ClockConfig+0x1b4>)
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	4918      	ldr	r1, [pc, #96]	; (80021e0 <HAL_RCC_ClockConfig+0x1b4>)
 800217e:	4313      	orrs	r3, r2
 8002180:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 0308 	and.w	r3, r3, #8
 800218a:	2b00      	cmp	r3, #0
 800218c:	d009      	beq.n	80021a2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800218e:	4b14      	ldr	r3, [pc, #80]	; (80021e0 <HAL_RCC_ClockConfig+0x1b4>)
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	691b      	ldr	r3, [r3, #16]
 800219a:	00db      	lsls	r3, r3, #3
 800219c:	4910      	ldr	r1, [pc, #64]	; (80021e0 <HAL_RCC_ClockConfig+0x1b4>)
 800219e:	4313      	orrs	r3, r2
 80021a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80021a2:	f000 f825 	bl	80021f0 <HAL_RCC_GetSysClockFreq>
 80021a6:	4602      	mov	r2, r0
 80021a8:	4b0d      	ldr	r3, [pc, #52]	; (80021e0 <HAL_RCC_ClockConfig+0x1b4>)
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	091b      	lsrs	r3, r3, #4
 80021ae:	f003 030f 	and.w	r3, r3, #15
 80021b2:	490c      	ldr	r1, [pc, #48]	; (80021e4 <HAL_RCC_ClockConfig+0x1b8>)
 80021b4:	5ccb      	ldrb	r3, [r1, r3]
 80021b6:	f003 031f 	and.w	r3, r3, #31
 80021ba:	fa22 f303 	lsr.w	r3, r2, r3
 80021be:	4a0a      	ldr	r2, [pc, #40]	; (80021e8 <HAL_RCC_ClockConfig+0x1bc>)
 80021c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80021c2:	4b0a      	ldr	r3, [pc, #40]	; (80021ec <HAL_RCC_ClockConfig+0x1c0>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4618      	mov	r0, r3
 80021c8:	f7fe fdbe 	bl	8000d48 <HAL_InitTick>
 80021cc:	4603      	mov	r3, r0
 80021ce:	72fb      	strb	r3, [r7, #11]

  return status;
 80021d0:	7afb      	ldrb	r3, [r7, #11]
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3710      	adds	r7, #16
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	40022000 	.word	0x40022000
 80021e0:	40021000 	.word	0x40021000
 80021e4:	08004c6c 	.word	0x08004c6c
 80021e8:	20000000 	.word	0x20000000
 80021ec:	20000004 	.word	0x20000004

080021f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b089      	sub	sp, #36	; 0x24
 80021f4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80021f6:	2300      	movs	r3, #0
 80021f8:	61fb      	str	r3, [r7, #28]
 80021fa:	2300      	movs	r3, #0
 80021fc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021fe:	4b3e      	ldr	r3, [pc, #248]	; (80022f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	f003 030c 	and.w	r3, r3, #12
 8002206:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002208:	4b3b      	ldr	r3, [pc, #236]	; (80022f8 <HAL_RCC_GetSysClockFreq+0x108>)
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	f003 0303 	and.w	r3, r3, #3
 8002210:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d005      	beq.n	8002224 <HAL_RCC_GetSysClockFreq+0x34>
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	2b0c      	cmp	r3, #12
 800221c:	d121      	bne.n	8002262 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	2b01      	cmp	r3, #1
 8002222:	d11e      	bne.n	8002262 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002224:	4b34      	ldr	r3, [pc, #208]	; (80022f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f003 0308 	and.w	r3, r3, #8
 800222c:	2b00      	cmp	r3, #0
 800222e:	d107      	bne.n	8002240 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002230:	4b31      	ldr	r3, [pc, #196]	; (80022f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002232:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002236:	0a1b      	lsrs	r3, r3, #8
 8002238:	f003 030f 	and.w	r3, r3, #15
 800223c:	61fb      	str	r3, [r7, #28]
 800223e:	e005      	b.n	800224c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002240:	4b2d      	ldr	r3, [pc, #180]	; (80022f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	091b      	lsrs	r3, r3, #4
 8002246:	f003 030f 	and.w	r3, r3, #15
 800224a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800224c:	4a2b      	ldr	r2, [pc, #172]	; (80022fc <HAL_RCC_GetSysClockFreq+0x10c>)
 800224e:	69fb      	ldr	r3, [r7, #28]
 8002250:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002254:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d10d      	bne.n	8002278 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800225c:	69fb      	ldr	r3, [r7, #28]
 800225e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002260:	e00a      	b.n	8002278 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	2b04      	cmp	r3, #4
 8002266:	d102      	bne.n	800226e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002268:	4b25      	ldr	r3, [pc, #148]	; (8002300 <HAL_RCC_GetSysClockFreq+0x110>)
 800226a:	61bb      	str	r3, [r7, #24]
 800226c:	e004      	b.n	8002278 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	2b08      	cmp	r3, #8
 8002272:	d101      	bne.n	8002278 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002274:	4b23      	ldr	r3, [pc, #140]	; (8002304 <HAL_RCC_GetSysClockFreq+0x114>)
 8002276:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	2b0c      	cmp	r3, #12
 800227c:	d134      	bne.n	80022e8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800227e:	4b1e      	ldr	r3, [pc, #120]	; (80022f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002280:	68db      	ldr	r3, [r3, #12]
 8002282:	f003 0303 	and.w	r3, r3, #3
 8002286:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	2b02      	cmp	r3, #2
 800228c:	d003      	beq.n	8002296 <HAL_RCC_GetSysClockFreq+0xa6>
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	2b03      	cmp	r3, #3
 8002292:	d003      	beq.n	800229c <HAL_RCC_GetSysClockFreq+0xac>
 8002294:	e005      	b.n	80022a2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002296:	4b1a      	ldr	r3, [pc, #104]	; (8002300 <HAL_RCC_GetSysClockFreq+0x110>)
 8002298:	617b      	str	r3, [r7, #20]
      break;
 800229a:	e005      	b.n	80022a8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800229c:	4b19      	ldr	r3, [pc, #100]	; (8002304 <HAL_RCC_GetSysClockFreq+0x114>)
 800229e:	617b      	str	r3, [r7, #20]
      break;
 80022a0:	e002      	b.n	80022a8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	617b      	str	r3, [r7, #20]
      break;
 80022a6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80022a8:	4b13      	ldr	r3, [pc, #76]	; (80022f8 <HAL_RCC_GetSysClockFreq+0x108>)
 80022aa:	68db      	ldr	r3, [r3, #12]
 80022ac:	091b      	lsrs	r3, r3, #4
 80022ae:	f003 0307 	and.w	r3, r3, #7
 80022b2:	3301      	adds	r3, #1
 80022b4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80022b6:	4b10      	ldr	r3, [pc, #64]	; (80022f8 <HAL_RCC_GetSysClockFreq+0x108>)
 80022b8:	68db      	ldr	r3, [r3, #12]
 80022ba:	0a1b      	lsrs	r3, r3, #8
 80022bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80022c0:	697a      	ldr	r2, [r7, #20]
 80022c2:	fb02 f203 	mul.w	r2, r2, r3
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80022cc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80022ce:	4b0a      	ldr	r3, [pc, #40]	; (80022f8 <HAL_RCC_GetSysClockFreq+0x108>)
 80022d0:	68db      	ldr	r3, [r3, #12]
 80022d2:	0e5b      	lsrs	r3, r3, #25
 80022d4:	f003 0303 	and.w	r3, r3, #3
 80022d8:	3301      	adds	r3, #1
 80022da:	005b      	lsls	r3, r3, #1
 80022dc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80022de:	697a      	ldr	r2, [r7, #20]
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80022e6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80022e8:	69bb      	ldr	r3, [r7, #24]
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3724      	adds	r7, #36	; 0x24
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr
 80022f6:	bf00      	nop
 80022f8:	40021000 	.word	0x40021000
 80022fc:	08004c84 	.word	0x08004c84
 8002300:	00f42400 	.word	0x00f42400
 8002304:	007a1200 	.word	0x007a1200

08002308 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002308:	b480      	push	{r7}
 800230a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800230c:	4b03      	ldr	r3, [pc, #12]	; (800231c <HAL_RCC_GetHCLKFreq+0x14>)
 800230e:	681b      	ldr	r3, [r3, #0]
}
 8002310:	4618      	mov	r0, r3
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr
 800231a:	bf00      	nop
 800231c:	20000000 	.word	0x20000000

08002320 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002324:	f7ff fff0 	bl	8002308 <HAL_RCC_GetHCLKFreq>
 8002328:	4602      	mov	r2, r0
 800232a:	4b06      	ldr	r3, [pc, #24]	; (8002344 <HAL_RCC_GetPCLK1Freq+0x24>)
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	0a1b      	lsrs	r3, r3, #8
 8002330:	f003 0307 	and.w	r3, r3, #7
 8002334:	4904      	ldr	r1, [pc, #16]	; (8002348 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002336:	5ccb      	ldrb	r3, [r1, r3]
 8002338:	f003 031f 	and.w	r3, r3, #31
 800233c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002340:	4618      	mov	r0, r3
 8002342:	bd80      	pop	{r7, pc}
 8002344:	40021000 	.word	0x40021000
 8002348:	08004c7c 	.word	0x08004c7c

0800234c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002350:	f7ff ffda 	bl	8002308 <HAL_RCC_GetHCLKFreq>
 8002354:	4602      	mov	r2, r0
 8002356:	4b06      	ldr	r3, [pc, #24]	; (8002370 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	0adb      	lsrs	r3, r3, #11
 800235c:	f003 0307 	and.w	r3, r3, #7
 8002360:	4904      	ldr	r1, [pc, #16]	; (8002374 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002362:	5ccb      	ldrb	r3, [r1, r3]
 8002364:	f003 031f 	and.w	r3, r3, #31
 8002368:	fa22 f303 	lsr.w	r3, r2, r3
}
 800236c:	4618      	mov	r0, r3
 800236e:	bd80      	pop	{r7, pc}
 8002370:	40021000 	.word	0x40021000
 8002374:	08004c7c 	.word	0x08004c7c

08002378 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b086      	sub	sp, #24
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002380:	2300      	movs	r3, #0
 8002382:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002384:	4b2a      	ldr	r3, [pc, #168]	; (8002430 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002386:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002388:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800238c:	2b00      	cmp	r3, #0
 800238e:	d003      	beq.n	8002398 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002390:	f7ff fa02 	bl	8001798 <HAL_PWREx_GetVoltageRange>
 8002394:	6178      	str	r0, [r7, #20]
 8002396:	e014      	b.n	80023c2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002398:	4b25      	ldr	r3, [pc, #148]	; (8002430 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800239a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800239c:	4a24      	ldr	r2, [pc, #144]	; (8002430 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800239e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023a2:	6593      	str	r3, [r2, #88]	; 0x58
 80023a4:	4b22      	ldr	r3, [pc, #136]	; (8002430 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ac:	60fb      	str	r3, [r7, #12]
 80023ae:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80023b0:	f7ff f9f2 	bl	8001798 <HAL_PWREx_GetVoltageRange>
 80023b4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80023b6:	4b1e      	ldr	r3, [pc, #120]	; (8002430 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023ba:	4a1d      	ldr	r2, [pc, #116]	; (8002430 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023c0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023c8:	d10b      	bne.n	80023e2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2b80      	cmp	r3, #128	; 0x80
 80023ce:	d919      	bls.n	8002404 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2ba0      	cmp	r3, #160	; 0xa0
 80023d4:	d902      	bls.n	80023dc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80023d6:	2302      	movs	r3, #2
 80023d8:	613b      	str	r3, [r7, #16]
 80023da:	e013      	b.n	8002404 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80023dc:	2301      	movs	r3, #1
 80023de:	613b      	str	r3, [r7, #16]
 80023e0:	e010      	b.n	8002404 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2b80      	cmp	r3, #128	; 0x80
 80023e6:	d902      	bls.n	80023ee <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80023e8:	2303      	movs	r3, #3
 80023ea:	613b      	str	r3, [r7, #16]
 80023ec:	e00a      	b.n	8002404 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2b80      	cmp	r3, #128	; 0x80
 80023f2:	d102      	bne.n	80023fa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80023f4:	2302      	movs	r3, #2
 80023f6:	613b      	str	r3, [r7, #16]
 80023f8:	e004      	b.n	8002404 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2b70      	cmp	r3, #112	; 0x70
 80023fe:	d101      	bne.n	8002404 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002400:	2301      	movs	r3, #1
 8002402:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002404:	4b0b      	ldr	r3, [pc, #44]	; (8002434 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f023 0207 	bic.w	r2, r3, #7
 800240c:	4909      	ldr	r1, [pc, #36]	; (8002434 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	4313      	orrs	r3, r2
 8002412:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002414:	4b07      	ldr	r3, [pc, #28]	; (8002434 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 0307 	and.w	r3, r3, #7
 800241c:	693a      	ldr	r2, [r7, #16]
 800241e:	429a      	cmp	r2, r3
 8002420:	d001      	beq.n	8002426 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e000      	b.n	8002428 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002426:	2300      	movs	r3, #0
}
 8002428:	4618      	mov	r0, r3
 800242a:	3718      	adds	r7, #24
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}
 8002430:	40021000 	.word	0x40021000
 8002434:	40022000 	.word	0x40022000

08002438 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b086      	sub	sp, #24
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002440:	2300      	movs	r3, #0
 8002442:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002444:	2300      	movs	r3, #0
 8002446:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002450:	2b00      	cmp	r3, #0
 8002452:	d041      	beq.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002458:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800245c:	d02a      	beq.n	80024b4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800245e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002462:	d824      	bhi.n	80024ae <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002464:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002468:	d008      	beq.n	800247c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800246a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800246e:	d81e      	bhi.n	80024ae <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002470:	2b00      	cmp	r3, #0
 8002472:	d00a      	beq.n	800248a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002474:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002478:	d010      	beq.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800247a:	e018      	b.n	80024ae <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800247c:	4b86      	ldr	r3, [pc, #536]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	4a85      	ldr	r2, [pc, #532]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002482:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002486:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002488:	e015      	b.n	80024b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	3304      	adds	r3, #4
 800248e:	2100      	movs	r1, #0
 8002490:	4618      	mov	r0, r3
 8002492:	f001 f825 	bl	80034e0 <RCCEx_PLLSAI1_Config>
 8002496:	4603      	mov	r3, r0
 8002498:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800249a:	e00c      	b.n	80024b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	3320      	adds	r3, #32
 80024a0:	2100      	movs	r1, #0
 80024a2:	4618      	mov	r0, r3
 80024a4:	f001 f910 	bl	80036c8 <RCCEx_PLLSAI2_Config>
 80024a8:	4603      	mov	r3, r0
 80024aa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80024ac:	e003      	b.n	80024b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	74fb      	strb	r3, [r7, #19]
      break;
 80024b2:	e000      	b.n	80024b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80024b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80024b6:	7cfb      	ldrb	r3, [r7, #19]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d10b      	bne.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80024bc:	4b76      	ldr	r3, [pc, #472]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024c2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80024ca:	4973      	ldr	r1, [pc, #460]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024cc:	4313      	orrs	r3, r2
 80024ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80024d2:	e001      	b.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024d4:	7cfb      	ldrb	r3, [r7, #19]
 80024d6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d041      	beq.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80024e8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80024ec:	d02a      	beq.n	8002544 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80024ee:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80024f2:	d824      	bhi.n	800253e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80024f4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80024f8:	d008      	beq.n	800250c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80024fa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80024fe:	d81e      	bhi.n	800253e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002500:	2b00      	cmp	r3, #0
 8002502:	d00a      	beq.n	800251a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002504:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002508:	d010      	beq.n	800252c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800250a:	e018      	b.n	800253e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800250c:	4b62      	ldr	r3, [pc, #392]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	4a61      	ldr	r2, [pc, #388]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002512:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002516:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002518:	e015      	b.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	3304      	adds	r3, #4
 800251e:	2100      	movs	r1, #0
 8002520:	4618      	mov	r0, r3
 8002522:	f000 ffdd 	bl	80034e0 <RCCEx_PLLSAI1_Config>
 8002526:	4603      	mov	r3, r0
 8002528:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800252a:	e00c      	b.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	3320      	adds	r3, #32
 8002530:	2100      	movs	r1, #0
 8002532:	4618      	mov	r0, r3
 8002534:	f001 f8c8 	bl	80036c8 <RCCEx_PLLSAI2_Config>
 8002538:	4603      	mov	r3, r0
 800253a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800253c:	e003      	b.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	74fb      	strb	r3, [r7, #19]
      break;
 8002542:	e000      	b.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002544:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002546:	7cfb      	ldrb	r3, [r7, #19]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d10b      	bne.n	8002564 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800254c:	4b52      	ldr	r3, [pc, #328]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800254e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002552:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800255a:	494f      	ldr	r1, [pc, #316]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800255c:	4313      	orrs	r3, r2
 800255e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002562:	e001      	b.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002564:	7cfb      	ldrb	r3, [r7, #19]
 8002566:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002570:	2b00      	cmp	r3, #0
 8002572:	f000 80a0 	beq.w	80026b6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002576:	2300      	movs	r3, #0
 8002578:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800257a:	4b47      	ldr	r3, [pc, #284]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800257c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800257e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002582:	2b00      	cmp	r3, #0
 8002584:	d101      	bne.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002586:	2301      	movs	r3, #1
 8002588:	e000      	b.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800258a:	2300      	movs	r3, #0
 800258c:	2b00      	cmp	r3, #0
 800258e:	d00d      	beq.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002590:	4b41      	ldr	r3, [pc, #260]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002592:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002594:	4a40      	ldr	r2, [pc, #256]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002596:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800259a:	6593      	str	r3, [r2, #88]	; 0x58
 800259c:	4b3e      	ldr	r3, [pc, #248]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800259e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025a4:	60bb      	str	r3, [r7, #8]
 80025a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025a8:	2301      	movs	r3, #1
 80025aa:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80025ac:	4b3b      	ldr	r3, [pc, #236]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a3a      	ldr	r2, [pc, #232]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80025b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025b6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80025b8:	f7fe fc16 	bl	8000de8 <HAL_GetTick>
 80025bc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80025be:	e009      	b.n	80025d4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025c0:	f7fe fc12 	bl	8000de8 <HAL_GetTick>
 80025c4:	4602      	mov	r2, r0
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	1ad3      	subs	r3, r2, r3
 80025ca:	2b02      	cmp	r3, #2
 80025cc:	d902      	bls.n	80025d4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80025ce:	2303      	movs	r3, #3
 80025d0:	74fb      	strb	r3, [r7, #19]
        break;
 80025d2:	e005      	b.n	80025e0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80025d4:	4b31      	ldr	r3, [pc, #196]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d0ef      	beq.n	80025c0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80025e0:	7cfb      	ldrb	r3, [r7, #19]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d15c      	bne.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80025e6:	4b2c      	ldr	r3, [pc, #176]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025f0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d01f      	beq.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025fe:	697a      	ldr	r2, [r7, #20]
 8002600:	429a      	cmp	r2, r3
 8002602:	d019      	beq.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002604:	4b24      	ldr	r3, [pc, #144]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002606:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800260a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800260e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002610:	4b21      	ldr	r3, [pc, #132]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002612:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002616:	4a20      	ldr	r2, [pc, #128]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002618:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800261c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002620:	4b1d      	ldr	r3, [pc, #116]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002622:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002626:	4a1c      	ldr	r2, [pc, #112]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002628:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800262c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002630:	4a19      	ldr	r2, [pc, #100]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	f003 0301 	and.w	r3, r3, #1
 800263e:	2b00      	cmp	r3, #0
 8002640:	d016      	beq.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002642:	f7fe fbd1 	bl	8000de8 <HAL_GetTick>
 8002646:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002648:	e00b      	b.n	8002662 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800264a:	f7fe fbcd 	bl	8000de8 <HAL_GetTick>
 800264e:	4602      	mov	r2, r0
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	1ad3      	subs	r3, r2, r3
 8002654:	f241 3288 	movw	r2, #5000	; 0x1388
 8002658:	4293      	cmp	r3, r2
 800265a:	d902      	bls.n	8002662 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800265c:	2303      	movs	r3, #3
 800265e:	74fb      	strb	r3, [r7, #19]
            break;
 8002660:	e006      	b.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002662:	4b0d      	ldr	r3, [pc, #52]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002664:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002668:	f003 0302 	and.w	r3, r3, #2
 800266c:	2b00      	cmp	r3, #0
 800266e:	d0ec      	beq.n	800264a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002670:	7cfb      	ldrb	r3, [r7, #19]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d10c      	bne.n	8002690 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002676:	4b08      	ldr	r3, [pc, #32]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002678:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800267c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002686:	4904      	ldr	r1, [pc, #16]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002688:	4313      	orrs	r3, r2
 800268a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800268e:	e009      	b.n	80026a4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002690:	7cfb      	ldrb	r3, [r7, #19]
 8002692:	74bb      	strb	r3, [r7, #18]
 8002694:	e006      	b.n	80026a4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002696:	bf00      	nop
 8002698:	40021000 	.word	0x40021000
 800269c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026a0:	7cfb      	ldrb	r3, [r7, #19]
 80026a2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026a4:	7c7b      	ldrb	r3, [r7, #17]
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d105      	bne.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026aa:	4b9e      	ldr	r3, [pc, #632]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026ae:	4a9d      	ldr	r2, [pc, #628]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026b4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 0301 	and.w	r3, r3, #1
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d00a      	beq.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80026c2:	4b98      	ldr	r3, [pc, #608]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026c8:	f023 0203 	bic.w	r2, r3, #3
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026d0:	4994      	ldr	r1, [pc, #592]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026d2:	4313      	orrs	r3, r2
 80026d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 0302 	and.w	r3, r3, #2
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d00a      	beq.n	80026fa <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80026e4:	4b8f      	ldr	r3, [pc, #572]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026ea:	f023 020c 	bic.w	r2, r3, #12
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026f2:	498c      	ldr	r1, [pc, #560]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026f4:	4313      	orrs	r3, r2
 80026f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 0304 	and.w	r3, r3, #4
 8002702:	2b00      	cmp	r3, #0
 8002704:	d00a      	beq.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002706:	4b87      	ldr	r3, [pc, #540]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002708:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800270c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002714:	4983      	ldr	r1, [pc, #524]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002716:	4313      	orrs	r3, r2
 8002718:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 0308 	and.w	r3, r3, #8
 8002724:	2b00      	cmp	r3, #0
 8002726:	d00a      	beq.n	800273e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002728:	4b7e      	ldr	r3, [pc, #504]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800272a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800272e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002736:	497b      	ldr	r1, [pc, #492]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002738:	4313      	orrs	r3, r2
 800273a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 0310 	and.w	r3, r3, #16
 8002746:	2b00      	cmp	r3, #0
 8002748:	d00a      	beq.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800274a:	4b76      	ldr	r3, [pc, #472]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800274c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002750:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002758:	4972      	ldr	r1, [pc, #456]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800275a:	4313      	orrs	r3, r2
 800275c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 0320 	and.w	r3, r3, #32
 8002768:	2b00      	cmp	r3, #0
 800276a:	d00a      	beq.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800276c:	4b6d      	ldr	r3, [pc, #436]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800276e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002772:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800277a:	496a      	ldr	r1, [pc, #424]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800277c:	4313      	orrs	r3, r2
 800277e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800278a:	2b00      	cmp	r3, #0
 800278c:	d00a      	beq.n	80027a4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800278e:	4b65      	ldr	r3, [pc, #404]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002790:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002794:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800279c:	4961      	ldr	r1, [pc, #388]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800279e:	4313      	orrs	r3, r2
 80027a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d00a      	beq.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80027b0:	4b5c      	ldr	r3, [pc, #368]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027b6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027be:	4959      	ldr	r1, [pc, #356]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027c0:	4313      	orrs	r3, r2
 80027c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d00a      	beq.n	80027e8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80027d2:	4b54      	ldr	r3, [pc, #336]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027d8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027e0:	4950      	ldr	r1, [pc, #320]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027e2:	4313      	orrs	r3, r2
 80027e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d00a      	beq.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80027f4:	4b4b      	ldr	r3, [pc, #300]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027fa:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002802:	4948      	ldr	r1, [pc, #288]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002804:	4313      	orrs	r3, r2
 8002806:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002812:	2b00      	cmp	r3, #0
 8002814:	d00a      	beq.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002816:	4b43      	ldr	r3, [pc, #268]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002818:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800281c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002824:	493f      	ldr	r1, [pc, #252]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002826:	4313      	orrs	r3, r2
 8002828:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002834:	2b00      	cmp	r3, #0
 8002836:	d028      	beq.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002838:	4b3a      	ldr	r3, [pc, #232]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800283a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800283e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002846:	4937      	ldr	r1, [pc, #220]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002848:	4313      	orrs	r3, r2
 800284a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002852:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002856:	d106      	bne.n	8002866 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002858:	4b32      	ldr	r3, [pc, #200]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	4a31      	ldr	r2, [pc, #196]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800285e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002862:	60d3      	str	r3, [r2, #12]
 8002864:	e011      	b.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800286a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800286e:	d10c      	bne.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	3304      	adds	r3, #4
 8002874:	2101      	movs	r1, #1
 8002876:	4618      	mov	r0, r3
 8002878:	f000 fe32 	bl	80034e0 <RCCEx_PLLSAI1_Config>
 800287c:	4603      	mov	r3, r0
 800287e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002880:	7cfb      	ldrb	r3, [r7, #19]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d001      	beq.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002886:	7cfb      	ldrb	r3, [r7, #19]
 8002888:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d028      	beq.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002896:	4b23      	ldr	r3, [pc, #140]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002898:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800289c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028a4:	491f      	ldr	r1, [pc, #124]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028a6:	4313      	orrs	r3, r2
 80028a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80028b4:	d106      	bne.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028b6:	4b1b      	ldr	r3, [pc, #108]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028b8:	68db      	ldr	r3, [r3, #12]
 80028ba:	4a1a      	ldr	r2, [pc, #104]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80028c0:	60d3      	str	r3, [r2, #12]
 80028c2:	e011      	b.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028c8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80028cc:	d10c      	bne.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	3304      	adds	r3, #4
 80028d2:	2101      	movs	r1, #1
 80028d4:	4618      	mov	r0, r3
 80028d6:	f000 fe03 	bl	80034e0 <RCCEx_PLLSAI1_Config>
 80028da:	4603      	mov	r3, r0
 80028dc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80028de:	7cfb      	ldrb	r3, [r7, #19]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d001      	beq.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80028e4:	7cfb      	ldrb	r3, [r7, #19]
 80028e6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d02b      	beq.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80028f4:	4b0b      	ldr	r3, [pc, #44]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028fa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002902:	4908      	ldr	r1, [pc, #32]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002904:	4313      	orrs	r3, r2
 8002906:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800290e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002912:	d109      	bne.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002914:	4b03      	ldr	r3, [pc, #12]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002916:	68db      	ldr	r3, [r3, #12]
 8002918:	4a02      	ldr	r2, [pc, #8]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800291a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800291e:	60d3      	str	r3, [r2, #12]
 8002920:	e014      	b.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002922:	bf00      	nop
 8002924:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800292c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002930:	d10c      	bne.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	3304      	adds	r3, #4
 8002936:	2101      	movs	r1, #1
 8002938:	4618      	mov	r0, r3
 800293a:	f000 fdd1 	bl	80034e0 <RCCEx_PLLSAI1_Config>
 800293e:	4603      	mov	r3, r0
 8002940:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002942:	7cfb      	ldrb	r3, [r7, #19]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d001      	beq.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002948:	7cfb      	ldrb	r3, [r7, #19]
 800294a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002954:	2b00      	cmp	r3, #0
 8002956:	d02f      	beq.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002958:	4b2b      	ldr	r3, [pc, #172]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800295a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800295e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002966:	4928      	ldr	r1, [pc, #160]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002968:	4313      	orrs	r3, r2
 800296a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002972:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002976:	d10d      	bne.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	3304      	adds	r3, #4
 800297c:	2102      	movs	r1, #2
 800297e:	4618      	mov	r0, r3
 8002980:	f000 fdae 	bl	80034e0 <RCCEx_PLLSAI1_Config>
 8002984:	4603      	mov	r3, r0
 8002986:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002988:	7cfb      	ldrb	r3, [r7, #19]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d014      	beq.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800298e:	7cfb      	ldrb	r3, [r7, #19]
 8002990:	74bb      	strb	r3, [r7, #18]
 8002992:	e011      	b.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002998:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800299c:	d10c      	bne.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	3320      	adds	r3, #32
 80029a2:	2102      	movs	r1, #2
 80029a4:	4618      	mov	r0, r3
 80029a6:	f000 fe8f 	bl	80036c8 <RCCEx_PLLSAI2_Config>
 80029aa:	4603      	mov	r3, r0
 80029ac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80029ae:	7cfb      	ldrb	r3, [r7, #19]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d001      	beq.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80029b4:	7cfb      	ldrb	r3, [r7, #19]
 80029b6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d00a      	beq.n	80029da <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80029c4:	4b10      	ldr	r3, [pc, #64]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80029c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029ca:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80029d2:	490d      	ldr	r1, [pc, #52]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80029d4:	4313      	orrs	r3, r2
 80029d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d00b      	beq.n	80029fe <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80029e6:	4b08      	ldr	r3, [pc, #32]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80029e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029ec:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80029f6:	4904      	ldr	r1, [pc, #16]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80029f8:	4313      	orrs	r3, r2
 80029fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80029fe:	7cbb      	ldrb	r3, [r7, #18]
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	3718      	adds	r7, #24
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}
 8002a08:	40021000 	.word	0x40021000

08002a0c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b088      	sub	sp, #32
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8002a14:	2300      	movs	r3, #0
 8002a16:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002a1e:	d13e      	bne.n	8002a9e <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8002a20:	4bbe      	ldr	r3, [pc, #760]	; (8002d1c <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 8002a22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a2a:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002a32:	d028      	beq.n	8002a86 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002a3a:	f200 853e 	bhi.w	80034ba <HAL_RCCEx_GetPeriphCLKFreq+0xaae>
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a44:	d005      	beq.n	8002a52 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a4c:	d00e      	beq.n	8002a6c <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8002a4e:	f000 bd34 	b.w	80034ba <HAL_RCCEx_GetPeriphCLKFreq+0xaae>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8002a52:	4bb2      	ldr	r3, [pc, #712]	; (8002d1c <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 8002a54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a58:	f003 0302 	and.w	r3, r3, #2
 8002a5c:	2b02      	cmp	r3, #2
 8002a5e:	f040 852e 	bne.w	80034be <HAL_RCCEx_GetPeriphCLKFreq+0xab2>
        frequency = LSE_VALUE;
 8002a62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a66:	61fb      	str	r3, [r7, #28]
      break;
 8002a68:	f000 bd29 	b.w	80034be <HAL_RCCEx_GetPeriphCLKFreq+0xab2>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8002a6c:	4bab      	ldr	r3, [pc, #684]	; (8002d1c <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 8002a6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a72:	f003 0302 	and.w	r3, r3, #2
 8002a76:	2b02      	cmp	r3, #2
 8002a78:	f040 8523 	bne.w	80034c2 <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
          frequency = LSI_VALUE;
 8002a7c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8002a80:	61fb      	str	r3, [r7, #28]
      break;
 8002a82:	f000 bd1e 	b.w	80034c2 <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002a86:	4ba5      	ldr	r3, [pc, #660]	; (8002d1c <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a8e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002a92:	f040 8518 	bne.w	80034c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        frequency = HSE_VALUE / 32U;
 8002a96:	4ba2      	ldr	r3, [pc, #648]	; (8002d20 <HAL_RCCEx_GetPeriphCLKFreq+0x314>)
 8002a98:	61fb      	str	r3, [r7, #28]
      break;
 8002a9a:	f000 bd14 	b.w	80034c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a9e:	4b9f      	ldr	r3, [pc, #636]	; (8002d1c <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 8002aa0:	68db      	ldr	r3, [r3, #12]
 8002aa2:	f003 0303 	and.w	r3, r3, #3
 8002aa6:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	2b03      	cmp	r3, #3
 8002aac:	d036      	beq.n	8002b1c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	2b03      	cmp	r3, #3
 8002ab2:	d840      	bhi.n	8002b36 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	2b01      	cmp	r3, #1
 8002ab8:	d003      	beq.n	8002ac2 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	2b02      	cmp	r3, #2
 8002abe:	d020      	beq.n	8002b02 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8002ac0:	e039      	b.n	8002b36 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8002ac2:	4b96      	ldr	r3, [pc, #600]	; (8002d1c <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 0302 	and.w	r3, r3, #2
 8002aca:	2b02      	cmp	r3, #2
 8002acc:	d116      	bne.n	8002afc <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8002ace:	4b93      	ldr	r3, [pc, #588]	; (8002d1c <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 0308 	and.w	r3, r3, #8
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d005      	beq.n	8002ae6 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8002ada:	4b90      	ldr	r3, [pc, #576]	; (8002d1c <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	091b      	lsrs	r3, r3, #4
 8002ae0:	f003 030f 	and.w	r3, r3, #15
 8002ae4:	e005      	b.n	8002af2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8002ae6:	4b8d      	ldr	r3, [pc, #564]	; (8002d1c <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 8002ae8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002aec:	0a1b      	lsrs	r3, r3, #8
 8002aee:	f003 030f 	and.w	r3, r3, #15
 8002af2:	4a8c      	ldr	r2, [pc, #560]	; (8002d24 <HAL_RCCEx_GetPeriphCLKFreq+0x318>)
 8002af4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002af8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8002afa:	e01f      	b.n	8002b3c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8002afc:	2300      	movs	r3, #0
 8002afe:	61bb      	str	r3, [r7, #24]
      break;
 8002b00:	e01c      	b.n	8002b3c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002b02:	4b86      	ldr	r3, [pc, #536]	; (8002d1c <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b0e:	d102      	bne.n	8002b16 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 8002b10:	4b85      	ldr	r3, [pc, #532]	; (8002d28 <HAL_RCCEx_GetPeriphCLKFreq+0x31c>)
 8002b12:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8002b14:	e012      	b.n	8002b3c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8002b16:	2300      	movs	r3, #0
 8002b18:	61bb      	str	r3, [r7, #24]
      break;
 8002b1a:	e00f      	b.n	8002b3c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002b1c:	4b7f      	ldr	r3, [pc, #508]	; (8002d1c <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b24:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002b28:	d102      	bne.n	8002b30 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 8002b2a:	4b80      	ldr	r3, [pc, #512]	; (8002d2c <HAL_RCCEx_GetPeriphCLKFreq+0x320>)
 8002b2c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8002b2e:	e005      	b.n	8002b3c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8002b30:	2300      	movs	r3, #0
 8002b32:	61bb      	str	r3, [r7, #24]
      break;
 8002b34:	e002      	b.n	8002b3c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 8002b36:	2300      	movs	r3, #0
 8002b38:	61bb      	str	r3, [r7, #24]
      break;
 8002b3a:	bf00      	nop
    }

    switch(PeriphClk)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002b42:	f000 80d2 	beq.w	8002cea <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002b4c:	f200 84bd 	bhi.w	80034ca <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002b56:	f000 80c8 	beq.w	8002cea <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002b60:	f200 84b3 	bhi.w	80034ca <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b6a:	f000 835b 	beq.w	8003224 <HAL_RCCEx_GetPeriphCLKFreq+0x818>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b74:	f200 84a9 	bhi.w	80034ca <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b7e:	f000 847f 	beq.w	8003480 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b88:	f200 849f 	bhi.w	80034ca <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b92:	f000 82ce 	beq.w	8003132 <HAL_RCCEx_GetPeriphCLKFreq+0x726>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b9c:	f200 8495 	bhi.w	80034ca <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ba6:	f000 80a0 	beq.w	8002cea <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bb0:	f200 848b 	bhi.w	80034ca <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bba:	f000 808f 	beq.w	8002cdc <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bc4:	f200 8481 	bhi.w	80034ca <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002bce:	d07e      	beq.n	8002cce <HAL_RCCEx_GetPeriphCLKFreq+0x2c2>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002bd6:	f200 8478 	bhi.w	80034ca <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002be0:	f000 8404 	beq.w	80033ec <HAL_RCCEx_GetPeriphCLKFreq+0x9e0>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bea:	f200 846e 	bhi.w	80034ca <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002bf4:	f000 83b0 	beq.w	8003358 <HAL_RCCEx_GetPeriphCLKFreq+0x94c>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002bfe:	f200 8464 	bhi.w	80034ca <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c08:	f000 837a 	beq.w	8003300 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c12:	f200 845a 	bhi.w	80034ca <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2b80      	cmp	r3, #128	; 0x80
 8002c1a:	f000 8345 	beq.w	80032a8 <HAL_RCCEx_GetPeriphCLKFreq+0x89c>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2b80      	cmp	r3, #128	; 0x80
 8002c22:	f200 8452 	bhi.w	80034ca <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2b20      	cmp	r3, #32
 8002c2a:	d84b      	bhi.n	8002cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	f000 844b 	beq.w	80034ca <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	3b01      	subs	r3, #1
 8002c38:	2b1f      	cmp	r3, #31
 8002c3a:	f200 8446 	bhi.w	80034ca <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 8002c3e:	a201      	add	r2, pc, #4	; (adr r2, 8002c44 <HAL_RCCEx_GetPeriphCLKFreq+0x238>)
 8002c40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c44:	08002e2f 	.word	0x08002e2f
 8002c48:	08002e9f 	.word	0x08002e9f
 8002c4c:	080034cb 	.word	0x080034cb
 8002c50:	08002f33 	.word	0x08002f33
 8002c54:	080034cb 	.word	0x080034cb
 8002c58:	080034cb 	.word	0x080034cb
 8002c5c:	080034cb 	.word	0x080034cb
 8002c60:	08002fab 	.word	0x08002fab
 8002c64:	080034cb 	.word	0x080034cb
 8002c68:	080034cb 	.word	0x080034cb
 8002c6c:	080034cb 	.word	0x080034cb
 8002c70:	080034cb 	.word	0x080034cb
 8002c74:	080034cb 	.word	0x080034cb
 8002c78:	080034cb 	.word	0x080034cb
 8002c7c:	080034cb 	.word	0x080034cb
 8002c80:	0800302f 	.word	0x0800302f
 8002c84:	080034cb 	.word	0x080034cb
 8002c88:	080034cb 	.word	0x080034cb
 8002c8c:	080034cb 	.word	0x080034cb
 8002c90:	080034cb 	.word	0x080034cb
 8002c94:	080034cb 	.word	0x080034cb
 8002c98:	080034cb 	.word	0x080034cb
 8002c9c:	080034cb 	.word	0x080034cb
 8002ca0:	080034cb 	.word	0x080034cb
 8002ca4:	080034cb 	.word	0x080034cb
 8002ca8:	080034cb 	.word	0x080034cb
 8002cac:	080034cb 	.word	0x080034cb
 8002cb0:	080034cb 	.word	0x080034cb
 8002cb4:	080034cb 	.word	0x080034cb
 8002cb8:	080034cb 	.word	0x080034cb
 8002cbc:	080034cb 	.word	0x080034cb
 8002cc0:	080030b1 	.word	0x080030b1
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2b40      	cmp	r3, #64	; 0x40
 8002cc8:	f000 82bd 	beq.w	8003246 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8002ccc:	e3fd      	b.n	80034ca <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8002cce:	69b9      	ldr	r1, [r7, #24]
 8002cd0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002cd4:	f000 fdd6 	bl	8003884 <RCCEx_GetSAIxPeriphCLKFreq>
 8002cd8:	61f8      	str	r0, [r7, #28]
      break;
 8002cda:	e3f7      	b.n	80034cc <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8002cdc:	69b9      	ldr	r1, [r7, #24]
 8002cde:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002ce2:	f000 fdcf 	bl	8003884 <RCCEx_GetSAIxPeriphCLKFreq>
 8002ce6:	61f8      	str	r0, [r7, #28]
      break;
 8002ce8:	e3f0      	b.n	80034cc <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8002cea:	4b0c      	ldr	r3, [pc, #48]	; (8002d1c <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 8002cec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cf0:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8002cf4:	613b      	str	r3, [r7, #16]
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8002cfc:	d018      	beq.n	8002d30 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8002d04:	f200 808b 	bhi.w	8002e1e <HAL_RCCEx_GetPeriphCLKFreq+0x412>
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002d0e:	d059      	beq.n	8002dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d16:	d028      	beq.n	8002d6a <HAL_RCCEx_GetPeriphCLKFreq+0x35e>
          break;
 8002d18:	e081      	b.n	8002e1e <HAL_RCCEx_GetPeriphCLKFreq+0x412>
 8002d1a:	bf00      	nop
 8002d1c:	40021000 	.word	0x40021000
 8002d20:	0003d090 	.word	0x0003d090
 8002d24:	08004c84 	.word	0x08004c84
 8002d28:	00f42400 	.word	0x00f42400
 8002d2c:	007a1200 	.word	0x007a1200
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8002d30:	4bae      	ldr	r3, [pc, #696]	; (8002fec <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 0302 	and.w	r3, r3, #2
 8002d38:	2b02      	cmp	r3, #2
 8002d3a:	d172      	bne.n	8002e22 <HAL_RCCEx_GetPeriphCLKFreq+0x416>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8002d3c:	4bab      	ldr	r3, [pc, #684]	; (8002fec <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 0308 	and.w	r3, r3, #8
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d005      	beq.n	8002d54 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
 8002d48:	4ba8      	ldr	r3, [pc, #672]	; (8002fec <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	091b      	lsrs	r3, r3, #4
 8002d4e:	f003 030f 	and.w	r3, r3, #15
 8002d52:	e005      	b.n	8002d60 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 8002d54:	4ba5      	ldr	r3, [pc, #660]	; (8002fec <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8002d56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d5a:	0a1b      	lsrs	r3, r3, #8
 8002d5c:	f003 030f 	and.w	r3, r3, #15
 8002d60:	4aa3      	ldr	r2, [pc, #652]	; (8002ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>)
 8002d62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d66:	61fb      	str	r3, [r7, #28]
          break;
 8002d68:	e05b      	b.n	8002e22 <HAL_RCCEx_GetPeriphCLKFreq+0x416>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8002d6a:	4ba0      	ldr	r3, [pc, #640]	; (8002fec <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d72:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002d76:	d156      	bne.n	8002e26 <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8002d78:	4b9c      	ldr	r3, [pc, #624]	; (8002fec <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d80:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d84:	d14f      	bne.n	8002e26 <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8002d86:	4b99      	ldr	r3, [pc, #612]	; (8002fec <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8002d88:	68db      	ldr	r3, [r3, #12]
 8002d8a:	0a1b      	lsrs	r3, r3, #8
 8002d8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d90:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8002d92:	69bb      	ldr	r3, [r7, #24]
 8002d94:	68fa      	ldr	r2, [r7, #12]
 8002d96:	fb02 f203 	mul.w	r2, r2, r3
 8002d9a:	4b94      	ldr	r3, [pc, #592]	; (8002fec <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8002d9c:	68db      	ldr	r3, [r3, #12]
 8002d9e:	091b      	lsrs	r3, r3, #4
 8002da0:	f003 0307 	and.w	r3, r3, #7
 8002da4:	3301      	adds	r3, #1
 8002da6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002daa:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8002dac:	4b8f      	ldr	r3, [pc, #572]	; (8002fec <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8002dae:	68db      	ldr	r3, [r3, #12]
 8002db0:	0d5b      	lsrs	r3, r3, #21
 8002db2:	f003 0303 	and.w	r3, r3, #3
 8002db6:	3301      	adds	r3, #1
 8002db8:	005b      	lsls	r3, r3, #1
 8002dba:	69ba      	ldr	r2, [r7, #24]
 8002dbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dc0:	61fb      	str	r3, [r7, #28]
          break;
 8002dc2:	e030      	b.n	8002e26 <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8002dc4:	4b89      	ldr	r3, [pc, #548]	; (8002fec <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002dcc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002dd0:	d12b      	bne.n	8002e2a <HAL_RCCEx_GetPeriphCLKFreq+0x41e>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8002dd2:	4b86      	ldr	r3, [pc, #536]	; (8002fec <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8002dd4:	691b      	ldr	r3, [r3, #16]
 8002dd6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002dda:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002dde:	d124      	bne.n	8002e2a <HAL_RCCEx_GetPeriphCLKFreq+0x41e>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8002de0:	4b82      	ldr	r3, [pc, #520]	; (8002fec <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8002de2:	691b      	ldr	r3, [r3, #16]
 8002de4:	0a1b      	lsrs	r3, r3, #8
 8002de6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002dea:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8002dec:	69bb      	ldr	r3, [r7, #24]
 8002dee:	68fa      	ldr	r2, [r7, #12]
 8002df0:	fb02 f203 	mul.w	r2, r2, r3
 8002df4:	4b7d      	ldr	r3, [pc, #500]	; (8002fec <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8002df6:	68db      	ldr	r3, [r3, #12]
 8002df8:	091b      	lsrs	r3, r3, #4
 8002dfa:	f003 0307 	and.w	r3, r3, #7
 8002dfe:	3301      	adds	r3, #1
 8002e00:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e04:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8002e06:	4b79      	ldr	r3, [pc, #484]	; (8002fec <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8002e08:	691b      	ldr	r3, [r3, #16]
 8002e0a:	0d5b      	lsrs	r3, r3, #21
 8002e0c:	f003 0303 	and.w	r3, r3, #3
 8002e10:	3301      	adds	r3, #1
 8002e12:	005b      	lsls	r3, r3, #1
 8002e14:	69ba      	ldr	r2, [r7, #24]
 8002e16:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e1a:	61fb      	str	r3, [r7, #28]
          break;
 8002e1c:	e005      	b.n	8002e2a <HAL_RCCEx_GetPeriphCLKFreq+0x41e>
          break;
 8002e1e:	bf00      	nop
 8002e20:	e354      	b.n	80034cc <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8002e22:	bf00      	nop
 8002e24:	e352      	b.n	80034cc <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8002e26:	bf00      	nop
 8002e28:	e350      	b.n	80034cc <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8002e2a:	bf00      	nop
        break;
 8002e2c:	e34e      	b.n	80034cc <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8002e2e:	4b6f      	ldr	r3, [pc, #444]	; (8002fec <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8002e30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e34:	f003 0303 	and.w	r3, r3, #3
 8002e38:	613b      	str	r3, [r7, #16]
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	2b03      	cmp	r3, #3
 8002e3e:	d828      	bhi.n	8002e92 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
 8002e40:	a201      	add	r2, pc, #4	; (adr r2, 8002e48 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>)
 8002e42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e46:	bf00      	nop
 8002e48:	08002e59 	.word	0x08002e59
 8002e4c:	08002e61 	.word	0x08002e61
 8002e50:	08002e69 	.word	0x08002e69
 8002e54:	08002e7d 	.word	0x08002e7d
          frequency = HAL_RCC_GetPCLK2Freq();
 8002e58:	f7ff fa78 	bl	800234c <HAL_RCC_GetPCLK2Freq>
 8002e5c:	61f8      	str	r0, [r7, #28]
          break;
 8002e5e:	e01d      	b.n	8002e9c <HAL_RCCEx_GetPeriphCLKFreq+0x490>
          frequency = HAL_RCC_GetSysClockFreq();
 8002e60:	f7ff f9c6 	bl	80021f0 <HAL_RCC_GetSysClockFreq>
 8002e64:	61f8      	str	r0, [r7, #28]
          break;
 8002e66:	e019      	b.n	8002e9c <HAL_RCCEx_GetPeriphCLKFreq+0x490>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002e68:	4b60      	ldr	r3, [pc, #384]	; (8002fec <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e74:	d10f      	bne.n	8002e96 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
            frequency = HSI_VALUE;
 8002e76:	4b5f      	ldr	r3, [pc, #380]	; (8002ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>)
 8002e78:	61fb      	str	r3, [r7, #28]
          break;
 8002e7a:	e00c      	b.n	8002e96 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8002e7c:	4b5b      	ldr	r3, [pc, #364]	; (8002fec <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8002e7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e82:	f003 0302 	and.w	r3, r3, #2
 8002e86:	2b02      	cmp	r3, #2
 8002e88:	d107      	bne.n	8002e9a <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
            frequency = LSE_VALUE;
 8002e8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e8e:	61fb      	str	r3, [r7, #28]
          break;
 8002e90:	e003      	b.n	8002e9a <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
          break;
 8002e92:	bf00      	nop
 8002e94:	e31a      	b.n	80034cc <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8002e96:	bf00      	nop
 8002e98:	e318      	b.n	80034cc <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8002e9a:	bf00      	nop
        break;
 8002e9c:	e316      	b.n	80034cc <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8002e9e:	4b53      	ldr	r3, [pc, #332]	; (8002fec <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8002ea0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ea4:	f003 030c 	and.w	r3, r3, #12
 8002ea8:	613b      	str	r3, [r7, #16]
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	2b0c      	cmp	r3, #12
 8002eae:	d83a      	bhi.n	8002f26 <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
 8002eb0:	a201      	add	r2, pc, #4	; (adr r2, 8002eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ac>)
 8002eb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eb6:	bf00      	nop
 8002eb8:	08002eed 	.word	0x08002eed
 8002ebc:	08002f27 	.word	0x08002f27
 8002ec0:	08002f27 	.word	0x08002f27
 8002ec4:	08002f27 	.word	0x08002f27
 8002ec8:	08002ef5 	.word	0x08002ef5
 8002ecc:	08002f27 	.word	0x08002f27
 8002ed0:	08002f27 	.word	0x08002f27
 8002ed4:	08002f27 	.word	0x08002f27
 8002ed8:	08002efd 	.word	0x08002efd
 8002edc:	08002f27 	.word	0x08002f27
 8002ee0:	08002f27 	.word	0x08002f27
 8002ee4:	08002f27 	.word	0x08002f27
 8002ee8:	08002f11 	.word	0x08002f11
          frequency = HAL_RCC_GetPCLK1Freq();
 8002eec:	f7ff fa18 	bl	8002320 <HAL_RCC_GetPCLK1Freq>
 8002ef0:	61f8      	str	r0, [r7, #28]
          break;
 8002ef2:	e01d      	b.n	8002f30 <HAL_RCCEx_GetPeriphCLKFreq+0x524>
          frequency = HAL_RCC_GetSysClockFreq();
 8002ef4:	f7ff f97c 	bl	80021f0 <HAL_RCC_GetSysClockFreq>
 8002ef8:	61f8      	str	r0, [r7, #28]
          break;
 8002efa:	e019      	b.n	8002f30 <HAL_RCCEx_GetPeriphCLKFreq+0x524>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002efc:	4b3b      	ldr	r3, [pc, #236]	; (8002fec <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f08:	d10f      	bne.n	8002f2a <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
            frequency = HSI_VALUE;
 8002f0a:	4b3a      	ldr	r3, [pc, #232]	; (8002ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>)
 8002f0c:	61fb      	str	r3, [r7, #28]
          break;
 8002f0e:	e00c      	b.n	8002f2a <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8002f10:	4b36      	ldr	r3, [pc, #216]	; (8002fec <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8002f12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f16:	f003 0302 	and.w	r3, r3, #2
 8002f1a:	2b02      	cmp	r3, #2
 8002f1c:	d107      	bne.n	8002f2e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
            frequency = LSE_VALUE;
 8002f1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f22:	61fb      	str	r3, [r7, #28]
          break;
 8002f24:	e003      	b.n	8002f2e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
          break;
 8002f26:	bf00      	nop
 8002f28:	e2d0      	b.n	80034cc <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8002f2a:	bf00      	nop
 8002f2c:	e2ce      	b.n	80034cc <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8002f2e:	bf00      	nop
        break;
 8002f30:	e2cc      	b.n	80034cc <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8002f32:	4b2e      	ldr	r3, [pc, #184]	; (8002fec <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8002f34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f38:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002f3c:	613b      	str	r3, [r7, #16]
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	2b30      	cmp	r3, #48	; 0x30
 8002f42:	d021      	beq.n	8002f88 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	2b30      	cmp	r3, #48	; 0x30
 8002f48:	d829      	bhi.n	8002f9e <HAL_RCCEx_GetPeriphCLKFreq+0x592>
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	2b20      	cmp	r3, #32
 8002f4e:	d011      	beq.n	8002f74 <HAL_RCCEx_GetPeriphCLKFreq+0x568>
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	2b20      	cmp	r3, #32
 8002f54:	d823      	bhi.n	8002f9e <HAL_RCCEx_GetPeriphCLKFreq+0x592>
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d003      	beq.n	8002f64 <HAL_RCCEx_GetPeriphCLKFreq+0x558>
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	2b10      	cmp	r3, #16
 8002f60:	d004      	beq.n	8002f6c <HAL_RCCEx_GetPeriphCLKFreq+0x560>
          break;
 8002f62:	e01c      	b.n	8002f9e <HAL_RCCEx_GetPeriphCLKFreq+0x592>
          frequency = HAL_RCC_GetPCLK1Freq();
 8002f64:	f7ff f9dc 	bl	8002320 <HAL_RCC_GetPCLK1Freq>
 8002f68:	61f8      	str	r0, [r7, #28]
          break;
 8002f6a:	e01d      	b.n	8002fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
          frequency = HAL_RCC_GetSysClockFreq();
 8002f6c:	f7ff f940 	bl	80021f0 <HAL_RCC_GetSysClockFreq>
 8002f70:	61f8      	str	r0, [r7, #28]
          break;
 8002f72:	e019      	b.n	8002fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002f74:	4b1d      	ldr	r3, [pc, #116]	; (8002fec <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f80:	d10f      	bne.n	8002fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
            frequency = HSI_VALUE;
 8002f82:	4b1c      	ldr	r3, [pc, #112]	; (8002ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>)
 8002f84:	61fb      	str	r3, [r7, #28]
          break;
 8002f86:	e00c      	b.n	8002fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8002f88:	4b18      	ldr	r3, [pc, #96]	; (8002fec <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8002f8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f8e:	f003 0302 	and.w	r3, r3, #2
 8002f92:	2b02      	cmp	r3, #2
 8002f94:	d107      	bne.n	8002fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x59a>
            frequency = LSE_VALUE;
 8002f96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f9a:	61fb      	str	r3, [r7, #28]
          break;
 8002f9c:	e003      	b.n	8002fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x59a>
          break;
 8002f9e:	bf00      	nop
 8002fa0:	e294      	b.n	80034cc <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8002fa2:	bf00      	nop
 8002fa4:	e292      	b.n	80034cc <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8002fa6:	bf00      	nop
        break;
 8002fa8:	e290      	b.n	80034cc <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8002faa:	4b10      	ldr	r3, [pc, #64]	; (8002fec <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8002fac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fb0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002fb4:	613b      	str	r3, [r7, #16]
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	2bc0      	cmp	r3, #192	; 0xc0
 8002fba:	d027      	beq.n	800300c <HAL_RCCEx_GetPeriphCLKFreq+0x600>
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	2bc0      	cmp	r3, #192	; 0xc0
 8002fc0:	d82f      	bhi.n	8003022 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	2b80      	cmp	r3, #128	; 0x80
 8002fc6:	d017      	beq.n	8002ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	2b80      	cmp	r3, #128	; 0x80
 8002fcc:	d829      	bhi.n	8003022 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d003      	beq.n	8002fdc <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	2b40      	cmp	r3, #64	; 0x40
 8002fd8:	d004      	beq.n	8002fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>
          break;
 8002fda:	e022      	b.n	8003022 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
          frequency = HAL_RCC_GetPCLK1Freq();
 8002fdc:	f7ff f9a0 	bl	8002320 <HAL_RCC_GetPCLK1Freq>
 8002fe0:	61f8      	str	r0, [r7, #28]
          break;
 8002fe2:	e023      	b.n	800302c <HAL_RCCEx_GetPeriphCLKFreq+0x620>
          frequency = HAL_RCC_GetSysClockFreq();
 8002fe4:	f7ff f904 	bl	80021f0 <HAL_RCC_GetSysClockFreq>
 8002fe8:	61f8      	str	r0, [r7, #28]
          break;
 8002fea:	e01f      	b.n	800302c <HAL_RCCEx_GetPeriphCLKFreq+0x620>
 8002fec:	40021000 	.word	0x40021000
 8002ff0:	08004c84 	.word	0x08004c84
 8002ff4:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002ff8:	4ba9      	ldr	r3, [pc, #676]	; (80032a0 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003000:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003004:	d10f      	bne.n	8003026 <HAL_RCCEx_GetPeriphCLKFreq+0x61a>
            frequency = HSI_VALUE;
 8003006:	4ba7      	ldr	r3, [pc, #668]	; (80032a4 <HAL_RCCEx_GetPeriphCLKFreq+0x898>)
 8003008:	61fb      	str	r3, [r7, #28]
          break;
 800300a:	e00c      	b.n	8003026 <HAL_RCCEx_GetPeriphCLKFreq+0x61a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800300c:	4ba4      	ldr	r3, [pc, #656]	; (80032a0 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 800300e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003012:	f003 0302 	and.w	r3, r3, #2
 8003016:	2b02      	cmp	r3, #2
 8003018:	d107      	bne.n	800302a <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
            frequency = LSE_VALUE;
 800301a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800301e:	61fb      	str	r3, [r7, #28]
          break;
 8003020:	e003      	b.n	800302a <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          break;
 8003022:	bf00      	nop
 8003024:	e252      	b.n	80034cc <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8003026:	bf00      	nop
 8003028:	e250      	b.n	80034cc <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 800302a:	bf00      	nop
        break;
 800302c:	e24e      	b.n	80034cc <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800302e:	4b9c      	ldr	r3, [pc, #624]	; (80032a0 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8003030:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003034:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003038:	613b      	str	r3, [r7, #16]
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003040:	d025      	beq.n	800308e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003048:	d82c      	bhi.n	80030a4 <HAL_RCCEx_GetPeriphCLKFreq+0x698>
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003050:	d013      	beq.n	800307a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003058:	d824      	bhi.n	80030a4 <HAL_RCCEx_GetPeriphCLKFreq+0x698>
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d004      	beq.n	800306a <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003066:	d004      	beq.n	8003072 <HAL_RCCEx_GetPeriphCLKFreq+0x666>
          break;
 8003068:	e01c      	b.n	80030a4 <HAL_RCCEx_GetPeriphCLKFreq+0x698>
          frequency = HAL_RCC_GetPCLK1Freq();
 800306a:	f7ff f959 	bl	8002320 <HAL_RCC_GetPCLK1Freq>
 800306e:	61f8      	str	r0, [r7, #28]
          break;
 8003070:	e01d      	b.n	80030ae <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
          frequency = HAL_RCC_GetSysClockFreq();
 8003072:	f7ff f8bd 	bl	80021f0 <HAL_RCC_GetSysClockFreq>
 8003076:	61f8      	str	r0, [r7, #28]
          break;
 8003078:	e019      	b.n	80030ae <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800307a:	4b89      	ldr	r3, [pc, #548]	; (80032a0 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003082:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003086:	d10f      	bne.n	80030a8 <HAL_RCCEx_GetPeriphCLKFreq+0x69c>
            frequency = HSI_VALUE;
 8003088:	4b86      	ldr	r3, [pc, #536]	; (80032a4 <HAL_RCCEx_GetPeriphCLKFreq+0x898>)
 800308a:	61fb      	str	r3, [r7, #28]
          break;
 800308c:	e00c      	b.n	80030a8 <HAL_RCCEx_GetPeriphCLKFreq+0x69c>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800308e:	4b84      	ldr	r3, [pc, #528]	; (80032a0 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8003090:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003094:	f003 0302 	and.w	r3, r3, #2
 8003098:	2b02      	cmp	r3, #2
 800309a:	d107      	bne.n	80030ac <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
            frequency = LSE_VALUE;
 800309c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030a0:	61fb      	str	r3, [r7, #28]
          break;
 80030a2:	e003      	b.n	80030ac <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          break;
 80030a4:	bf00      	nop
 80030a6:	e211      	b.n	80034cc <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 80030a8:	bf00      	nop
 80030aa:	e20f      	b.n	80034cc <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 80030ac:	bf00      	nop
        break;
 80030ae:	e20d      	b.n	80034cc <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80030b0:	4b7b      	ldr	r3, [pc, #492]	; (80032a0 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 80030b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030b6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80030ba:	613b      	str	r3, [r7, #16]
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80030c2:	d025      	beq.n	8003110 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80030ca:	d82c      	bhi.n	8003126 <HAL_RCCEx_GetPeriphCLKFreq+0x71a>
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030d2:	d013      	beq.n	80030fc <HAL_RCCEx_GetPeriphCLKFreq+0x6f0>
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030da:	d824      	bhi.n	8003126 <HAL_RCCEx_GetPeriphCLKFreq+0x71a>
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d004      	beq.n	80030ec <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030e8:	d004      	beq.n	80030f4 <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>
          break;
 80030ea:	e01c      	b.n	8003126 <HAL_RCCEx_GetPeriphCLKFreq+0x71a>
          frequency = HAL_RCC_GetPCLK1Freq();
 80030ec:	f7ff f918 	bl	8002320 <HAL_RCC_GetPCLK1Freq>
 80030f0:	61f8      	str	r0, [r7, #28]
          break;
 80030f2:	e01d      	b.n	8003130 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
          frequency = HAL_RCC_GetSysClockFreq();
 80030f4:	f7ff f87c 	bl	80021f0 <HAL_RCC_GetSysClockFreq>
 80030f8:	61f8      	str	r0, [r7, #28]
          break;
 80030fa:	e019      	b.n	8003130 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80030fc:	4b68      	ldr	r3, [pc, #416]	; (80032a0 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003104:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003108:	d10f      	bne.n	800312a <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
            frequency = HSI_VALUE;
 800310a:	4b66      	ldr	r3, [pc, #408]	; (80032a4 <HAL_RCCEx_GetPeriphCLKFreq+0x898>)
 800310c:	61fb      	str	r3, [r7, #28]
          break;
 800310e:	e00c      	b.n	800312a <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003110:	4b63      	ldr	r3, [pc, #396]	; (80032a0 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8003112:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003116:	f003 0302 	and.w	r3, r3, #2
 800311a:	2b02      	cmp	r3, #2
 800311c:	d107      	bne.n	800312e <HAL_RCCEx_GetPeriphCLKFreq+0x722>
            frequency = LSE_VALUE;
 800311e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003122:	61fb      	str	r3, [r7, #28]
          break;
 8003124:	e003      	b.n	800312e <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          break;
 8003126:	bf00      	nop
 8003128:	e1d0      	b.n	80034cc <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 800312a:	bf00      	nop
 800312c:	e1ce      	b.n	80034cc <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 800312e:	bf00      	nop
        break;
 8003130:	e1cc      	b.n	80034cc <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8003132:	4b5b      	ldr	r3, [pc, #364]	; (80032a0 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8003134:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003138:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800313c:	613b      	str	r3, [r7, #16]
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003144:	d00c      	beq.n	8003160 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800314c:	d864      	bhi.n	8003218 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003154:	d008      	beq.n	8003168 <HAL_RCCEx_GetPeriphCLKFreq+0x75c>
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800315c:	d030      	beq.n	80031c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>
          break;
 800315e:	e05b      	b.n	8003218 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>
          frequency = HAL_RCC_GetSysClockFreq();
 8003160:	f7ff f846 	bl	80021f0 <HAL_RCC_GetSysClockFreq>
 8003164:	61f8      	str	r0, [r7, #28]
          break;
 8003166:	e05c      	b.n	8003222 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 8003168:	4b4d      	ldr	r3, [pc, #308]	; (80032a0 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003170:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003174:	d152      	bne.n	800321c <HAL_RCCEx_GetPeriphCLKFreq+0x810>
 8003176:	4b4a      	ldr	r3, [pc, #296]	; (80032a0 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8003178:	691b      	ldr	r3, [r3, #16]
 800317a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800317e:	2b00      	cmp	r3, #0
 8003180:	d04c      	beq.n	800321c <HAL_RCCEx_GetPeriphCLKFreq+0x810>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8003182:	4b47      	ldr	r3, [pc, #284]	; (80032a0 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8003184:	691b      	ldr	r3, [r3, #16]
 8003186:	0a1b      	lsrs	r3, r3, #8
 8003188:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800318c:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800318e:	69bb      	ldr	r3, [r7, #24]
 8003190:	68fa      	ldr	r2, [r7, #12]
 8003192:	fb02 f203 	mul.w	r2, r2, r3
 8003196:	4b42      	ldr	r3, [pc, #264]	; (80032a0 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8003198:	68db      	ldr	r3, [r3, #12]
 800319a:	091b      	lsrs	r3, r3, #4
 800319c:	f003 0307 	and.w	r3, r3, #7
 80031a0:	3301      	adds	r3, #1
 80031a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80031a6:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 80031a8:	4b3d      	ldr	r3, [pc, #244]	; (80032a0 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 80031aa:	691b      	ldr	r3, [r3, #16]
 80031ac:	0e5b      	lsrs	r3, r3, #25
 80031ae:	f003 0303 	and.w	r3, r3, #3
 80031b2:	3301      	adds	r3, #1
 80031b4:	005b      	lsls	r3, r3, #1
 80031b6:	69ba      	ldr	r2, [r7, #24]
 80031b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80031bc:	61fb      	str	r3, [r7, #28]
          break;
 80031be:	e02d      	b.n	800321c <HAL_RCCEx_GetPeriphCLKFreq+0x810>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U))
 80031c0:	4b37      	ldr	r3, [pc, #220]	; (80032a0 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80031c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80031cc:	d128      	bne.n	8003220 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
 80031ce:	4b34      	ldr	r3, [pc, #208]	; (80032a0 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 80031d0:	695b      	ldr	r3, [r3, #20]
 80031d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d022      	beq.n	8003220 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 80031da:	4b31      	ldr	r3, [pc, #196]	; (80032a0 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 80031dc:	695b      	ldr	r3, [r3, #20]
 80031de:	0a1b      	lsrs	r3, r3, #8
 80031e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80031e4:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80031e6:	69bb      	ldr	r3, [r7, #24]
 80031e8:	68fa      	ldr	r2, [r7, #12]
 80031ea:	fb02 f203 	mul.w	r2, r2, r3
 80031ee:	4b2c      	ldr	r3, [pc, #176]	; (80032a0 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 80031f0:	68db      	ldr	r3, [r3, #12]
 80031f2:	091b      	lsrs	r3, r3, #4
 80031f4:	f003 0307 	and.w	r3, r3, #7
 80031f8:	3301      	adds	r3, #1
 80031fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80031fe:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 8003200:	4b27      	ldr	r3, [pc, #156]	; (80032a0 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8003202:	695b      	ldr	r3, [r3, #20]
 8003204:	0e5b      	lsrs	r3, r3, #25
 8003206:	f003 0303 	and.w	r3, r3, #3
 800320a:	3301      	adds	r3, #1
 800320c:	005b      	lsls	r3, r3, #1
 800320e:	69ba      	ldr	r2, [r7, #24]
 8003210:	fbb2 f3f3 	udiv	r3, r2, r3
 8003214:	61fb      	str	r3, [r7, #28]
          break;
 8003216:	e003      	b.n	8003220 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
          break;
 8003218:	bf00      	nop
 800321a:	e157      	b.n	80034cc <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 800321c:	bf00      	nop
 800321e:	e155      	b.n	80034cc <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8003220:	bf00      	nop
        break;
 8003222:	e153      	b.n	80034cc <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8003224:	4b1e      	ldr	r3, [pc, #120]	; (80032a0 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8003226:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800322a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800322e:	613b      	str	r3, [r7, #16]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d103      	bne.n	800323e <HAL_RCCEx_GetPeriphCLKFreq+0x832>
          frequency = HAL_RCC_GetPCLK2Freq();
 8003236:	f7ff f889 	bl	800234c <HAL_RCC_GetPCLK2Freq>
 800323a:	61f8      	str	r0, [r7, #28]
        break;
 800323c:	e146      	b.n	80034cc <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          frequency = HAL_RCC_GetSysClockFreq();
 800323e:	f7fe ffd7 	bl	80021f0 <HAL_RCC_GetSysClockFreq>
 8003242:	61f8      	str	r0, [r7, #28]
        break;
 8003244:	e142      	b.n	80034cc <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8003246:	4b16      	ldr	r3, [pc, #88]	; (80032a0 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8003248:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800324c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003250:	613b      	str	r3, [r7, #16]
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003258:	d013      	beq.n	8003282 <HAL_RCCEx_GetPeriphCLKFreq+0x876>
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003260:	d819      	bhi.n	8003296 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d004      	beq.n	8003272 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800326e:	d004      	beq.n	800327a <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
          break;
 8003270:	e011      	b.n	8003296 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003272:	f7ff f855 	bl	8002320 <HAL_RCC_GetPCLK1Freq>
 8003276:	61f8      	str	r0, [r7, #28]
          break;
 8003278:	e010      	b.n	800329c <HAL_RCCEx_GetPeriphCLKFreq+0x890>
          frequency = HAL_RCC_GetSysClockFreq();
 800327a:	f7fe ffb9 	bl	80021f0 <HAL_RCC_GetSysClockFreq>
 800327e:	61f8      	str	r0, [r7, #28]
          break;
 8003280:	e00c      	b.n	800329c <HAL_RCCEx_GetPeriphCLKFreq+0x890>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003282:	4b07      	ldr	r3, [pc, #28]	; (80032a0 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800328a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800328e:	d104      	bne.n	800329a <HAL_RCCEx_GetPeriphCLKFreq+0x88e>
            frequency = HSI_VALUE;
 8003290:	4b04      	ldr	r3, [pc, #16]	; (80032a4 <HAL_RCCEx_GetPeriphCLKFreq+0x898>)
 8003292:	61fb      	str	r3, [r7, #28]
          break;
 8003294:	e001      	b.n	800329a <HAL_RCCEx_GetPeriphCLKFreq+0x88e>
          break;
 8003296:	bf00      	nop
 8003298:	e118      	b.n	80034cc <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 800329a:	bf00      	nop
        break;
 800329c:	e116      	b.n	80034cc <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800329e:	bf00      	nop
 80032a0:	40021000 	.word	0x40021000
 80032a4:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80032a8:	4b8b      	ldr	r3, [pc, #556]	; (80034d8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80032aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032ae:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80032b2:	613b      	str	r3, [r7, #16]
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032ba:	d013      	beq.n	80032e4 <HAL_RCCEx_GetPeriphCLKFreq+0x8d8>
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032c2:	d819      	bhi.n	80032f8 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d004      	beq.n	80032d4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80032d0:	d004      	beq.n	80032dc <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>
          break;
 80032d2:	e011      	b.n	80032f8 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
          frequency = HAL_RCC_GetPCLK1Freq();
 80032d4:	f7ff f824 	bl	8002320 <HAL_RCC_GetPCLK1Freq>
 80032d8:	61f8      	str	r0, [r7, #28]
          break;
 80032da:	e010      	b.n	80032fe <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
          frequency = HAL_RCC_GetSysClockFreq();
 80032dc:	f7fe ff88 	bl	80021f0 <HAL_RCC_GetSysClockFreq>
 80032e0:	61f8      	str	r0, [r7, #28]
          break;
 80032e2:	e00c      	b.n	80032fe <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80032e4:	4b7c      	ldr	r3, [pc, #496]	; (80034d8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032f0:	d104      	bne.n	80032fc <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
            frequency = HSI_VALUE;
 80032f2:	4b7a      	ldr	r3, [pc, #488]	; (80034dc <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 80032f4:	61fb      	str	r3, [r7, #28]
          break;
 80032f6:	e001      	b.n	80032fc <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          break;
 80032f8:	bf00      	nop
 80032fa:	e0e7      	b.n	80034cc <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 80032fc:	bf00      	nop
        break;
 80032fe:	e0e5      	b.n	80034cc <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8003300:	4b75      	ldr	r3, [pc, #468]	; (80034d8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8003302:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003306:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800330a:	613b      	str	r3, [r7, #16]
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003312:	d013      	beq.n	800333c <HAL_RCCEx_GetPeriphCLKFreq+0x930>
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800331a:	d819      	bhi.n	8003350 <HAL_RCCEx_GetPeriphCLKFreq+0x944>
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d004      	beq.n	800332c <HAL_RCCEx_GetPeriphCLKFreq+0x920>
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003328:	d004      	beq.n	8003334 <HAL_RCCEx_GetPeriphCLKFreq+0x928>
          break;
 800332a:	e011      	b.n	8003350 <HAL_RCCEx_GetPeriphCLKFreq+0x944>
          frequency = HAL_RCC_GetPCLK1Freq();
 800332c:	f7fe fff8 	bl	8002320 <HAL_RCC_GetPCLK1Freq>
 8003330:	61f8      	str	r0, [r7, #28]
          break;
 8003332:	e010      	b.n	8003356 <HAL_RCCEx_GetPeriphCLKFreq+0x94a>
          frequency = HAL_RCC_GetSysClockFreq();
 8003334:	f7fe ff5c 	bl	80021f0 <HAL_RCC_GetSysClockFreq>
 8003338:	61f8      	str	r0, [r7, #28]
          break;
 800333a:	e00c      	b.n	8003356 <HAL_RCCEx_GetPeriphCLKFreq+0x94a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800333c:	4b66      	ldr	r3, [pc, #408]	; (80034d8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003344:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003348:	d104      	bne.n	8003354 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
            frequency = HSI_VALUE;
 800334a:	4b64      	ldr	r3, [pc, #400]	; (80034dc <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 800334c:	61fb      	str	r3, [r7, #28]
          break;
 800334e:	e001      	b.n	8003354 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          break;
 8003350:	bf00      	nop
 8003352:	e0bb      	b.n	80034cc <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8003354:	bf00      	nop
        break;
 8003356:	e0b9      	b.n	80034cc <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8003358:	4b5f      	ldr	r3, [pc, #380]	; (80034d8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800335a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800335e:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8003362:	613b      	str	r3, [r7, #16]
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800336a:	d02c      	beq.n	80033c6 <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003372:	d833      	bhi.n	80033dc <HAL_RCCEx_GetPeriphCLKFreq+0x9d0>
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800337a:	d01a      	beq.n	80033b2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003382:	d82b      	bhi.n	80033dc <HAL_RCCEx_GetPeriphCLKFreq+0x9d0>
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d004      	beq.n	8003394 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003390:	d004      	beq.n	800339c <HAL_RCCEx_GetPeriphCLKFreq+0x990>
          break;
 8003392:	e023      	b.n	80033dc <HAL_RCCEx_GetPeriphCLKFreq+0x9d0>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003394:	f7fe ffc4 	bl	8002320 <HAL_RCC_GetPCLK1Freq>
 8003398:	61f8      	str	r0, [r7, #28]
          break;
 800339a:	e026      	b.n	80033ea <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800339c:	4b4e      	ldr	r3, [pc, #312]	; (80034d8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800339e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033a2:	f003 0302 	and.w	r3, r3, #2
 80033a6:	2b02      	cmp	r3, #2
 80033a8:	d11a      	bne.n	80033e0 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
              frequency = LSI_VALUE;
 80033aa:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80033ae:	61fb      	str	r3, [r7, #28]
          break;
 80033b0:	e016      	b.n	80033e0 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80033b2:	4b49      	ldr	r3, [pc, #292]	; (80034d8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033be:	d111      	bne.n	80033e4 <HAL_RCCEx_GetPeriphCLKFreq+0x9d8>
            frequency = HSI_VALUE;
 80033c0:	4b46      	ldr	r3, [pc, #280]	; (80034dc <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 80033c2:	61fb      	str	r3, [r7, #28]
          break;
 80033c4:	e00e      	b.n	80033e4 <HAL_RCCEx_GetPeriphCLKFreq+0x9d8>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80033c6:	4b44      	ldr	r3, [pc, #272]	; (80034d8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80033c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033cc:	f003 0302 	and.w	r3, r3, #2
 80033d0:	2b02      	cmp	r3, #2
 80033d2:	d109      	bne.n	80033e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
            frequency = LSE_VALUE;
 80033d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033d8:	61fb      	str	r3, [r7, #28]
          break;
 80033da:	e005      	b.n	80033e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          break;
 80033dc:	bf00      	nop
 80033de:	e075      	b.n	80034cc <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 80033e0:	bf00      	nop
 80033e2:	e073      	b.n	80034cc <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 80033e4:	bf00      	nop
 80033e6:	e071      	b.n	80034cc <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 80033e8:	bf00      	nop
        break;
 80033ea:	e06f      	b.n	80034cc <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80033ec:	4b3a      	ldr	r3, [pc, #232]	; (80034d8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80033ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033f2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80033f6:	613b      	str	r3, [r7, #16]
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80033fe:	d02c      	beq.n	800345a <HAL_RCCEx_GetPeriphCLKFreq+0xa4e>
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003406:	d833      	bhi.n	8003470 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800340e:	d01a      	beq.n	8003446 <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003416:	d82b      	bhi.n	8003470 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d004      	beq.n	8003428 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003424:	d004      	beq.n	8003430 <HAL_RCCEx_GetPeriphCLKFreq+0xa24>
          break;
 8003426:	e023      	b.n	8003470 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003428:	f7fe ff7a 	bl	8002320 <HAL_RCC_GetPCLK1Freq>
 800342c:	61f8      	str	r0, [r7, #28]
          break;
 800342e:	e026      	b.n	800347e <HAL_RCCEx_GetPeriphCLKFreq+0xa72>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8003430:	4b29      	ldr	r3, [pc, #164]	; (80034d8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8003432:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003436:	f003 0302 	and.w	r3, r3, #2
 800343a:	2b02      	cmp	r3, #2
 800343c:	d11a      	bne.n	8003474 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
              frequency = LSI_VALUE;
 800343e:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8003442:	61fb      	str	r3, [r7, #28]
          break;
 8003444:	e016      	b.n	8003474 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003446:	4b24      	ldr	r3, [pc, #144]	; (80034d8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800344e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003452:	d111      	bne.n	8003478 <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
            frequency = HSI_VALUE;
 8003454:	4b21      	ldr	r3, [pc, #132]	; (80034dc <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8003456:	61fb      	str	r3, [r7, #28]
          break;
 8003458:	e00e      	b.n	8003478 <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800345a:	4b1f      	ldr	r3, [pc, #124]	; (80034d8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800345c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003460:	f003 0302 	and.w	r3, r3, #2
 8003464:	2b02      	cmp	r3, #2
 8003466:	d109      	bne.n	800347c <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
            frequency = LSE_VALUE;
 8003468:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800346c:	61fb      	str	r3, [r7, #28]
          break;
 800346e:	e005      	b.n	800347c <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
          break;
 8003470:	bf00      	nop
 8003472:	e02b      	b.n	80034cc <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8003474:	bf00      	nop
 8003476:	e029      	b.n	80034cc <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8003478:	bf00      	nop
 800347a:	e027      	b.n	80034cc <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 800347c:	bf00      	nop
        break;
 800347e:	e025      	b.n	80034cc <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 8003480:	4b15      	ldr	r3, [pc, #84]	; (80034d8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8003482:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003486:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800348a:	613b      	str	r3, [r7, #16]
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d004      	beq.n	800349c <HAL_RCCEx_GetPeriphCLKFreq+0xa90>
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003498:	d004      	beq.n	80034a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>
          break;
 800349a:	e00d      	b.n	80034b8 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          frequency = HAL_RCC_GetPCLK1Freq();
 800349c:	f7fe ff40 	bl	8002320 <HAL_RCC_GetPCLK1Freq>
 80034a0:	61f8      	str	r0, [r7, #28]
          break;
 80034a2:	e009      	b.n	80034b8 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80034a4:	4b0c      	ldr	r3, [pc, #48]	; (80034d8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034b0:	d101      	bne.n	80034b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
            frequency = HSI_VALUE;
 80034b2:	4b0a      	ldr	r3, [pc, #40]	; (80034dc <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 80034b4:	61fb      	str	r3, [r7, #28]
          break;
 80034b6:	bf00      	nop
        break;
 80034b8:	e008      	b.n	80034cc <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
      break;
 80034ba:	bf00      	nop
 80034bc:	e006      	b.n	80034cc <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
      break;
 80034be:	bf00      	nop
 80034c0:	e004      	b.n	80034cc <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
      break;
 80034c2:	bf00      	nop
 80034c4:	e002      	b.n	80034cc <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
      break;
 80034c6:	bf00      	nop
 80034c8:	e000      	b.n	80034cc <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
      break;
 80034ca:	bf00      	nop
    }
  }

  return(frequency);
 80034cc:	69fb      	ldr	r3, [r7, #28]
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	3720      	adds	r7, #32
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}
 80034d6:	bf00      	nop
 80034d8:	40021000 	.word	0x40021000
 80034dc:	00f42400 	.word	0x00f42400

080034e0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b084      	sub	sp, #16
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
 80034e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80034ea:	2300      	movs	r3, #0
 80034ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80034ee:	4b75      	ldr	r3, [pc, #468]	; (80036c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034f0:	68db      	ldr	r3, [r3, #12]
 80034f2:	f003 0303 	and.w	r3, r3, #3
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d018      	beq.n	800352c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80034fa:	4b72      	ldr	r3, [pc, #456]	; (80036c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034fc:	68db      	ldr	r3, [r3, #12]
 80034fe:	f003 0203 	and.w	r2, r3, #3
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	429a      	cmp	r2, r3
 8003508:	d10d      	bne.n	8003526 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
       ||
 800350e:	2b00      	cmp	r3, #0
 8003510:	d009      	beq.n	8003526 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003512:	4b6c      	ldr	r3, [pc, #432]	; (80036c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003514:	68db      	ldr	r3, [r3, #12]
 8003516:	091b      	lsrs	r3, r3, #4
 8003518:	f003 0307 	and.w	r3, r3, #7
 800351c:	1c5a      	adds	r2, r3, #1
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	685b      	ldr	r3, [r3, #4]
       ||
 8003522:	429a      	cmp	r2, r3
 8003524:	d047      	beq.n	80035b6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	73fb      	strb	r3, [r7, #15]
 800352a:	e044      	b.n	80035b6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	2b03      	cmp	r3, #3
 8003532:	d018      	beq.n	8003566 <RCCEx_PLLSAI1_Config+0x86>
 8003534:	2b03      	cmp	r3, #3
 8003536:	d825      	bhi.n	8003584 <RCCEx_PLLSAI1_Config+0xa4>
 8003538:	2b01      	cmp	r3, #1
 800353a:	d002      	beq.n	8003542 <RCCEx_PLLSAI1_Config+0x62>
 800353c:	2b02      	cmp	r3, #2
 800353e:	d009      	beq.n	8003554 <RCCEx_PLLSAI1_Config+0x74>
 8003540:	e020      	b.n	8003584 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003542:	4b60      	ldr	r3, [pc, #384]	; (80036c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 0302 	and.w	r3, r3, #2
 800354a:	2b00      	cmp	r3, #0
 800354c:	d11d      	bne.n	800358a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003552:	e01a      	b.n	800358a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003554:	4b5b      	ldr	r3, [pc, #364]	; (80036c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800355c:	2b00      	cmp	r3, #0
 800355e:	d116      	bne.n	800358e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003564:	e013      	b.n	800358e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003566:	4b57      	ldr	r3, [pc, #348]	; (80036c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800356e:	2b00      	cmp	r3, #0
 8003570:	d10f      	bne.n	8003592 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003572:	4b54      	ldr	r3, [pc, #336]	; (80036c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800357a:	2b00      	cmp	r3, #0
 800357c:	d109      	bne.n	8003592 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003582:	e006      	b.n	8003592 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	73fb      	strb	r3, [r7, #15]
      break;
 8003588:	e004      	b.n	8003594 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800358a:	bf00      	nop
 800358c:	e002      	b.n	8003594 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800358e:	bf00      	nop
 8003590:	e000      	b.n	8003594 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003592:	bf00      	nop
    }

    if(status == HAL_OK)
 8003594:	7bfb      	ldrb	r3, [r7, #15]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d10d      	bne.n	80035b6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800359a:	4b4a      	ldr	r3, [pc, #296]	; (80036c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800359c:	68db      	ldr	r3, [r3, #12]
 800359e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6819      	ldr	r1, [r3, #0]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	3b01      	subs	r3, #1
 80035ac:	011b      	lsls	r3, r3, #4
 80035ae:	430b      	orrs	r3, r1
 80035b0:	4944      	ldr	r1, [pc, #272]	; (80036c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035b2:	4313      	orrs	r3, r2
 80035b4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80035b6:	7bfb      	ldrb	r3, [r7, #15]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d17d      	bne.n	80036b8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80035bc:	4b41      	ldr	r3, [pc, #260]	; (80036c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a40      	ldr	r2, [pc, #256]	; (80036c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035c2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80035c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035c8:	f7fd fc0e 	bl	8000de8 <HAL_GetTick>
 80035cc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80035ce:	e009      	b.n	80035e4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80035d0:	f7fd fc0a 	bl	8000de8 <HAL_GetTick>
 80035d4:	4602      	mov	r2, r0
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	1ad3      	subs	r3, r2, r3
 80035da:	2b02      	cmp	r3, #2
 80035dc:	d902      	bls.n	80035e4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80035de:	2303      	movs	r3, #3
 80035e0:	73fb      	strb	r3, [r7, #15]
        break;
 80035e2:	e005      	b.n	80035f0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80035e4:	4b37      	ldr	r3, [pc, #220]	; (80036c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d1ef      	bne.n	80035d0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80035f0:	7bfb      	ldrb	r3, [r7, #15]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d160      	bne.n	80036b8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d111      	bne.n	8003620 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80035fc:	4b31      	ldr	r3, [pc, #196]	; (80036c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035fe:	691b      	ldr	r3, [r3, #16]
 8003600:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003604:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003608:	687a      	ldr	r2, [r7, #4]
 800360a:	6892      	ldr	r2, [r2, #8]
 800360c:	0211      	lsls	r1, r2, #8
 800360e:	687a      	ldr	r2, [r7, #4]
 8003610:	68d2      	ldr	r2, [r2, #12]
 8003612:	0912      	lsrs	r2, r2, #4
 8003614:	0452      	lsls	r2, r2, #17
 8003616:	430a      	orrs	r2, r1
 8003618:	492a      	ldr	r1, [pc, #168]	; (80036c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800361a:	4313      	orrs	r3, r2
 800361c:	610b      	str	r3, [r1, #16]
 800361e:	e027      	b.n	8003670 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	2b01      	cmp	r3, #1
 8003624:	d112      	bne.n	800364c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003626:	4b27      	ldr	r3, [pc, #156]	; (80036c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003628:	691b      	ldr	r3, [r3, #16]
 800362a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800362e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003632:	687a      	ldr	r2, [r7, #4]
 8003634:	6892      	ldr	r2, [r2, #8]
 8003636:	0211      	lsls	r1, r2, #8
 8003638:	687a      	ldr	r2, [r7, #4]
 800363a:	6912      	ldr	r2, [r2, #16]
 800363c:	0852      	lsrs	r2, r2, #1
 800363e:	3a01      	subs	r2, #1
 8003640:	0552      	lsls	r2, r2, #21
 8003642:	430a      	orrs	r2, r1
 8003644:	491f      	ldr	r1, [pc, #124]	; (80036c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003646:	4313      	orrs	r3, r2
 8003648:	610b      	str	r3, [r1, #16]
 800364a:	e011      	b.n	8003670 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800364c:	4b1d      	ldr	r3, [pc, #116]	; (80036c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800364e:	691b      	ldr	r3, [r3, #16]
 8003650:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003654:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003658:	687a      	ldr	r2, [r7, #4]
 800365a:	6892      	ldr	r2, [r2, #8]
 800365c:	0211      	lsls	r1, r2, #8
 800365e:	687a      	ldr	r2, [r7, #4]
 8003660:	6952      	ldr	r2, [r2, #20]
 8003662:	0852      	lsrs	r2, r2, #1
 8003664:	3a01      	subs	r2, #1
 8003666:	0652      	lsls	r2, r2, #25
 8003668:	430a      	orrs	r2, r1
 800366a:	4916      	ldr	r1, [pc, #88]	; (80036c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800366c:	4313      	orrs	r3, r2
 800366e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003670:	4b14      	ldr	r3, [pc, #80]	; (80036c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a13      	ldr	r2, [pc, #76]	; (80036c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003676:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800367a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800367c:	f7fd fbb4 	bl	8000de8 <HAL_GetTick>
 8003680:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003682:	e009      	b.n	8003698 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003684:	f7fd fbb0 	bl	8000de8 <HAL_GetTick>
 8003688:	4602      	mov	r2, r0
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	1ad3      	subs	r3, r2, r3
 800368e:	2b02      	cmp	r3, #2
 8003690:	d902      	bls.n	8003698 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003692:	2303      	movs	r3, #3
 8003694:	73fb      	strb	r3, [r7, #15]
          break;
 8003696:	e005      	b.n	80036a4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003698:	4b0a      	ldr	r3, [pc, #40]	; (80036c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d0ef      	beq.n	8003684 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80036a4:	7bfb      	ldrb	r3, [r7, #15]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d106      	bne.n	80036b8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80036aa:	4b06      	ldr	r3, [pc, #24]	; (80036c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036ac:	691a      	ldr	r2, [r3, #16]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	699b      	ldr	r3, [r3, #24]
 80036b2:	4904      	ldr	r1, [pc, #16]	; (80036c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036b4:	4313      	orrs	r3, r2
 80036b6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80036b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	3710      	adds	r7, #16
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	bf00      	nop
 80036c4:	40021000 	.word	0x40021000

080036c8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b084      	sub	sp, #16
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
 80036d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80036d2:	2300      	movs	r3, #0
 80036d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80036d6:	4b6a      	ldr	r3, [pc, #424]	; (8003880 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036d8:	68db      	ldr	r3, [r3, #12]
 80036da:	f003 0303 	and.w	r3, r3, #3
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d018      	beq.n	8003714 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80036e2:	4b67      	ldr	r3, [pc, #412]	; (8003880 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036e4:	68db      	ldr	r3, [r3, #12]
 80036e6:	f003 0203 	and.w	r2, r3, #3
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	429a      	cmp	r2, r3
 80036f0:	d10d      	bne.n	800370e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
       ||
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d009      	beq.n	800370e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80036fa:	4b61      	ldr	r3, [pc, #388]	; (8003880 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036fc:	68db      	ldr	r3, [r3, #12]
 80036fe:	091b      	lsrs	r3, r3, #4
 8003700:	f003 0307 	and.w	r3, r3, #7
 8003704:	1c5a      	adds	r2, r3, #1
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	685b      	ldr	r3, [r3, #4]
       ||
 800370a:	429a      	cmp	r2, r3
 800370c:	d047      	beq.n	800379e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	73fb      	strb	r3, [r7, #15]
 8003712:	e044      	b.n	800379e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	2b03      	cmp	r3, #3
 800371a:	d018      	beq.n	800374e <RCCEx_PLLSAI2_Config+0x86>
 800371c:	2b03      	cmp	r3, #3
 800371e:	d825      	bhi.n	800376c <RCCEx_PLLSAI2_Config+0xa4>
 8003720:	2b01      	cmp	r3, #1
 8003722:	d002      	beq.n	800372a <RCCEx_PLLSAI2_Config+0x62>
 8003724:	2b02      	cmp	r3, #2
 8003726:	d009      	beq.n	800373c <RCCEx_PLLSAI2_Config+0x74>
 8003728:	e020      	b.n	800376c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800372a:	4b55      	ldr	r3, [pc, #340]	; (8003880 <RCCEx_PLLSAI2_Config+0x1b8>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 0302 	and.w	r3, r3, #2
 8003732:	2b00      	cmp	r3, #0
 8003734:	d11d      	bne.n	8003772 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800373a:	e01a      	b.n	8003772 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800373c:	4b50      	ldr	r3, [pc, #320]	; (8003880 <RCCEx_PLLSAI2_Config+0x1b8>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003744:	2b00      	cmp	r3, #0
 8003746:	d116      	bne.n	8003776 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800374c:	e013      	b.n	8003776 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800374e:	4b4c      	ldr	r3, [pc, #304]	; (8003880 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003756:	2b00      	cmp	r3, #0
 8003758:	d10f      	bne.n	800377a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800375a:	4b49      	ldr	r3, [pc, #292]	; (8003880 <RCCEx_PLLSAI2_Config+0x1b8>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003762:	2b00      	cmp	r3, #0
 8003764:	d109      	bne.n	800377a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800376a:	e006      	b.n	800377a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	73fb      	strb	r3, [r7, #15]
      break;
 8003770:	e004      	b.n	800377c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003772:	bf00      	nop
 8003774:	e002      	b.n	800377c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003776:	bf00      	nop
 8003778:	e000      	b.n	800377c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800377a:	bf00      	nop
    }

    if(status == HAL_OK)
 800377c:	7bfb      	ldrb	r3, [r7, #15]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d10d      	bne.n	800379e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003782:	4b3f      	ldr	r3, [pc, #252]	; (8003880 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003784:	68db      	ldr	r3, [r3, #12]
 8003786:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6819      	ldr	r1, [r3, #0]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	3b01      	subs	r3, #1
 8003794:	011b      	lsls	r3, r3, #4
 8003796:	430b      	orrs	r3, r1
 8003798:	4939      	ldr	r1, [pc, #228]	; (8003880 <RCCEx_PLLSAI2_Config+0x1b8>)
 800379a:	4313      	orrs	r3, r2
 800379c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800379e:	7bfb      	ldrb	r3, [r7, #15]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d167      	bne.n	8003874 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80037a4:	4b36      	ldr	r3, [pc, #216]	; (8003880 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a35      	ldr	r2, [pc, #212]	; (8003880 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037b0:	f7fd fb1a 	bl	8000de8 <HAL_GetTick>
 80037b4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80037b6:	e009      	b.n	80037cc <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80037b8:	f7fd fb16 	bl	8000de8 <HAL_GetTick>
 80037bc:	4602      	mov	r2, r0
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	1ad3      	subs	r3, r2, r3
 80037c2:	2b02      	cmp	r3, #2
 80037c4:	d902      	bls.n	80037cc <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80037c6:	2303      	movs	r3, #3
 80037c8:	73fb      	strb	r3, [r7, #15]
        break;
 80037ca:	e005      	b.n	80037d8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80037cc:	4b2c      	ldr	r3, [pc, #176]	; (8003880 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d1ef      	bne.n	80037b8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80037d8:	7bfb      	ldrb	r3, [r7, #15]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d14a      	bne.n	8003874 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d111      	bne.n	8003808 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80037e4:	4b26      	ldr	r3, [pc, #152]	; (8003880 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037e6:	695b      	ldr	r3, [r3, #20]
 80037e8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80037ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037f0:	687a      	ldr	r2, [r7, #4]
 80037f2:	6892      	ldr	r2, [r2, #8]
 80037f4:	0211      	lsls	r1, r2, #8
 80037f6:	687a      	ldr	r2, [r7, #4]
 80037f8:	68d2      	ldr	r2, [r2, #12]
 80037fa:	0912      	lsrs	r2, r2, #4
 80037fc:	0452      	lsls	r2, r2, #17
 80037fe:	430a      	orrs	r2, r1
 8003800:	491f      	ldr	r1, [pc, #124]	; (8003880 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003802:	4313      	orrs	r3, r2
 8003804:	614b      	str	r3, [r1, #20]
 8003806:	e011      	b.n	800382c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003808:	4b1d      	ldr	r3, [pc, #116]	; (8003880 <RCCEx_PLLSAI2_Config+0x1b8>)
 800380a:	695b      	ldr	r3, [r3, #20]
 800380c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003810:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003814:	687a      	ldr	r2, [r7, #4]
 8003816:	6892      	ldr	r2, [r2, #8]
 8003818:	0211      	lsls	r1, r2, #8
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	6912      	ldr	r2, [r2, #16]
 800381e:	0852      	lsrs	r2, r2, #1
 8003820:	3a01      	subs	r2, #1
 8003822:	0652      	lsls	r2, r2, #25
 8003824:	430a      	orrs	r2, r1
 8003826:	4916      	ldr	r1, [pc, #88]	; (8003880 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003828:	4313      	orrs	r3, r2
 800382a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800382c:	4b14      	ldr	r3, [pc, #80]	; (8003880 <RCCEx_PLLSAI2_Config+0x1b8>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a13      	ldr	r2, [pc, #76]	; (8003880 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003832:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003836:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003838:	f7fd fad6 	bl	8000de8 <HAL_GetTick>
 800383c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800383e:	e009      	b.n	8003854 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003840:	f7fd fad2 	bl	8000de8 <HAL_GetTick>
 8003844:	4602      	mov	r2, r0
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	1ad3      	subs	r3, r2, r3
 800384a:	2b02      	cmp	r3, #2
 800384c:	d902      	bls.n	8003854 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800384e:	2303      	movs	r3, #3
 8003850:	73fb      	strb	r3, [r7, #15]
          break;
 8003852:	e005      	b.n	8003860 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003854:	4b0a      	ldr	r3, [pc, #40]	; (8003880 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800385c:	2b00      	cmp	r3, #0
 800385e:	d0ef      	beq.n	8003840 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003860:	7bfb      	ldrb	r3, [r7, #15]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d106      	bne.n	8003874 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003866:	4b06      	ldr	r3, [pc, #24]	; (8003880 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003868:	695a      	ldr	r2, [r3, #20]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	695b      	ldr	r3, [r3, #20]
 800386e:	4904      	ldr	r1, [pc, #16]	; (8003880 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003870:	4313      	orrs	r3, r2
 8003872:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003874:	7bfb      	ldrb	r3, [r7, #15]
}
 8003876:	4618      	mov	r0, r3
 8003878:	3710      	adds	r7, #16
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}
 800387e:	bf00      	nop
 8003880:	40021000 	.word	0x40021000

08003884 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8003884:	b480      	push	{r7}
 8003886:	b089      	sub	sp, #36	; 0x24
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
 800388c:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 800388e:	2300      	movs	r3, #0
 8003890:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 8003892:	2300      	movs	r3, #0
 8003894:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 8003896:	2300      	movs	r3, #0
 8003898:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038a0:	d10c      	bne.n	80038bc <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80038a2:	4b6e      	ldr	r3, [pc, #440]	; (8003a5c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80038a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038a8:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80038ac:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 80038ae:	69bb      	ldr	r3, [r7, #24]
 80038b0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80038b4:	d112      	bne.n	80038dc <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80038b6:	4b6a      	ldr	r3, [pc, #424]	; (8003a60 <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 80038b8:	61fb      	str	r3, [r7, #28]
 80038ba:	e00f      	b.n	80038dc <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038c2:	d10b      	bne.n	80038dc <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 80038c4:	4b65      	ldr	r3, [pc, #404]	; (8003a5c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80038c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038ca:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 80038ce:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 80038d0:	69bb      	ldr	r3, [r7, #24]
 80038d2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80038d6:	d101      	bne.n	80038dc <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 80038d8:	4b61      	ldr	r3, [pc, #388]	; (8003a60 <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 80038da:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 80038dc:	69fb      	ldr	r3, [r7, #28]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	f040 80b4 	bne.w	8003a4c <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
  {
    pllvco = InputFrequency;
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 80038e8:	69bb      	ldr	r3, [r7, #24]
 80038ea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80038ee:	d003      	beq.n	80038f8 <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 80038f0:	69bb      	ldr	r3, [r7, #24]
 80038f2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80038f6:	d135      	bne.n	8003964 <RCCEx_GetSAIxPeriphCLKFreq+0xe0>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80038f8:	4b58      	ldr	r3, [pc, #352]	; (8003a5c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003900:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003904:	f040 80a1 	bne.w	8003a4a <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
 8003908:	4b54      	ldr	r3, [pc, #336]	; (8003a5c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800390a:	68db      	ldr	r3, [r3, #12]
 800390c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003910:	2b00      	cmp	r3, #0
 8003912:	f000 809a 	beq.w	8003a4a <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003916:	4b51      	ldr	r3, [pc, #324]	; (8003a5c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8003918:	68db      	ldr	r3, [r3, #12]
 800391a:	091b      	lsrs	r3, r3, #4
 800391c:	f003 0307 	and.w	r3, r3, #7
 8003920:	3301      	adds	r3, #1
 8003922:	693a      	ldr	r2, [r7, #16]
 8003924:	fbb2 f3f3 	udiv	r3, r2, r3
 8003928:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800392a:	4b4c      	ldr	r3, [pc, #304]	; (8003a5c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800392c:	68db      	ldr	r3, [r3, #12]
 800392e:	0a1b      	lsrs	r3, r3, #8
 8003930:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003934:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
#endif
        if(pllp == 0U)
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d10a      	bne.n	8003952 <RCCEx_GetSAIxPeriphCLKFreq+0xce>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 800393c:	4b47      	ldr	r3, [pc, #284]	; (8003a5c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800393e:	68db      	ldr	r3, [r3, #12]
 8003940:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003944:	2b00      	cmp	r3, #0
 8003946:	d002      	beq.n	800394e <RCCEx_GetSAIxPeriphCLKFreq+0xca>
          {
            pllp = 17U;
 8003948:	2311      	movs	r3, #17
 800394a:	617b      	str	r3, [r7, #20]
 800394c:	e001      	b.n	8003952 <RCCEx_GetSAIxPeriphCLKFreq+0xce>
          }
          else
          {
            pllp = 7U;
 800394e:	2307      	movs	r3, #7
 8003950:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	68fa      	ldr	r2, [r7, #12]
 8003956:	fb02 f203 	mul.w	r2, r2, r3
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003960:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8003962:	e072      	b.n	8003a4a <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8003964:	69bb      	ldr	r3, [r7, #24]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d133      	bne.n	80039d2 <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 800396a:	4b3c      	ldr	r3, [pc, #240]	; (8003a5c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003972:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003976:	d169      	bne.n	8003a4c <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 8003978:	4b38      	ldr	r3, [pc, #224]	; (8003a5c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800397a:	691b      	ldr	r3, [r3, #16]
 800397c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003980:	2b00      	cmp	r3, #0
 8003982:	d063      	beq.n	8003a4c <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003984:	4b35      	ldr	r3, [pc, #212]	; (8003a5c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8003986:	68db      	ldr	r3, [r3, #12]
 8003988:	091b      	lsrs	r3, r3, #4
 800398a:	f003 0307 	and.w	r3, r3, #7
 800398e:	3301      	adds	r3, #1
 8003990:	693a      	ldr	r2, [r7, #16]
 8003992:	fbb2 f3f3 	udiv	r3, r2, r3
 8003996:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8003998:	4b30      	ldr	r3, [pc, #192]	; (8003a5c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800399a:	691b      	ldr	r3, [r3, #16]
 800399c:	0a1b      	lsrs	r3, r3, #8
 800399e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039a2:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
#endif
        if(pllp == 0U)
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d10a      	bne.n	80039c0 <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 80039aa:	4b2c      	ldr	r3, [pc, #176]	; (8003a5c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80039ac:	691b      	ldr	r3, [r3, #16]
 80039ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d002      	beq.n	80039bc <RCCEx_GetSAIxPeriphCLKFreq+0x138>
          {
            pllp = 17U;
 80039b6:	2311      	movs	r3, #17
 80039b8:	617b      	str	r3, [r7, #20]
 80039ba:	e001      	b.n	80039c0 <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
          }
          else
          {
            pllp = 7U;
 80039bc:	2307      	movs	r3, #7
 80039be:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	68fa      	ldr	r2, [r7, #12]
 80039c4:	fb02 f203 	mul.w	r2, r2, r3
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80039ce:	61fb      	str	r3, [r7, #28]
 80039d0:	e03c      	b.n	8003a4c <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 80039d2:	69bb      	ldr	r3, [r7, #24]
 80039d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039d8:	d003      	beq.n	80039e2 <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
 80039da:	69bb      	ldr	r3, [r7, #24]
 80039dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80039e0:	d134      	bne.n	8003a4c <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 80039e2:	4b1e      	ldr	r3, [pc, #120]	; (8003a5c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80039ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039ee:	d12d      	bne.n	8003a4c <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 80039f0:	4b1a      	ldr	r3, [pc, #104]	; (8003a5c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80039f2:	695b      	ldr	r3, [r3, #20]
 80039f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d027      	beq.n	8003a4c <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80039fc:	4b17      	ldr	r3, [pc, #92]	; (8003a5c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80039fe:	68db      	ldr	r3, [r3, #12]
 8003a00:	091b      	lsrs	r3, r3, #4
 8003a02:	f003 0307 	and.w	r3, r3, #7
 8003a06:	3301      	adds	r3, #1
 8003a08:	693a      	ldr	r2, [r7, #16]
 8003a0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a0e:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8003a10:	4b12      	ldr	r3, [pc, #72]	; (8003a5c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8003a12:	695b      	ldr	r3, [r3, #20]
 8003a14:	0a1b      	lsrs	r3, r3, #8
 8003a16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a1a:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
#endif
        if(pllp == 0U)
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d10a      	bne.n	8003a38 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 8003a22:	4b0e      	ldr	r3, [pc, #56]	; (8003a5c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8003a24:	695b      	ldr	r3, [r3, #20]
 8003a26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d002      	beq.n	8003a34 <RCCEx_GetSAIxPeriphCLKFreq+0x1b0>
          {
            pllp = 17U;
 8003a2e:	2311      	movs	r3, #17
 8003a30:	617b      	str	r3, [r7, #20]
 8003a32:	e001      	b.n	8003a38 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
          }
          else
          {
            pllp = 7U;
 8003a34:	2307      	movs	r3, #7
 8003a36:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	68fa      	ldr	r2, [r7, #12]
 8003a3c:	fb02 f203 	mul.w	r2, r2, r3
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a46:	61fb      	str	r3, [r7, #28]
 8003a48:	e000      	b.n	8003a4c <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8003a4a:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 8003a4c:	69fb      	ldr	r3, [r7, #28]
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	3724      	adds	r7, #36	; 0x24
 8003a52:	46bd      	mov	sp, r7
 8003a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a58:	4770      	bx	lr
 8003a5a:	bf00      	nop
 8003a5c:	40021000 	.word	0x40021000
 8003a60:	001fff68 	.word	0x001fff68

08003a64 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b086      	sub	sp, #24
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	60f8      	str	r0, [r7, #12]
 8003a6c:	60b9      	str	r1, [r7, #8]
 8003a6e:	607a      	str	r2, [r7, #4]
 8003a70:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	2b02      	cmp	r3, #2
 8003a76:	d904      	bls.n	8003a82 <HAL_SAI_InitProtocol+0x1e>
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	3b03      	subs	r3, #3
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d812      	bhi.n	8003aa6 <HAL_SAI_InitProtocol+0x42>
 8003a80:	e008      	b.n	8003a94 <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	687a      	ldr	r2, [r7, #4]
 8003a86:	68b9      	ldr	r1, [r7, #8]
 8003a88:	68f8      	ldr	r0, [r7, #12]
 8003a8a:	f000 fa6b 	bl	8003f64 <SAI_InitI2S>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	75fb      	strb	r3, [r7, #23]
      break;
 8003a92:	e00b      	b.n	8003aac <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	687a      	ldr	r2, [r7, #4]
 8003a98:	68b9      	ldr	r1, [r7, #8]
 8003a9a:	68f8      	ldr	r0, [r7, #12]
 8003a9c:	f000 fb14 	bl	80040c8 <SAI_InitPCM>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	75fb      	strb	r3, [r7, #23]
      break;
 8003aa4:	e002      	b.n	8003aac <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	75fb      	strb	r3, [r7, #23]
      break;
 8003aaa:	bf00      	nop
  }

  if (status == HAL_OK)
 8003aac:	7dfb      	ldrb	r3, [r7, #23]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d104      	bne.n	8003abc <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 8003ab2:	68f8      	ldr	r0, [r7, #12]
 8003ab4:	f000 f808 	bl	8003ac8 <HAL_SAI_Init>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003abc:	7dfb      	ldrb	r3, [r7, #23]
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3718      	adds	r7, #24
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}
	...

08003ac8 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b088      	sub	sp, #32
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d101      	bne.n	8003ada <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e155      	b.n	8003d86 <HAL_SAI_Init+0x2be>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8003ae0:	b2db      	uxtb	r3, r3
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d106      	bne.n	8003af4 <HAL_SAI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	f7fc fe5e 	bl	80007b0 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8003af4:	6878      	ldr	r0, [r7, #4]
 8003af6:	f000 fba1 	bl	800423c <SAI_Disable>
 8003afa:	4603      	mov	r3, r0
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d001      	beq.n	8003b04 <HAL_SAI_Init+0x3c>
  {
    return HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	e140      	b.n	8003d86 <HAL_SAI_Init+0x2be>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2202      	movs	r2, #2
 8003b08:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	68db      	ldr	r3, [r3, #12]
 8003b10:	2b02      	cmp	r3, #2
 8003b12:	d00c      	beq.n	8003b2e <HAL_SAI_Init+0x66>
 8003b14:	2b02      	cmp	r3, #2
 8003b16:	d80d      	bhi.n	8003b34 <HAL_SAI_Init+0x6c>
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d002      	beq.n	8003b22 <HAL_SAI_Init+0x5a>
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d003      	beq.n	8003b28 <HAL_SAI_Init+0x60>
 8003b20:	e008      	b.n	8003b34 <HAL_SAI_Init+0x6c>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8003b22:	2300      	movs	r3, #0
 8003b24:	61fb      	str	r3, [r7, #28]
      break;
 8003b26:	e008      	b.n	8003b3a <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8003b28:	2310      	movs	r3, #16
 8003b2a:	61fb      	str	r3, [r7, #28]
      break;
 8003b2c:	e005      	b.n	8003b3a <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8003b2e:	2320      	movs	r3, #32
 8003b30:	61fb      	str	r3, [r7, #28]
      break;
 8003b32:	e002      	b.n	8003b3a <HAL_SAI_Init+0x72>
    default :
      tmpregisterGCR = 0;
 8003b34:	2300      	movs	r3, #0
 8003b36:	61fb      	str	r3, [r7, #28]
      break;
 8003b38:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	2b03      	cmp	r3, #3
 8003b40:	d81d      	bhi.n	8003b7e <HAL_SAI_Init+0xb6>
 8003b42:	a201      	add	r2, pc, #4	; (adr r2, 8003b48 <HAL_SAI_Init+0x80>)
 8003b44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b48:	08003b59 	.word	0x08003b59
 8003b4c:	08003b5f 	.word	0x08003b5f
 8003b50:	08003b67 	.word	0x08003b67
 8003b54:	08003b6f 	.word	0x08003b6f
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	617b      	str	r3, [r7, #20]
      break;
 8003b5c:	e012      	b.n	8003b84 <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8003b5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b62:	617b      	str	r3, [r7, #20]
      break;
 8003b64:	e00e      	b.n	8003b84 <HAL_SAI_Init+0xbc>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8003b66:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003b6a:	617b      	str	r3, [r7, #20]
      break;
 8003b6c:	e00a      	b.n	8003b84 <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8003b6e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003b72:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8003b74:	69fb      	ldr	r3, [r7, #28]
 8003b76:	f043 0301 	orr.w	r3, r3, #1
 8003b7a:	61fb      	str	r3, [r7, #28]
      break;
 8003b7c:	e002      	b.n	8003b84 <HAL_SAI_Init+0xbc>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	617b      	str	r3, [r7, #20]
      break;
 8003b82:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a81      	ldr	r2, [pc, #516]	; (8003d90 <HAL_SAI_Init+0x2c8>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d004      	beq.n	8003b98 <HAL_SAI_Init+0xd0>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a80      	ldr	r2, [pc, #512]	; (8003d94 <HAL_SAI_Init+0x2cc>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d103      	bne.n	8003ba0 <HAL_SAI_Init+0xd8>
  {
    SAI1->GCR = tmpregisterGCR;
 8003b98:	4a7f      	ldr	r2, [pc, #508]	; (8003d98 <HAL_SAI_Init+0x2d0>)
 8003b9a:	69fb      	ldr	r3, [r7, #28]
 8003b9c:	6013      	str	r3, [r2, #0]
 8003b9e:	e002      	b.n	8003ba6 <HAL_SAI_Init+0xde>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8003ba0:	4a7e      	ldr	r2, [pc, #504]	; (8003d9c <HAL_SAI_Init+0x2d4>)
 8003ba2:	69fb      	ldr	r3, [r7, #28]
 8003ba4:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	69db      	ldr	r3, [r3, #28]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d041      	beq.n	8003c32 <HAL_SAI_Init+0x16a>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a77      	ldr	r2, [pc, #476]	; (8003d90 <HAL_SAI_Init+0x2c8>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d004      	beq.n	8003bc2 <HAL_SAI_Init+0xfa>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a75      	ldr	r2, [pc, #468]	; (8003d94 <HAL_SAI_Init+0x2cc>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d105      	bne.n	8003bce <HAL_SAI_Init+0x106>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8003bc2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003bc6:	f7fe ff21 	bl	8002a0c <HAL_RCCEx_GetPeriphCLKFreq>
 8003bca:	6138      	str	r0, [r7, #16]
 8003bcc:	e004      	b.n	8003bd8 <HAL_SAI_Init+0x110>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8003bce:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003bd2:	f7fe ff1b 	bl	8002a0c <HAL_RCCEx_GetPeriphCLKFreq>
 8003bd6:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * 2U * 256U);
 8003bd8:	693a      	ldr	r2, [r7, #16]
 8003bda:	4613      	mov	r3, r2
 8003bdc:	009b      	lsls	r3, r3, #2
 8003bde:	4413      	add	r3, r2
 8003be0:	005b      	lsls	r3, r3, #1
 8003be2:	461a      	mov	r2, r3
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	69db      	ldr	r3, [r3, #28]
 8003be8:	025b      	lsls	r3, r3, #9
 8003bea:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bee:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10U;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	4a6b      	ldr	r2, [pc, #428]	; (8003da0 <HAL_SAI_Init+0x2d8>)
 8003bf4:	fba2 2303 	umull	r2, r3, r2, r3
 8003bf8:	08da      	lsrs	r2, r3, #3
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8003bfe:	68f9      	ldr	r1, [r7, #12]
 8003c00:	4b67      	ldr	r3, [pc, #412]	; (8003da0 <HAL_SAI_Init+0x2d8>)
 8003c02:	fba3 2301 	umull	r2, r3, r3, r1
 8003c06:	08da      	lsrs	r2, r3, #3
 8003c08:	4613      	mov	r3, r2
 8003c0a:	009b      	lsls	r3, r3, #2
 8003c0c:	4413      	add	r3, r2
 8003c0e:	005b      	lsls	r3, r3, #1
 8003c10:	1aca      	subs	r2, r1, r3
 8003c12:	2a08      	cmp	r2, #8
 8003c14:	d904      	bls.n	8003c20 <HAL_SAI_Init+0x158>
    {
      hsai->Init.Mckdiv += 1U;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6a1b      	ldr	r3, [r3, #32]
 8003c1a:	1c5a      	adds	r2, r3, #1
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c24:	2b04      	cmp	r3, #4
 8003c26:	d104      	bne.n	8003c32 <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6a1b      	ldr	r3, [r3, #32]
 8003c2c:	085a      	lsrs	r2, r3, #1
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d003      	beq.n	8003c42 <HAL_SAI_Init+0x17a>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	2b02      	cmp	r3, #2
 8003c40:	d109      	bne.n	8003c56 <HAL_SAI_Init+0x18e>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c46:	2b01      	cmp	r3, #1
 8003c48:	d101      	bne.n	8003c4e <HAL_SAI_Init+0x186>
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	e001      	b.n	8003c52 <HAL_SAI_Init+0x18a>
 8003c4e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003c52:	61bb      	str	r3, [r7, #24]
 8003c54:	e008      	b.n	8003c68 <HAL_SAI_Init+0x1a0>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c5a:	2b01      	cmp	r3, #1
 8003c5c:	d102      	bne.n	8003c64 <HAL_SAI_Init+0x19c>
 8003c5e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003c62:	e000      	b.n	8003c66 <HAL_SAI_Init+0x19e>
 8003c64:	2300      	movs	r3, #0
 8003c66:	61bb      	str	r3, [r7, #24]
                          ckstr_bits | syncen_bits |                             \
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling);
#else
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	6819      	ldr	r1, [r3, #0]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	4b4c      	ldr	r3, [pc, #304]	; (8003da4 <HAL_SAI_Init+0x2dc>)
 8003c74:	400b      	ands	r3, r1
 8003c76:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	6819      	ldr	r1, [r3, #0]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	685a      	ldr	r2, [r3, #4]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c86:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8003c8c:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c92:	431a      	orrs	r2, r3
 8003c94:	69bb      	ldr	r3, [r7, #24]
 8003c96:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                             \
 8003ca0:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	691b      	ldr	r3, [r3, #16]
 8003ca6:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8003cac:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6a1b      	ldr	r3, [r3, #32]
 8003cb2:	051b      	lsls	r3, r3, #20
 8003cb4:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	430a      	orrs	r2, r1
 8003cbc:	601a      	str	r2, [r3, #0]
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	687a      	ldr	r2, [r7, #4]
 8003cc6:	6812      	ldr	r2, [r2, #0]
 8003cc8:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8003ccc:	f023 030f 	bic.w	r3, r3, #15
 8003cd0:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	6859      	ldr	r1, [r3, #4]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	699a      	ldr	r2, [r3, #24]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ce0:	431a      	orrs	r2, r3
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ce6:	431a      	orrs	r2, r3
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	430a      	orrs	r2, r1
 8003cee:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	6899      	ldr	r1, [r3, #8]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	4b2b      	ldr	r3, [pc, #172]	; (8003da8 <HAL_SAI_Init+0x2e0>)
 8003cfc:	400b      	ands	r3, r1
 8003cfe:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	6899      	ldr	r1, [r3, #8]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d0a:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8003d10:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 8003d16:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 8003d1c:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d22:	3b01      	subs	r3, #1
 8003d24:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8003d26:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	430a      	orrs	r2, r1
 8003d2e:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	68d9      	ldr	r1, [r3, #12]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	f24f 0320 	movw	r3, #61472	; 0xf020
 8003d3e:	400b      	ands	r3, r1
 8003d40:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	68d9      	ldr	r1, [r3, #12]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d50:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d56:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8003d58:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d5e:	3b01      	subs	r3, #1
 8003d60:	021b      	lsls	r3, r3, #8
 8003d62:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	430a      	orrs	r2, r1
 8003d6a:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2201      	movs	r2, #1
 8003d78:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8003d84:	2300      	movs	r3, #0
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	3720      	adds	r7, #32
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}
 8003d8e:	bf00      	nop
 8003d90:	40015404 	.word	0x40015404
 8003d94:	40015424 	.word	0x40015424
 8003d98:	40015400 	.word	0x40015400
 8003d9c:	40015800 	.word	0x40015800
 8003da0:	cccccccd 	.word	0xcccccccd
 8003da4:	ff05c010 	.word	0xff05c010
 8003da8:	fff88000 	.word	0xfff88000

08003dac <HAL_SAI_DMAPause>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_DMAPause(SAI_HandleTypeDef *hsai)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b083      	sub	sp, #12
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hsai);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8003dba:	2b01      	cmp	r3, #1
 8003dbc:	d101      	bne.n	8003dc2 <HAL_SAI_DMAPause+0x16>
 8003dbe:	2302      	movs	r3, #2
 8003dc0:	e010      	b.n	8003de4 <HAL_SAI_DMAPause+0x38>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2201      	movs	r2, #1
 8003dc6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  /* Pause the audio file playing by disabling the SAI DMA requests */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	681a      	ldr	r2, [r3, #0]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8003dd8:	601a      	str	r2, [r3, #0]

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8003de2:	2300      	movs	r3, #0
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	370c      	adds	r7, #12
 8003de8:	46bd      	mov	sp, r7
 8003dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dee:	4770      	bx	lr

08003df0 <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b086      	sub	sp, #24
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	60f8      	str	r0, [r7, #12]
 8003df8:	60b9      	str	r1, [r7, #8]
 8003dfa:	4613      	mov	r3, r2
 8003dfc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 8003dfe:	f7fc fff3 	bl	8000de8 <HAL_GetTick>
 8003e02:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d002      	beq.n	8003e10 <HAL_SAI_Transmit_DMA+0x20>
 8003e0a:	88fb      	ldrh	r3, [r7, #6]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d101      	bne.n	8003e14 <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	e093      	b.n	8003f3c <HAL_SAI_Transmit_DMA+0x14c>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8003e1a:	b2db      	uxtb	r3, r3
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	f040 808c 	bne.w	8003f3a <HAL_SAI_Transmit_DMA+0x14a>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d101      	bne.n	8003e30 <HAL_SAI_Transmit_DMA+0x40>
 8003e2c:	2302      	movs	r3, #2
 8003e2e:	e085      	b.n	8003f3c <HAL_SAI_Transmit_DMA+0x14c>
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2201      	movs	r2, #1
 8003e34:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    hsai->pBuffPtr = pData;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	68ba      	ldr	r2, [r7, #8]
 8003e3c:	665a      	str	r2, [r3, #100]	; 0x64
    hsai->XferSize = Size;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	88fa      	ldrh	r2, [r7, #6]
 8003e42:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    hsai->XferCount = Size;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	88fa      	ldrh	r2, [r7, #6]
 8003e4a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2200      	movs	r2, #0
 8003e52:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2212      	movs	r2, #18
 8003e5a:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e62:	4a38      	ldr	r2, [pc, #224]	; (8003f44 <HAL_SAI_Transmit_DMA+0x154>)
 8003e64:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e6a:	4a37      	ldr	r2, [pc, #220]	; (8003f48 <HAL_SAI_Transmit_DMA+0x158>)
 8003e6c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e72:	4a36      	ldr	r2, [pc, #216]	; (8003f4c <HAL_SAI_Transmit_DMA+0x15c>)
 8003e74:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e86:	4619      	mov	r1, r3
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	331c      	adds	r3, #28
 8003e8e:	461a      	mov	r2, r3
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8003e96:	f7fd f97d 	bl	8001194 <HAL_DMA_Start_IT>
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d005      	beq.n	8003eac <HAL_SAI_Transmit_DMA+0xbc>
    {
      __HAL_UNLOCK(hsai);
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      return  HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e047      	b.n	8003f3c <HAL_SAI_Transmit_DMA+0x14c>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8003eac:	2100      	movs	r1, #0
 8003eae:	68f8      	ldr	r0, [r7, #12]
 8003eb0:	f000 f98c 	bl	80041cc <SAI_InterruptFlag>
 8003eb4:	4601      	mov	r1, r0
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	691a      	ldr	r2, [r3, #16]
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	430a      	orrs	r2, r1
 8003ec2:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	681a      	ldr	r2, [r3, #0]
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003ed2:	601a      	str	r2, [r3, #0]

    /* Wait untill FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 8003ed4:	e015      	b.n	8003f02 <HAL_SAI_Transmit_DMA+0x112>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 8003ed6:	f7fc ff87 	bl	8000de8 <HAL_GetTick>
 8003eda:	4602      	mov	r2, r0
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	1ad3      	subs	r3, r2, r3
 8003ee0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003ee4:	d90d      	bls.n	8003f02 <HAL_SAI_Transmit_DMA+0x112>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003eec:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8003efe:	2303      	movs	r3, #3
 8003f00:	e01c      	b.n	8003f3c <HAL_SAI_Transmit_DMA+0x14c>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	695b      	ldr	r3, [r3, #20]
 8003f08:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d0e2      	beq.n	8003ed6 <HAL_SAI_Transmit_DMA+0xe6>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d107      	bne.n	8003f2e <HAL_SAI_Transmit_DMA+0x13e>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003f2c:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	2200      	movs	r2, #0
 8003f32:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003f36:	2300      	movs	r3, #0
 8003f38:	e000      	b.n	8003f3c <HAL_SAI_Transmit_DMA+0x14c>
  }
  else
  {
    return HAL_BUSY;
 8003f3a:	2302      	movs	r3, #2
  }
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	3718      	adds	r7, #24
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bd80      	pop	{r7, pc}
 8003f44:	0800430f 	.word	0x0800430f
 8003f48:	080042b1 	.word	0x080042b1
 8003f4c:	0800432b 	.word	0x0800432b

08003f50 <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b083      	sub	sp, #12
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 8003f58:	bf00      	nop
 8003f5a:	370c      	adds	r7, #12
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr

08003f64 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b087      	sub	sp, #28
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	60f8      	str	r0, [r7, #12]
 8003f6c:	60b9      	str	r1, [r7, #8]
 8003f6e:	607a      	str	r2, [r7, #4]
 8003f70:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f72:	2300      	movs	r3, #0
 8003f74:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	631a      	str	r2, [r3, #48]	; 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	639a      	str	r2, [r3, #56]	; 0x38
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d003      	beq.n	8003f92 <SAI_InitI2S+0x2e>
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	2b02      	cmp	r3, #2
 8003f90:	d103      	bne.n	8003f9a <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	2200      	movs	r2, #0
 8003f96:	63da      	str	r2, [r3, #60]	; 0x3c
 8003f98:	e002      	b.n	8003fa0 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	2201      	movs	r2, #1
 8003f9e:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003fa6:	649a      	str	r2, [r3, #72]	; 0x48
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003fae:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->SlotInit.FirstBitOffset  = 0;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	655a      	str	r2, [r3, #84]	; 0x54
  hsai->SlotInit.SlotNumber      = nbslot;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	683a      	ldr	r2, [r7, #0]
 8003fba:	65da      	str	r2, [r3, #92]	; 0x5c

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	f003 0301 	and.w	r3, r3, #1
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d001      	beq.n	8003fca <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e077      	b.n	80040ba <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d107      	bne.n	8003fe0 <SAI_InitI2S+0x7c>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	64da      	str	r2, [r3, #76]	; 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8003fdc:	651a      	str	r2, [r3, #80]	; 0x50
 8003fde:	e006      	b.n	8003fee <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003fe6:	64da      	str	r2, [r3, #76]	; 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2200      	movs	r2, #0
 8003fec:	651a      	str	r2, [r3, #80]	; 0x50
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2b03      	cmp	r3, #3
 8003ff2:	d84f      	bhi.n	8004094 <SAI_InitI2S+0x130>
 8003ff4:	a201      	add	r2, pc, #4	; (adr r2, 8003ffc <SAI_InitI2S+0x98>)
 8003ff6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ffa:	bf00      	nop
 8003ffc:	0800400d 	.word	0x0800400d
 8004000:	0800402f 	.word	0x0800402f
 8004004:	08004051 	.word	0x08004051
 8004008:	08004073 	.word	0x08004073

  /* Frame definition */
  switch (datasize)
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2280      	movs	r2, #128	; 0x80
 8004010:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	085b      	lsrs	r3, r3, #1
 8004016:	015a      	lsls	r2, r3, #5
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	085b      	lsrs	r3, r3, #1
 8004020:	011a      	lsls	r2, r3, #4
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2240      	movs	r2, #64	; 0x40
 800402a:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 800402c:	e035      	b.n	800409a <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2280      	movs	r2, #128	; 0x80
 8004032:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	085b      	lsrs	r3, r3, #1
 8004038:	019a      	lsls	r2, r3, #6
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	085b      	lsrs	r3, r3, #1
 8004042:	015a      	lsls	r2, r3, #5
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2280      	movs	r2, #128	; 0x80
 800404c:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 800404e:	e024      	b.n	800409a <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	22c0      	movs	r2, #192	; 0xc0
 8004054:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	085b      	lsrs	r3, r3, #1
 800405a:	019a      	lsls	r2, r3, #6
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	085b      	lsrs	r3, r3, #1
 8004064:	015a      	lsls	r2, r3, #5
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2280      	movs	r2, #128	; 0x80
 800406e:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 8004070:	e013      	b.n	800409a <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	22e0      	movs	r2, #224	; 0xe0
 8004076:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	085b      	lsrs	r3, r3, #1
 800407c:	019a      	lsls	r2, r3, #6
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	085b      	lsrs	r3, r3, #1
 8004086:	015a      	lsls	r2, r3, #5
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2280      	movs	r2, #128	; 0x80
 8004090:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 8004092:	e002      	b.n	800409a <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 8004094:	2301      	movs	r3, #1
 8004096:	75fb      	strb	r3, [r7, #23]
      break;
 8004098:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	2b02      	cmp	r3, #2
 800409e:	d10b      	bne.n	80040b8 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2b01      	cmp	r3, #1
 80040a4:	d102      	bne.n	80040ac <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	2210      	movs	r2, #16
 80040aa:	655a      	str	r2, [r3, #84]	; 0x54
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2b02      	cmp	r3, #2
 80040b0:	d102      	bne.n	80040b8 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2208      	movs	r2, #8
 80040b6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  return status;
 80040b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	371c      	adds	r7, #28
 80040be:	46bd      	mov	sp, r7
 80040c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c4:	4770      	bx	lr
 80040c6:	bf00      	nop

080040c8 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b087      	sub	sp, #28
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	60f8      	str	r0, [r7, #12]
 80040d0:	60b9      	str	r1, [r7, #8]
 80040d2:	607a      	str	r2, [r7, #4]
 80040d4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80040d6:	2300      	movs	r3, #0
 80040d8:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	2200      	movs	r2, #0
 80040de:	631a      	str	r2, [r3, #48]	; 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2200      	movs	r2, #0
 80040e4:	639a      	str	r2, [r3, #56]	; 0x38
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d003      	beq.n	80040f6 <SAI_InitPCM+0x2e>
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	2b02      	cmp	r3, #2
 80040f4:	d103      	bne.n	80040fe <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	2201      	movs	r2, #1
 80040fa:	63da      	str	r2, [r3, #60]	; 0x3c
 80040fc:	e002      	b.n	8004104 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2200      	movs	r2, #0
 8004102:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2200      	movs	r2, #0
 8004108:	649a      	str	r2, [r3, #72]	; 0x48
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004110:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8004118:	651a      	str	r2, [r3, #80]	; 0x50
  hsai->SlotInit.FirstBitOffset  = 0;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	2200      	movs	r2, #0
 800411e:	655a      	str	r2, [r3, #84]	; 0x54
  hsai->SlotInit.SlotNumber      = nbslot;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	683a      	ldr	r2, [r7, #0]
 8004124:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800412c:	661a      	str	r2, [r3, #96]	; 0x60

  if (protocol == SAI_PCM_SHORT)
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	2b04      	cmp	r3, #4
 8004132:	d103      	bne.n	800413c <SAI_InitPCM+0x74>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	2201      	movs	r2, #1
 8004138:	645a      	str	r2, [r3, #68]	; 0x44
 800413a:	e002      	b.n	8004142 <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	220d      	movs	r2, #13
 8004140:	645a      	str	r2, [r3, #68]	; 0x44
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2b03      	cmp	r3, #3
 8004146:	d837      	bhi.n	80041b8 <SAI_InitPCM+0xf0>
 8004148:	a201      	add	r2, pc, #4	; (adr r2, 8004150 <SAI_InitPCM+0x88>)
 800414a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800414e:	bf00      	nop
 8004150:	08004161 	.word	0x08004161
 8004154:	08004177 	.word	0x08004177
 8004158:	0800418d 	.word	0x0800418d
 800415c:	080041a3 	.word	0x080041a3
  }

  switch (datasize)
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	2280      	movs	r2, #128	; 0x80
 8004164:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 16U * nbslot;
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	011a      	lsls	r2, r3, #4
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	2240      	movs	r2, #64	; 0x40
 8004172:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 8004174:	e023      	b.n	80041be <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	2280      	movs	r2, #128	; 0x80
 800417a:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	015a      	lsls	r2, r3, #5
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2280      	movs	r2, #128	; 0x80
 8004188:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 800418a:	e018      	b.n	80041be <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	22c0      	movs	r2, #192	; 0xc0
 8004190:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	015a      	lsls	r2, r3, #5
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2280      	movs	r2, #128	; 0x80
 800419e:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 80041a0:	e00d      	b.n	80041be <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	22e0      	movs	r2, #224	; 0xe0
 80041a6:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 32U * nbslot;
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	015a      	lsls	r2, r3, #5
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2280      	movs	r2, #128	; 0x80
 80041b4:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 80041b6:	e002      	b.n	80041be <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	75fb      	strb	r3, [r7, #23]
      break;
 80041bc:	bf00      	nop
  }

  return status;
 80041be:	7dfb      	ldrb	r3, [r7, #23]
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	371c      	adds	r7, #28
 80041c4:	46bd      	mov	sp, r7
 80041c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ca:	4770      	bx	lr

080041cc <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b085      	sub	sp, #20
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
 80041d4:	460b      	mov	r3, r1
 80041d6:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 80041d8:	2301      	movs	r3, #1
 80041da:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 80041dc:	78fb      	ldrb	r3, [r7, #3]
 80041de:	2b01      	cmp	r3, #1
 80041e0:	d103      	bne.n	80041ea <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	f043 0308 	orr.w	r3, r3, #8
 80041e8:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ee:	2b08      	cmp	r3, #8
 80041f0:	d10b      	bne.n	800420a <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 80041f6:	2b03      	cmp	r3, #3
 80041f8:	d003      	beq.n	8004202 <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	2b01      	cmp	r3, #1
 8004200:	d103      	bne.n	800420a <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	f043 0310 	orr.w	r3, r3, #16
 8004208:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	2b03      	cmp	r3, #3
 8004210:	d003      	beq.n	800421a <SAI_InterruptFlag+0x4e>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	2b02      	cmp	r3, #2
 8004218:	d104      	bne.n	8004224 <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004220:	60fb      	str	r3, [r7, #12]
 8004222:	e003      	b.n	800422c <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	f043 0304 	orr.w	r3, r3, #4
 800422a:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 800422c:	68fb      	ldr	r3, [r7, #12]
}
 800422e:	4618      	mov	r0, r3
 8004230:	3714      	adds	r7, #20
 8004232:	46bd      	mov	sp, r7
 8004234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004238:	4770      	bx	lr
	...

0800423c <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800423c:	b480      	push	{r7}
 800423e:	b085      	sub	sp, #20
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8004244:	4b18      	ldr	r3, [pc, #96]	; (80042a8 <SAI_Disable+0x6c>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a18      	ldr	r2, [pc, #96]	; (80042ac <SAI_Disable+0x70>)
 800424a:	fba2 2303 	umull	r2, r3, r2, r3
 800424e:	0b1b      	lsrs	r3, r3, #12
 8004250:	009b      	lsls	r3, r3, #2
 8004252:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8004254:	2300      	movs	r3, #0
 8004256:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	681a      	ldr	r2, [r3, #0]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004266:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d10a      	bne.n	8004284 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004274:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 800427e:	2303      	movs	r3, #3
 8004280:	72fb      	strb	r3, [r7, #11]
      break;
 8004282:	e009      	b.n	8004298 <SAI_Disable+0x5c>
    }
    count--;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	3b01      	subs	r3, #1
 8004288:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004294:	2b00      	cmp	r3, #0
 8004296:	d1e7      	bne.n	8004268 <SAI_Disable+0x2c>

  return status;
 8004298:	7afb      	ldrb	r3, [r7, #11]
}
 800429a:	4618      	mov	r0, r3
 800429c:	3714      	adds	r7, #20
 800429e:	46bd      	mov	sp, r7
 80042a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a4:	4770      	bx	lr
 80042a6:	bf00      	nop
 80042a8:	20000000 	.word	0x20000000
 80042ac:	95cbec1b 	.word	0x95cbec1b

080042b0 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b084      	sub	sp, #16
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042bc:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	69db      	ldr	r3, [r3, #28]
 80042c2:	2b20      	cmp	r3, #32
 80042c4:	d01c      	beq.n	8004300 <SAI_DMATxCplt+0x50>
  {
    hsai->XferCount = 0;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2200      	movs	r2, #0
 80042ca:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	681a      	ldr	r2, [r3, #0]
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80042dc:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80042de:	2100      	movs	r1, #0
 80042e0:	68f8      	ldr	r0, [r7, #12]
 80042e2:	f7ff ff73 	bl	80041cc <SAI_InterruptFlag>
 80042e6:	4603      	mov	r3, r0
 80042e8:	43d9      	mvns	r1, r3
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	691a      	ldr	r2, [r3, #16]
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	400a      	ands	r2, r1
 80042f6:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2201      	movs	r2, #1
 80042fc:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 8004300:	68f8      	ldr	r0, [r7, #12]
 8004302:	f7fc fa04 	bl	800070e <HAL_SAI_TxCpltCallback>
#endif
}
 8004306:	bf00      	nop
 8004308:	3710      	adds	r7, #16
 800430a:	46bd      	mov	sp, r7
 800430c:	bd80      	pop	{r7, pc}

0800430e <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800430e:	b580      	push	{r7, lr}
 8004310:	b084      	sub	sp, #16
 8004312:	af00      	add	r7, sp, #0
 8004314:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800431a:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 800431c:	68f8      	ldr	r0, [r7, #12]
 800431e:	f7fc fa01 	bl	8000724 <HAL_SAI_TxHalfCpltCallback>
#endif
}
 8004322:	bf00      	nop
 8004324:	3710      	adds	r7, #16
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}

0800432a <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 800432a:	b580      	push	{r7, lr}
 800432c:	b084      	sub	sp, #16
 800432e:	af00      	add	r7, sp, #0
 8004330:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004336:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800433e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Disable the SAI DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8004356:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral */
  /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
  (void) SAI_Disable(hsai);
 8004358:	68f8      	ldr	r0, [r7, #12]
 800435a:	f7ff ff6f 	bl	800423c <SAI_Disable>

  /* Set the SAI state ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	2201      	movs	r2, #1
 8004362:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	2200      	movs	r2, #0
 800436a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 800436e:	68f8      	ldr	r0, [r7, #12]
 8004370:	f7ff fdee 	bl	8003f50 <HAL_SAI_ErrorCallback>
#endif
}
 8004374:	bf00      	nop
 8004376:	3710      	adds	r7, #16
 8004378:	46bd      	mov	sp, r7
 800437a:	bd80      	pop	{r7, pc}

0800437c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b082      	sub	sp, #8
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d101      	bne.n	800438e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e040      	b.n	8004410 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004392:	2b00      	cmp	r3, #0
 8004394:	d106      	bne.n	80043a4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2200      	movs	r2, #0
 800439a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f7fc fb42 	bl	8000a28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2224      	movs	r2, #36	; 0x24
 80043a8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	681a      	ldr	r2, [r3, #0]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f022 0201 	bic.w	r2, r2, #1
 80043b8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80043ba:	6878      	ldr	r0, [r7, #4]
 80043bc:	f000 f82c 	bl	8004418 <UART_SetConfig>
 80043c0:	4603      	mov	r3, r0
 80043c2:	2b01      	cmp	r3, #1
 80043c4:	d101      	bne.n	80043ca <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	e022      	b.n	8004410 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d002      	beq.n	80043d8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f000 faaa 	bl	800492c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	685a      	ldr	r2, [r3, #4]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80043e6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	689a      	ldr	r2, [r3, #8]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80043f6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	681a      	ldr	r2, [r3, #0]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f042 0201 	orr.w	r2, r2, #1
 8004406:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004408:	6878      	ldr	r0, [r7, #4]
 800440a:	f000 fb31 	bl	8004a70 <UART_CheckIdleState>
 800440e:	4603      	mov	r3, r0
}
 8004410:	4618      	mov	r0, r3
 8004412:	3708      	adds	r7, #8
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}

08004418 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004418:	b5b0      	push	{r4, r5, r7, lr}
 800441a:	b088      	sub	sp, #32
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004420:	2300      	movs	r3, #0
 8004422:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	689a      	ldr	r2, [r3, #8]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	691b      	ldr	r3, [r3, #16]
 800442c:	431a      	orrs	r2, r3
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	695b      	ldr	r3, [r3, #20]
 8004432:	431a      	orrs	r2, r3
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	69db      	ldr	r3, [r3, #28]
 8004438:	4313      	orrs	r3, r2
 800443a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	681a      	ldr	r2, [r3, #0]
 8004442:	4bad      	ldr	r3, [pc, #692]	; (80046f8 <UART_SetConfig+0x2e0>)
 8004444:	4013      	ands	r3, r2
 8004446:	687a      	ldr	r2, [r7, #4]
 8004448:	6812      	ldr	r2, [r2, #0]
 800444a:	69f9      	ldr	r1, [r7, #28]
 800444c:	430b      	orrs	r3, r1
 800444e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	68da      	ldr	r2, [r3, #12]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	430a      	orrs	r2, r1
 8004464:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	699b      	ldr	r3, [r3, #24]
 800446a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4aa2      	ldr	r2, [pc, #648]	; (80046fc <UART_SetConfig+0x2e4>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d004      	beq.n	8004480 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6a1b      	ldr	r3, [r3, #32]
 800447a:	69fa      	ldr	r2, [r7, #28]
 800447c:	4313      	orrs	r3, r2
 800447e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	689b      	ldr	r3, [r3, #8]
 8004486:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	69fa      	ldr	r2, [r7, #28]
 8004490:	430a      	orrs	r2, r1
 8004492:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a99      	ldr	r2, [pc, #612]	; (8004700 <UART_SetConfig+0x2e8>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d121      	bne.n	80044e2 <UART_SetConfig+0xca>
 800449e:	4b99      	ldr	r3, [pc, #612]	; (8004704 <UART_SetConfig+0x2ec>)
 80044a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044a4:	f003 0303 	and.w	r3, r3, #3
 80044a8:	2b03      	cmp	r3, #3
 80044aa:	d817      	bhi.n	80044dc <UART_SetConfig+0xc4>
 80044ac:	a201      	add	r2, pc, #4	; (adr r2, 80044b4 <UART_SetConfig+0x9c>)
 80044ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044b2:	bf00      	nop
 80044b4:	080044c5 	.word	0x080044c5
 80044b8:	080044d1 	.word	0x080044d1
 80044bc:	080044cb 	.word	0x080044cb
 80044c0:	080044d7 	.word	0x080044d7
 80044c4:	2301      	movs	r3, #1
 80044c6:	76fb      	strb	r3, [r7, #27]
 80044c8:	e0e7      	b.n	800469a <UART_SetConfig+0x282>
 80044ca:	2302      	movs	r3, #2
 80044cc:	76fb      	strb	r3, [r7, #27]
 80044ce:	e0e4      	b.n	800469a <UART_SetConfig+0x282>
 80044d0:	2304      	movs	r3, #4
 80044d2:	76fb      	strb	r3, [r7, #27]
 80044d4:	e0e1      	b.n	800469a <UART_SetConfig+0x282>
 80044d6:	2308      	movs	r3, #8
 80044d8:	76fb      	strb	r3, [r7, #27]
 80044da:	e0de      	b.n	800469a <UART_SetConfig+0x282>
 80044dc:	2310      	movs	r3, #16
 80044de:	76fb      	strb	r3, [r7, #27]
 80044e0:	e0db      	b.n	800469a <UART_SetConfig+0x282>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a88      	ldr	r2, [pc, #544]	; (8004708 <UART_SetConfig+0x2f0>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d132      	bne.n	8004552 <UART_SetConfig+0x13a>
 80044ec:	4b85      	ldr	r3, [pc, #532]	; (8004704 <UART_SetConfig+0x2ec>)
 80044ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044f2:	f003 030c 	and.w	r3, r3, #12
 80044f6:	2b0c      	cmp	r3, #12
 80044f8:	d828      	bhi.n	800454c <UART_SetConfig+0x134>
 80044fa:	a201      	add	r2, pc, #4	; (adr r2, 8004500 <UART_SetConfig+0xe8>)
 80044fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004500:	08004535 	.word	0x08004535
 8004504:	0800454d 	.word	0x0800454d
 8004508:	0800454d 	.word	0x0800454d
 800450c:	0800454d 	.word	0x0800454d
 8004510:	08004541 	.word	0x08004541
 8004514:	0800454d 	.word	0x0800454d
 8004518:	0800454d 	.word	0x0800454d
 800451c:	0800454d 	.word	0x0800454d
 8004520:	0800453b 	.word	0x0800453b
 8004524:	0800454d 	.word	0x0800454d
 8004528:	0800454d 	.word	0x0800454d
 800452c:	0800454d 	.word	0x0800454d
 8004530:	08004547 	.word	0x08004547
 8004534:	2300      	movs	r3, #0
 8004536:	76fb      	strb	r3, [r7, #27]
 8004538:	e0af      	b.n	800469a <UART_SetConfig+0x282>
 800453a:	2302      	movs	r3, #2
 800453c:	76fb      	strb	r3, [r7, #27]
 800453e:	e0ac      	b.n	800469a <UART_SetConfig+0x282>
 8004540:	2304      	movs	r3, #4
 8004542:	76fb      	strb	r3, [r7, #27]
 8004544:	e0a9      	b.n	800469a <UART_SetConfig+0x282>
 8004546:	2308      	movs	r3, #8
 8004548:	76fb      	strb	r3, [r7, #27]
 800454a:	e0a6      	b.n	800469a <UART_SetConfig+0x282>
 800454c:	2310      	movs	r3, #16
 800454e:	76fb      	strb	r3, [r7, #27]
 8004550:	e0a3      	b.n	800469a <UART_SetConfig+0x282>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a6d      	ldr	r2, [pc, #436]	; (800470c <UART_SetConfig+0x2f4>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d120      	bne.n	800459e <UART_SetConfig+0x186>
 800455c:	4b69      	ldr	r3, [pc, #420]	; (8004704 <UART_SetConfig+0x2ec>)
 800455e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004562:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004566:	2b30      	cmp	r3, #48	; 0x30
 8004568:	d013      	beq.n	8004592 <UART_SetConfig+0x17a>
 800456a:	2b30      	cmp	r3, #48	; 0x30
 800456c:	d814      	bhi.n	8004598 <UART_SetConfig+0x180>
 800456e:	2b20      	cmp	r3, #32
 8004570:	d009      	beq.n	8004586 <UART_SetConfig+0x16e>
 8004572:	2b20      	cmp	r3, #32
 8004574:	d810      	bhi.n	8004598 <UART_SetConfig+0x180>
 8004576:	2b00      	cmp	r3, #0
 8004578:	d002      	beq.n	8004580 <UART_SetConfig+0x168>
 800457a:	2b10      	cmp	r3, #16
 800457c:	d006      	beq.n	800458c <UART_SetConfig+0x174>
 800457e:	e00b      	b.n	8004598 <UART_SetConfig+0x180>
 8004580:	2300      	movs	r3, #0
 8004582:	76fb      	strb	r3, [r7, #27]
 8004584:	e089      	b.n	800469a <UART_SetConfig+0x282>
 8004586:	2302      	movs	r3, #2
 8004588:	76fb      	strb	r3, [r7, #27]
 800458a:	e086      	b.n	800469a <UART_SetConfig+0x282>
 800458c:	2304      	movs	r3, #4
 800458e:	76fb      	strb	r3, [r7, #27]
 8004590:	e083      	b.n	800469a <UART_SetConfig+0x282>
 8004592:	2308      	movs	r3, #8
 8004594:	76fb      	strb	r3, [r7, #27]
 8004596:	e080      	b.n	800469a <UART_SetConfig+0x282>
 8004598:	2310      	movs	r3, #16
 800459a:	76fb      	strb	r3, [r7, #27]
 800459c:	e07d      	b.n	800469a <UART_SetConfig+0x282>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a5b      	ldr	r2, [pc, #364]	; (8004710 <UART_SetConfig+0x2f8>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d120      	bne.n	80045ea <UART_SetConfig+0x1d2>
 80045a8:	4b56      	ldr	r3, [pc, #344]	; (8004704 <UART_SetConfig+0x2ec>)
 80045aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045ae:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80045b2:	2bc0      	cmp	r3, #192	; 0xc0
 80045b4:	d013      	beq.n	80045de <UART_SetConfig+0x1c6>
 80045b6:	2bc0      	cmp	r3, #192	; 0xc0
 80045b8:	d814      	bhi.n	80045e4 <UART_SetConfig+0x1cc>
 80045ba:	2b80      	cmp	r3, #128	; 0x80
 80045bc:	d009      	beq.n	80045d2 <UART_SetConfig+0x1ba>
 80045be:	2b80      	cmp	r3, #128	; 0x80
 80045c0:	d810      	bhi.n	80045e4 <UART_SetConfig+0x1cc>
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d002      	beq.n	80045cc <UART_SetConfig+0x1b4>
 80045c6:	2b40      	cmp	r3, #64	; 0x40
 80045c8:	d006      	beq.n	80045d8 <UART_SetConfig+0x1c0>
 80045ca:	e00b      	b.n	80045e4 <UART_SetConfig+0x1cc>
 80045cc:	2300      	movs	r3, #0
 80045ce:	76fb      	strb	r3, [r7, #27]
 80045d0:	e063      	b.n	800469a <UART_SetConfig+0x282>
 80045d2:	2302      	movs	r3, #2
 80045d4:	76fb      	strb	r3, [r7, #27]
 80045d6:	e060      	b.n	800469a <UART_SetConfig+0x282>
 80045d8:	2304      	movs	r3, #4
 80045da:	76fb      	strb	r3, [r7, #27]
 80045dc:	e05d      	b.n	800469a <UART_SetConfig+0x282>
 80045de:	2308      	movs	r3, #8
 80045e0:	76fb      	strb	r3, [r7, #27]
 80045e2:	e05a      	b.n	800469a <UART_SetConfig+0x282>
 80045e4:	2310      	movs	r3, #16
 80045e6:	76fb      	strb	r3, [r7, #27]
 80045e8:	e057      	b.n	800469a <UART_SetConfig+0x282>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a49      	ldr	r2, [pc, #292]	; (8004714 <UART_SetConfig+0x2fc>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d125      	bne.n	8004640 <UART_SetConfig+0x228>
 80045f4:	4b43      	ldr	r3, [pc, #268]	; (8004704 <UART_SetConfig+0x2ec>)
 80045f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004602:	d017      	beq.n	8004634 <UART_SetConfig+0x21c>
 8004604:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004608:	d817      	bhi.n	800463a <UART_SetConfig+0x222>
 800460a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800460e:	d00b      	beq.n	8004628 <UART_SetConfig+0x210>
 8004610:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004614:	d811      	bhi.n	800463a <UART_SetConfig+0x222>
 8004616:	2b00      	cmp	r3, #0
 8004618:	d003      	beq.n	8004622 <UART_SetConfig+0x20a>
 800461a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800461e:	d006      	beq.n	800462e <UART_SetConfig+0x216>
 8004620:	e00b      	b.n	800463a <UART_SetConfig+0x222>
 8004622:	2300      	movs	r3, #0
 8004624:	76fb      	strb	r3, [r7, #27]
 8004626:	e038      	b.n	800469a <UART_SetConfig+0x282>
 8004628:	2302      	movs	r3, #2
 800462a:	76fb      	strb	r3, [r7, #27]
 800462c:	e035      	b.n	800469a <UART_SetConfig+0x282>
 800462e:	2304      	movs	r3, #4
 8004630:	76fb      	strb	r3, [r7, #27]
 8004632:	e032      	b.n	800469a <UART_SetConfig+0x282>
 8004634:	2308      	movs	r3, #8
 8004636:	76fb      	strb	r3, [r7, #27]
 8004638:	e02f      	b.n	800469a <UART_SetConfig+0x282>
 800463a:	2310      	movs	r3, #16
 800463c:	76fb      	strb	r3, [r7, #27]
 800463e:	e02c      	b.n	800469a <UART_SetConfig+0x282>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a2d      	ldr	r2, [pc, #180]	; (80046fc <UART_SetConfig+0x2e4>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d125      	bne.n	8004696 <UART_SetConfig+0x27e>
 800464a:	4b2e      	ldr	r3, [pc, #184]	; (8004704 <UART_SetConfig+0x2ec>)
 800464c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004650:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004654:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004658:	d017      	beq.n	800468a <UART_SetConfig+0x272>
 800465a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800465e:	d817      	bhi.n	8004690 <UART_SetConfig+0x278>
 8004660:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004664:	d00b      	beq.n	800467e <UART_SetConfig+0x266>
 8004666:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800466a:	d811      	bhi.n	8004690 <UART_SetConfig+0x278>
 800466c:	2b00      	cmp	r3, #0
 800466e:	d003      	beq.n	8004678 <UART_SetConfig+0x260>
 8004670:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004674:	d006      	beq.n	8004684 <UART_SetConfig+0x26c>
 8004676:	e00b      	b.n	8004690 <UART_SetConfig+0x278>
 8004678:	2300      	movs	r3, #0
 800467a:	76fb      	strb	r3, [r7, #27]
 800467c:	e00d      	b.n	800469a <UART_SetConfig+0x282>
 800467e:	2302      	movs	r3, #2
 8004680:	76fb      	strb	r3, [r7, #27]
 8004682:	e00a      	b.n	800469a <UART_SetConfig+0x282>
 8004684:	2304      	movs	r3, #4
 8004686:	76fb      	strb	r3, [r7, #27]
 8004688:	e007      	b.n	800469a <UART_SetConfig+0x282>
 800468a:	2308      	movs	r3, #8
 800468c:	76fb      	strb	r3, [r7, #27]
 800468e:	e004      	b.n	800469a <UART_SetConfig+0x282>
 8004690:	2310      	movs	r3, #16
 8004692:	76fb      	strb	r3, [r7, #27]
 8004694:	e001      	b.n	800469a <UART_SetConfig+0x282>
 8004696:	2310      	movs	r3, #16
 8004698:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a17      	ldr	r2, [pc, #92]	; (80046fc <UART_SetConfig+0x2e4>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	f040 8087 	bne.w	80047b4 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80046a6:	7efb      	ldrb	r3, [r7, #27]
 80046a8:	2b08      	cmp	r3, #8
 80046aa:	d837      	bhi.n	800471c <UART_SetConfig+0x304>
 80046ac:	a201      	add	r2, pc, #4	; (adr r2, 80046b4 <UART_SetConfig+0x29c>)
 80046ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046b2:	bf00      	nop
 80046b4:	080046d9 	.word	0x080046d9
 80046b8:	0800471d 	.word	0x0800471d
 80046bc:	080046e1 	.word	0x080046e1
 80046c0:	0800471d 	.word	0x0800471d
 80046c4:	080046e7 	.word	0x080046e7
 80046c8:	0800471d 	.word	0x0800471d
 80046cc:	0800471d 	.word	0x0800471d
 80046d0:	0800471d 	.word	0x0800471d
 80046d4:	080046ef 	.word	0x080046ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80046d8:	f7fd fe22 	bl	8002320 <HAL_RCC_GetPCLK1Freq>
 80046dc:	6178      	str	r0, [r7, #20]
        break;
 80046de:	e022      	b.n	8004726 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80046e0:	4b0d      	ldr	r3, [pc, #52]	; (8004718 <UART_SetConfig+0x300>)
 80046e2:	617b      	str	r3, [r7, #20]
        break;
 80046e4:	e01f      	b.n	8004726 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80046e6:	f7fd fd83 	bl	80021f0 <HAL_RCC_GetSysClockFreq>
 80046ea:	6178      	str	r0, [r7, #20]
        break;
 80046ec:	e01b      	b.n	8004726 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80046ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046f2:	617b      	str	r3, [r7, #20]
        break;
 80046f4:	e017      	b.n	8004726 <UART_SetConfig+0x30e>
 80046f6:	bf00      	nop
 80046f8:	efff69f3 	.word	0xefff69f3
 80046fc:	40008000 	.word	0x40008000
 8004700:	40013800 	.word	0x40013800
 8004704:	40021000 	.word	0x40021000
 8004708:	40004400 	.word	0x40004400
 800470c:	40004800 	.word	0x40004800
 8004710:	40004c00 	.word	0x40004c00
 8004714:	40005000 	.word	0x40005000
 8004718:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800471c:	2300      	movs	r3, #0
 800471e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004720:	2301      	movs	r3, #1
 8004722:	76bb      	strb	r3, [r7, #26]
        break;
 8004724:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	2b00      	cmp	r3, #0
 800472a:	f000 80f1 	beq.w	8004910 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	685a      	ldr	r2, [r3, #4]
 8004732:	4613      	mov	r3, r2
 8004734:	005b      	lsls	r3, r3, #1
 8004736:	4413      	add	r3, r2
 8004738:	697a      	ldr	r2, [r7, #20]
 800473a:	429a      	cmp	r2, r3
 800473c:	d305      	bcc.n	800474a <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004744:	697a      	ldr	r2, [r7, #20]
 8004746:	429a      	cmp	r2, r3
 8004748:	d902      	bls.n	8004750 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	76bb      	strb	r3, [r7, #26]
 800474e:	e0df      	b.n	8004910 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	4618      	mov	r0, r3
 8004754:	f04f 0100 	mov.w	r1, #0
 8004758:	f04f 0200 	mov.w	r2, #0
 800475c:	f04f 0300 	mov.w	r3, #0
 8004760:	020b      	lsls	r3, r1, #8
 8004762:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004766:	0202      	lsls	r2, r0, #8
 8004768:	6879      	ldr	r1, [r7, #4]
 800476a:	6849      	ldr	r1, [r1, #4]
 800476c:	0849      	lsrs	r1, r1, #1
 800476e:	4608      	mov	r0, r1
 8004770:	f04f 0100 	mov.w	r1, #0
 8004774:	1814      	adds	r4, r2, r0
 8004776:	eb43 0501 	adc.w	r5, r3, r1
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	461a      	mov	r2, r3
 8004780:	f04f 0300 	mov.w	r3, #0
 8004784:	4620      	mov	r0, r4
 8004786:	4629      	mov	r1, r5
 8004788:	f7fb fd1e 	bl	80001c8 <__aeabi_uldivmod>
 800478c:	4602      	mov	r2, r0
 800478e:	460b      	mov	r3, r1
 8004790:	4613      	mov	r3, r2
 8004792:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800479a:	d308      	bcc.n	80047ae <UART_SetConfig+0x396>
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80047a2:	d204      	bcs.n	80047ae <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	693a      	ldr	r2, [r7, #16]
 80047aa:	60da      	str	r2, [r3, #12]
 80047ac:	e0b0      	b.n	8004910 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 80047ae:	2301      	movs	r3, #1
 80047b0:	76bb      	strb	r3, [r7, #26]
 80047b2:	e0ad      	b.n	8004910 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	69db      	ldr	r3, [r3, #28]
 80047b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047bc:	d15c      	bne.n	8004878 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 80047be:	7efb      	ldrb	r3, [r7, #27]
 80047c0:	2b08      	cmp	r3, #8
 80047c2:	d828      	bhi.n	8004816 <UART_SetConfig+0x3fe>
 80047c4:	a201      	add	r2, pc, #4	; (adr r2, 80047cc <UART_SetConfig+0x3b4>)
 80047c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047ca:	bf00      	nop
 80047cc:	080047f1 	.word	0x080047f1
 80047d0:	080047f9 	.word	0x080047f9
 80047d4:	08004801 	.word	0x08004801
 80047d8:	08004817 	.word	0x08004817
 80047dc:	08004807 	.word	0x08004807
 80047e0:	08004817 	.word	0x08004817
 80047e4:	08004817 	.word	0x08004817
 80047e8:	08004817 	.word	0x08004817
 80047ec:	0800480f 	.word	0x0800480f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047f0:	f7fd fd96 	bl	8002320 <HAL_RCC_GetPCLK1Freq>
 80047f4:	6178      	str	r0, [r7, #20]
        break;
 80047f6:	e013      	b.n	8004820 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80047f8:	f7fd fda8 	bl	800234c <HAL_RCC_GetPCLK2Freq>
 80047fc:	6178      	str	r0, [r7, #20]
        break;
 80047fe:	e00f      	b.n	8004820 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004800:	4b49      	ldr	r3, [pc, #292]	; (8004928 <UART_SetConfig+0x510>)
 8004802:	617b      	str	r3, [r7, #20]
        break;
 8004804:	e00c      	b.n	8004820 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004806:	f7fd fcf3 	bl	80021f0 <HAL_RCC_GetSysClockFreq>
 800480a:	6178      	str	r0, [r7, #20]
        break;
 800480c:	e008      	b.n	8004820 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800480e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004812:	617b      	str	r3, [r7, #20]
        break;
 8004814:	e004      	b.n	8004820 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8004816:	2300      	movs	r3, #0
 8004818:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	76bb      	strb	r3, [r7, #26]
        break;
 800481e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d074      	beq.n	8004910 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	005a      	lsls	r2, r3, #1
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	085b      	lsrs	r3, r3, #1
 8004830:	441a      	add	r2, r3
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	fbb2 f3f3 	udiv	r3, r2, r3
 800483a:	b29b      	uxth	r3, r3
 800483c:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	2b0f      	cmp	r3, #15
 8004842:	d916      	bls.n	8004872 <UART_SetConfig+0x45a>
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800484a:	d212      	bcs.n	8004872 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	b29b      	uxth	r3, r3
 8004850:	f023 030f 	bic.w	r3, r3, #15
 8004854:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	085b      	lsrs	r3, r3, #1
 800485a:	b29b      	uxth	r3, r3
 800485c:	f003 0307 	and.w	r3, r3, #7
 8004860:	b29a      	uxth	r2, r3
 8004862:	89fb      	ldrh	r3, [r7, #14]
 8004864:	4313      	orrs	r3, r2
 8004866:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	89fa      	ldrh	r2, [r7, #14]
 800486e:	60da      	str	r2, [r3, #12]
 8004870:	e04e      	b.n	8004910 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	76bb      	strb	r3, [r7, #26]
 8004876:	e04b      	b.n	8004910 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004878:	7efb      	ldrb	r3, [r7, #27]
 800487a:	2b08      	cmp	r3, #8
 800487c:	d827      	bhi.n	80048ce <UART_SetConfig+0x4b6>
 800487e:	a201      	add	r2, pc, #4	; (adr r2, 8004884 <UART_SetConfig+0x46c>)
 8004880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004884:	080048a9 	.word	0x080048a9
 8004888:	080048b1 	.word	0x080048b1
 800488c:	080048b9 	.word	0x080048b9
 8004890:	080048cf 	.word	0x080048cf
 8004894:	080048bf 	.word	0x080048bf
 8004898:	080048cf 	.word	0x080048cf
 800489c:	080048cf 	.word	0x080048cf
 80048a0:	080048cf 	.word	0x080048cf
 80048a4:	080048c7 	.word	0x080048c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048a8:	f7fd fd3a 	bl	8002320 <HAL_RCC_GetPCLK1Freq>
 80048ac:	6178      	str	r0, [r7, #20]
        break;
 80048ae:	e013      	b.n	80048d8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80048b0:	f7fd fd4c 	bl	800234c <HAL_RCC_GetPCLK2Freq>
 80048b4:	6178      	str	r0, [r7, #20]
        break;
 80048b6:	e00f      	b.n	80048d8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048b8:	4b1b      	ldr	r3, [pc, #108]	; (8004928 <UART_SetConfig+0x510>)
 80048ba:	617b      	str	r3, [r7, #20]
        break;
 80048bc:	e00c      	b.n	80048d8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048be:	f7fd fc97 	bl	80021f0 <HAL_RCC_GetSysClockFreq>
 80048c2:	6178      	str	r0, [r7, #20]
        break;
 80048c4:	e008      	b.n	80048d8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048ca:	617b      	str	r3, [r7, #20]
        break;
 80048cc:	e004      	b.n	80048d8 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 80048ce:	2300      	movs	r3, #0
 80048d0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	76bb      	strb	r3, [r7, #26]
        break;
 80048d6:	bf00      	nop
    }

    if (pclk != 0U)
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d018      	beq.n	8004910 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	085a      	lsrs	r2, r3, #1
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	441a      	add	r2, r3
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80048f0:	b29b      	uxth	r3, r3
 80048f2:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	2b0f      	cmp	r3, #15
 80048f8:	d908      	bls.n	800490c <UART_SetConfig+0x4f4>
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004900:	d204      	bcs.n	800490c <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	693a      	ldr	r2, [r7, #16]
 8004908:	60da      	str	r2, [r3, #12]
 800490a:	e001      	b.n	8004910 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800490c:	2301      	movs	r3, #1
 800490e:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2200      	movs	r2, #0
 8004914:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2200      	movs	r2, #0
 800491a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800491c:	7ebb      	ldrb	r3, [r7, #26]
}
 800491e:	4618      	mov	r0, r3
 8004920:	3720      	adds	r7, #32
 8004922:	46bd      	mov	sp, r7
 8004924:	bdb0      	pop	{r4, r5, r7, pc}
 8004926:	bf00      	nop
 8004928:	00f42400 	.word	0x00f42400

0800492c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800492c:	b480      	push	{r7}
 800492e:	b083      	sub	sp, #12
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004938:	f003 0301 	and.w	r3, r3, #1
 800493c:	2b00      	cmp	r3, #0
 800493e:	d00a      	beq.n	8004956 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	430a      	orrs	r2, r1
 8004954:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800495a:	f003 0302 	and.w	r3, r3, #2
 800495e:	2b00      	cmp	r3, #0
 8004960:	d00a      	beq.n	8004978 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	430a      	orrs	r2, r1
 8004976:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800497c:	f003 0304 	and.w	r3, r3, #4
 8004980:	2b00      	cmp	r3, #0
 8004982:	d00a      	beq.n	800499a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	430a      	orrs	r2, r1
 8004998:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800499e:	f003 0308 	and.w	r3, r3, #8
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d00a      	beq.n	80049bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	430a      	orrs	r2, r1
 80049ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c0:	f003 0310 	and.w	r3, r3, #16
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d00a      	beq.n	80049de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	689b      	ldr	r3, [r3, #8]
 80049ce:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	430a      	orrs	r2, r1
 80049dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e2:	f003 0320 	and.w	r3, r3, #32
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d00a      	beq.n	8004a00 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	430a      	orrs	r2, r1
 80049fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d01a      	beq.n	8004a42 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	430a      	orrs	r2, r1
 8004a20:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a2a:	d10a      	bne.n	8004a42 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	430a      	orrs	r2, r1
 8004a40:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d00a      	beq.n	8004a64 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	430a      	orrs	r2, r1
 8004a62:	605a      	str	r2, [r3, #4]
  }
}
 8004a64:	bf00      	nop
 8004a66:	370c      	adds	r7, #12
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6e:	4770      	bx	lr

08004a70 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b086      	sub	sp, #24
 8004a74:	af02      	add	r7, sp, #8
 8004a76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004a80:	f7fc f9b2 	bl	8000de8 <HAL_GetTick>
 8004a84:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f003 0308 	and.w	r3, r3, #8
 8004a90:	2b08      	cmp	r3, #8
 8004a92:	d10e      	bne.n	8004ab2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a94:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004a98:	9300      	str	r3, [sp, #0]
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004aa2:	6878      	ldr	r0, [r7, #4]
 8004aa4:	f000 f82d 	bl	8004b02 <UART_WaitOnFlagUntilTimeout>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d001      	beq.n	8004ab2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004aae:	2303      	movs	r3, #3
 8004ab0:	e023      	b.n	8004afa <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f003 0304 	and.w	r3, r3, #4
 8004abc:	2b04      	cmp	r3, #4
 8004abe:	d10e      	bne.n	8004ade <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ac0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004ac4:	9300      	str	r3, [sp, #0]
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	f000 f817 	bl	8004b02 <UART_WaitOnFlagUntilTimeout>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d001      	beq.n	8004ade <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ada:	2303      	movs	r3, #3
 8004adc:	e00d      	b.n	8004afa <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2220      	movs	r2, #32
 8004ae2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2220      	movs	r2, #32
 8004ae8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2200      	movs	r2, #0
 8004aee:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2200      	movs	r2, #0
 8004af4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004af8:	2300      	movs	r3, #0
}
 8004afa:	4618      	mov	r0, r3
 8004afc:	3710      	adds	r7, #16
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}

08004b02 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004b02:	b580      	push	{r7, lr}
 8004b04:	b084      	sub	sp, #16
 8004b06:	af00      	add	r7, sp, #0
 8004b08:	60f8      	str	r0, [r7, #12]
 8004b0a:	60b9      	str	r1, [r7, #8]
 8004b0c:	603b      	str	r3, [r7, #0]
 8004b0e:	4613      	mov	r3, r2
 8004b10:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b12:	e05e      	b.n	8004bd2 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b14:	69bb      	ldr	r3, [r7, #24]
 8004b16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b1a:	d05a      	beq.n	8004bd2 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b1c:	f7fc f964 	bl	8000de8 <HAL_GetTick>
 8004b20:	4602      	mov	r2, r0
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	1ad3      	subs	r3, r2, r3
 8004b26:	69ba      	ldr	r2, [r7, #24]
 8004b28:	429a      	cmp	r2, r3
 8004b2a:	d302      	bcc.n	8004b32 <UART_WaitOnFlagUntilTimeout+0x30>
 8004b2c:	69bb      	ldr	r3, [r7, #24]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d11b      	bne.n	8004b6a <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	681a      	ldr	r2, [r3, #0]
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004b40:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	689a      	ldr	r2, [r3, #8]
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f022 0201 	bic.w	r2, r2, #1
 8004b50:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	2220      	movs	r2, #32
 8004b56:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	2220      	movs	r2, #32
 8004b5c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	2200      	movs	r2, #0
 8004b62:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004b66:	2303      	movs	r3, #3
 8004b68:	e043      	b.n	8004bf2 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f003 0304 	and.w	r3, r3, #4
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d02c      	beq.n	8004bd2 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	69db      	ldr	r3, [r3, #28]
 8004b7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b86:	d124      	bne.n	8004bd2 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004b90:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	681a      	ldr	r2, [r3, #0]
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004ba0:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	689a      	ldr	r2, [r3, #8]
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f022 0201 	bic.w	r2, r2, #1
 8004bb0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	2220      	movs	r2, #32
 8004bb6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	2220      	movs	r2, #32
 8004bbc:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	2220      	movs	r2, #32
 8004bc2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004bce:	2303      	movs	r3, #3
 8004bd0:	e00f      	b.n	8004bf2 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	69da      	ldr	r2, [r3, #28]
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	4013      	ands	r3, r2
 8004bdc:	68ba      	ldr	r2, [r7, #8]
 8004bde:	429a      	cmp	r2, r3
 8004be0:	bf0c      	ite	eq
 8004be2:	2301      	moveq	r3, #1
 8004be4:	2300      	movne	r3, #0
 8004be6:	b2db      	uxtb	r3, r3
 8004be8:	461a      	mov	r2, r3
 8004bea:	79fb      	ldrb	r3, [r7, #7]
 8004bec:	429a      	cmp	r2, r3
 8004bee:	d091      	beq.n	8004b14 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004bf0:	2300      	movs	r3, #0
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	3710      	adds	r7, #16
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}
	...

08004bfc <__libc_init_array>:
 8004bfc:	b570      	push	{r4, r5, r6, lr}
 8004bfe:	4d0d      	ldr	r5, [pc, #52]	; (8004c34 <__libc_init_array+0x38>)
 8004c00:	4c0d      	ldr	r4, [pc, #52]	; (8004c38 <__libc_init_array+0x3c>)
 8004c02:	1b64      	subs	r4, r4, r5
 8004c04:	10a4      	asrs	r4, r4, #2
 8004c06:	2600      	movs	r6, #0
 8004c08:	42a6      	cmp	r6, r4
 8004c0a:	d109      	bne.n	8004c20 <__libc_init_array+0x24>
 8004c0c:	4d0b      	ldr	r5, [pc, #44]	; (8004c3c <__libc_init_array+0x40>)
 8004c0e:	4c0c      	ldr	r4, [pc, #48]	; (8004c40 <__libc_init_array+0x44>)
 8004c10:	f000 f820 	bl	8004c54 <_init>
 8004c14:	1b64      	subs	r4, r4, r5
 8004c16:	10a4      	asrs	r4, r4, #2
 8004c18:	2600      	movs	r6, #0
 8004c1a:	42a6      	cmp	r6, r4
 8004c1c:	d105      	bne.n	8004c2a <__libc_init_array+0x2e>
 8004c1e:	bd70      	pop	{r4, r5, r6, pc}
 8004c20:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c24:	4798      	blx	r3
 8004c26:	3601      	adds	r6, #1
 8004c28:	e7ee      	b.n	8004c08 <__libc_init_array+0xc>
 8004c2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c2e:	4798      	blx	r3
 8004c30:	3601      	adds	r6, #1
 8004c32:	e7f2      	b.n	8004c1a <__libc_init_array+0x1e>
 8004c34:	080cb784 	.word	0x080cb784
 8004c38:	080cb784 	.word	0x080cb784
 8004c3c:	080cb784 	.word	0x080cb784
 8004c40:	080cb788 	.word	0x080cb788

08004c44 <memset>:
 8004c44:	4402      	add	r2, r0
 8004c46:	4603      	mov	r3, r0
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d100      	bne.n	8004c4e <memset+0xa>
 8004c4c:	4770      	bx	lr
 8004c4e:	f803 1b01 	strb.w	r1, [r3], #1
 8004c52:	e7f9      	b.n	8004c48 <memset+0x4>

08004c54 <_init>:
 8004c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c56:	bf00      	nop
 8004c58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c5a:	bc08      	pop	{r3}
 8004c5c:	469e      	mov	lr, r3
 8004c5e:	4770      	bx	lr

08004c60 <_fini>:
 8004c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c62:	bf00      	nop
 8004c64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c66:	bc08      	pop	{r3}
 8004c68:	469e      	mov	lr, r3
 8004c6a:	4770      	bx	lr
